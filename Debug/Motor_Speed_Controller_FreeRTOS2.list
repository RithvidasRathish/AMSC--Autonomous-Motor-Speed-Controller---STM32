
Motor_Speed_Controller_FreeRTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c744  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800c8e8  0800c8e8  0000d8e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce1c  0800ce1c  0000e1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ce1c  0800ce1c  0000de1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce24  0800ce24  0000e1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce24  0800ce24  0000de24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce28  0800ce28  0000de28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800ce2c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043cc  200001e0  0800d00c  0000e1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045ac  0800d00c  0000e5ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001734e  00000000  00000000  0000e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346e  00000000  00000000  0002555e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  000289d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001170  00000000  00000000  0002a010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8f0  00000000  00000000  0002b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019aeb  00000000  00000000  00045a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6f43  00000000  00000000  0005f55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010649e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073c8  00000000  00000000  001064e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0010d8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c8cc 	.word	0x0800c8cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800c8cc 	.word	0x0800c8cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <millis>:
// Calculate macro period in *nanoseconds* from VCSEL period in PCLKs
// based on VL53L0X_calc_macro_period_ps()
// PLL_period_ps = 1655; macro_period_vclks = 2304
#define calcMacroPeriod(vcsel_period_pclks) ((((uint32_t)2304 * (vcsel_period_pclks) * 1655) + 500) / 1000)

uint32_t millis(){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
	uint32_t st=HAL_GetTick();
 8001036:	f001 ff59 	bl	8002eec <HAL_GetTick>
 800103a:	6078      	str	r0, [r7, #4]
	return st;
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <writeReg>:

// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af02      	add	r7, sp, #8
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
	uint8_t array[2];
	array[0]=reg;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,2,HAL_MAX_DELAY);
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2302      	movs	r3, #2
 800106c:	2152      	movs	r1, #82	@ 0x52
 800106e:	4803      	ldr	r0, [pc, #12]	@ (800107c <writeReg+0x34>)
 8001070:	f002 fede 	bl	8003e30 <HAL_I2C_Master_Transmit>

}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000574 	.word	0x20000574

08001080 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af02      	add	r7, sp, #8
 8001086:	4603      	mov	r3, r0
 8001088:	460a      	mov	r2, r1
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	4613      	mov	r3, r2
 800108e:	80bb      	strh	r3, [r7, #4]
	uint8_t array[3];
	array[0]=reg;
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	733b      	strb	r3, [r7, #12]
	array[1]=(value >> 8) & 0xFF;
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	b29b      	uxth	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	737b      	strb	r3, [r7, #13]
	array[2]= value  & 0xFF;
 800109e:	88bb      	ldrh	r3, [r7, #4]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,3,HAL_MAX_DELAY);
 80010a4:	f107 020c 	add.w	r2, r7, #12
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2303      	movs	r3, #3
 80010b0:	2152      	movs	r1, #82	@ 0x52
 80010b2:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <writeReg16Bit+0x40>)
 80010b4:	f002 febc 	bl	8003e30 <HAL_I2C_Master_Transmit>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000574 	.word	0x20000574

080010c4 <readReg>:
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,5,HAL_MAX_DELAY);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
 	uint8_t array[1];
 	uint8_t data[1];
	array[0]=reg;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,1,HAL_MAX_DELAY);
 80010d2:	f107 020c 	add.w	r2, r7, #12
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	2152      	movs	r1, #82	@ 0x52
 80010e0:	4809      	ldr	r0, [pc, #36]	@ (8001108 <readReg+0x44>)
 80010e2:	f002 fea5 	bl	8003e30 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,data,1,HAL_MAX_DELAY);
 80010e6:	f107 0208 	add.w	r2, r7, #8
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	2152      	movs	r1, #82	@ 0x52
 80010f4:	4804      	ldr	r0, [pc, #16]	@ (8001108 <readReg+0x44>)
 80010f6:	f002 ff99 	bl	800402c <HAL_I2C_Master_Receive>
	value=data[0];
 80010fa:	7a3b      	ldrb	r3, [r7, #8]
 80010fc:	73fb      	strb	r3, [r7, #15]
  return value;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000574 	.word	0x20000574

0800110c <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af02      	add	r7, sp, #8
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	uint16_t value;
	uint8_t array[1];
	uint8_t data[2];
	array[0]=reg;
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,1,HAL_MAX_DELAY);
 800111a:	f107 020c 	add.w	r2, r7, #12
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	2152      	movs	r1, #82	@ 0x52
 8001128:	480c      	ldr	r0, [pc, #48]	@ (800115c <readReg16Bit+0x50>)
 800112a:	f002 fe81 	bl	8003e30 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,data,2,HAL_MAX_DELAY);
 800112e:	f107 0208 	add.w	r2, r7, #8
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2302      	movs	r3, #2
 800113a:	2152      	movs	r1, #82	@ 0x52
 800113c:	4807      	ldr	r0, [pc, #28]	@ (800115c <readReg16Bit+0x50>)
 800113e:	f002 ff75 	bl	800402c <HAL_I2C_Master_Receive>
	//value=array[1];
	value  = (uint16_t)data[0] << 8;
 8001142:	7a3b      	ldrb	r3, [r7, #8]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	81fb      	strh	r3, [r7, #14]
	value |=data[1];
 8001148:	7a7b      	ldrb	r3, [r7, #9]
 800114a:	461a      	mov	r2, r3
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	4313      	orrs	r3, r2
 8001150:	81fb      	strh	r3, [r7, #14]


  return value;
 8001152:	89fb      	ldrh	r3, [r7, #14]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000574 	.word	0x20000574

08001160 <writeMulti>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af02      	add	r7, sp, #8
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	71bb      	strb	r3, [r7, #6]
  ///Wire.beginTransmission(address);
  ///Wire.write(reg);
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,reg,1,HAL_MAX_DELAY);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	461a      	mov	r2, r3
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	2152      	movs	r1, #82	@ 0x52
 800117e:	480d      	ldr	r0, [pc, #52]	@ (80011b4 <writeMulti+0x54>)
 8001180:	f002 fe56 	bl	8003e30 <HAL_I2C_Master_Transmit>

  while (count-- > 0)
 8001184:	e00c      	b.n	80011a0 <writeMulti+0x40>
  {
    //Wire.write(*(src++));
	  HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,*(src++),1,HAL_MAX_DELAY);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	603a      	str	r2, [r7, #0]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	2152      	movs	r1, #82	@ 0x52
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <writeMulti+0x54>)
 800119c:	f002 fe48 	bl	8003e30 <HAL_I2C_Master_Transmit>
  while (count-- > 0)
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	1e5a      	subs	r2, r3, #1
 80011a4:	71ba      	strb	r2, [r7, #6]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1ed      	bne.n	8001186 <writeMulti+0x26>
  }

  //last_status = Wire.endTransmission();
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000574 	.word	0x20000574

080011b8 <readMulti>:

void readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80011b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011bc:	b087      	sub	sp, #28
 80011be:	af02      	add	r7, sp, #8
 80011c0:	4603      	mov	r3, r0
 80011c2:	6039      	str	r1, [r7, #0]
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	4613      	mov	r3, r2
 80011c8:	71bb      	strb	r3, [r7, #6]
 80011ca:	466b      	mov	r3, sp
 80011cc:	461e      	mov	r6, r3
	uint8_t array[count];
 80011ce:	79b9      	ldrb	r1, [r7, #6]
 80011d0:	460b      	mov	r3, r1
 80011d2:	3b01      	subs	r3, #1
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	b2cb      	uxtb	r3, r1
 80011d8:	2200      	movs	r2, #0
 80011da:	4698      	mov	r8, r3
 80011dc:	4691      	mov	r9, r2
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011f2:	b2cb      	uxtb	r3, r1
 80011f4:	2200      	movs	r2, #0
 80011f6:	461c      	mov	r4, r3
 80011f8:	4615      	mov	r5, r2
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	00eb      	lsls	r3, r5, #3
 8001204:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001208:	00e2      	lsls	r2, r4, #3
 800120a:	460b      	mov	r3, r1
 800120c:	3307      	adds	r3, #7
 800120e:	08db      	lsrs	r3, r3, #3
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	ebad 0d03 	sub.w	sp, sp, r3
 8001216:	ab02      	add	r3, sp, #8
 8001218:	3300      	adds	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
	array[0]=reg;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	79fa      	ldrb	r2, [r7, #7]
 8001220:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array[0],1,HAL_MAX_DELAY);
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	2152      	movs	r1, #82	@ 0x52
 8001232:	4810      	ldr	r0, [pc, #64]	@ (8001274 <readMulti+0xbc>)
 8001234:	f002 fdfc 	bl	8003e30 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,count,HAL_MAX_DELAY);
 8001238:	79bb      	ldrb	r3, [r7, #6]
 800123a:	b29b      	uxth	r3, r3
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	9200      	str	r2, [sp, #0]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	2152      	movs	r1, #82	@ 0x52
 8001246:	480b      	ldr	r0, [pc, #44]	@ (8001274 <readMulti+0xbc>)
 8001248:	f002 fef0 	bl	800402c <HAL_I2C_Master_Receive>
  while (count-- > 0)
 800124c:	e007      	b.n	800125e <readMulti+0xa6>
  {
    *(dst++) = array[count-1];
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	1c59      	adds	r1, r3, #1
 8001256:	6039      	str	r1, [r7, #0]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	5c8a      	ldrb	r2, [r1, r2]
 800125c:	701a      	strb	r2, [r3, #0]
  while (count-- > 0)
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	71ba      	strb	r2, [r7, #6]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f2      	bne.n	800124e <readMulti+0x96>
 8001268:	46b5      	mov	sp, r6
  }
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001274:	20000574 	.word	0x20000574

08001278 <init>:
  address = new_addr;
}


bool init(bool io_2v8)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00a      	beq.n	800129e <init+0x26>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
    readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8001288:	2089      	movs	r0, #137	@ 0x89
 800128a:	f7ff ff1b 	bl	80010c4 <readReg>
 800128e:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4619      	mov	r1, r3
 8001298:	2089      	movs	r0, #137	@ 0x89
 800129a:	f7ff fed5 	bl	8001048 <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 800129e:	2100      	movs	r1, #0
 80012a0:	2088      	movs	r0, #136	@ 0x88
 80012a2:	f7ff fed1 	bl	8001048 <writeReg>

  writeReg(0x80, 0x01);
 80012a6:	2101      	movs	r1, #1
 80012a8:	2080      	movs	r0, #128	@ 0x80
 80012aa:	f7ff fecd 	bl	8001048 <writeReg>
  writeReg(0xFF, 0x01);
 80012ae:	2101      	movs	r1, #1
 80012b0:	20ff      	movs	r0, #255	@ 0xff
 80012b2:	f7ff fec9 	bl	8001048 <writeReg>
  writeReg(0x00, 0x00);
 80012b6:	2100      	movs	r1, #0
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff fec5 	bl	8001048 <writeReg>
  stop_variable = readReg(0x91);
 80012be:	2091      	movs	r0, #145	@ 0x91
 80012c0:	f7ff ff00 	bl	80010c4 <readReg>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b3d      	ldr	r3, [pc, #244]	@ (80013c0 <init+0x148>)
 80012ca:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 80012cc:	2101      	movs	r1, #1
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff feba 	bl	8001048 <writeReg>
  writeReg(0xFF, 0x00);
 80012d4:	2100      	movs	r1, #0
 80012d6:	20ff      	movs	r0, #255	@ 0xff
 80012d8:	f7ff feb6 	bl	8001048 <writeReg>
  writeReg(0x80, 0x00);
 80012dc:	2100      	movs	r1, #0
 80012de:	2080      	movs	r0, #128	@ 0x80
 80012e0:	f7ff feb2 	bl	8001048 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80012e4:	2060      	movs	r0, #96	@ 0x60
 80012e6:	f7ff feed 	bl	80010c4 <readReg>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f043 0312 	orr.w	r3, r3, #18
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4619      	mov	r1, r3
 80012f4:	2060      	movs	r0, #96	@ 0x60
 80012f6:	f7ff fea7 	bl	8001048 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80012fa:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 80012fe:	f000 fa0f 	bl	8001720 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8001302:	21ff      	movs	r1, #255	@ 0xff
 8001304:	2001      	movs	r0, #1
 8001306:	f7ff fe9f 	bl	8001048 <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 800130a:	f107 0213 	add.w	r2, r7, #19
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fbf9 	bl	8001b0c <getSpadInfo>
 800131a:	4603      	mov	r3, r0
 800131c:	f083 0301 	eor.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <init+0xb2>
 8001326:	2300      	movs	r3, #0
 8001328:	e1f1      	b.n	800170e <init+0x496>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	2206      	movs	r2, #6
 8001330:	4619      	mov	r1, r3
 8001332:	20b0      	movs	r0, #176	@ 0xb0
 8001334:	f7ff ff40 	bl	80011b8 <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 8001338:	2101      	movs	r1, #1
 800133a:	20ff      	movs	r0, #255	@ 0xff
 800133c:	f7ff fe84 	bl	8001048 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001340:	2100      	movs	r1, #0
 8001342:	204f      	movs	r0, #79	@ 0x4f
 8001344:	f7ff fe80 	bl	8001048 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001348:	212c      	movs	r1, #44	@ 0x2c
 800134a:	204e      	movs	r0, #78	@ 0x4e
 800134c:	f7ff fe7c 	bl	8001048 <writeReg>
  writeReg(0xFF, 0x00);
 8001350:	2100      	movs	r1, #0
 8001352:	20ff      	movs	r0, #255	@ 0xff
 8001354:	f7ff fe78 	bl	8001048 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001358:	21b4      	movs	r1, #180	@ 0xb4
 800135a:	20b6      	movs	r0, #182	@ 0xb6
 800135c:	f7ff fe74 	bl	8001048 <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8001360:	7cfb      	ldrb	r3, [r7, #19]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <init+0xf2>
 8001366:	230c      	movs	r3, #12
 8001368:	e000      	b.n	800136c <init+0xf4>
 800136a:	2300      	movs	r3, #0
 800136c:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8001372:	2300      	movs	r3, #0
 8001374:	75bb      	strb	r3, [r7, #22]
 8001376:	e03c      	b.n	80013f2 <init+0x17a>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8001378:	7dba      	ldrb	r2, [r7, #22]
 800137a:	7d7b      	ldrb	r3, [r7, #21]
 800137c:	429a      	cmp	r2, r3
 800137e:	d303      	bcc.n	8001388 <init+0x110>
 8001380:	7d3b      	ldrb	r3, [r7, #20]
 8001382:	7dfa      	ldrb	r2, [r7, #23]
 8001384:	429a      	cmp	r2, r3
 8001386:	d11d      	bne.n	80013c4 <init+0x14c>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8001388:	7dbb      	ldrb	r3, [r7, #22]
 800138a:	08db      	lsrs	r3, r3, #3
 800138c:	b2d8      	uxtb	r0, r3
 800138e:	4603      	mov	r3, r0
 8001390:	3318      	adds	r3, #24
 8001392:	443b      	add	r3, r7
 8001394:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001398:	b25a      	sxtb	r2, r3
 800139a:	7dbb      	ldrb	r3, [r7, #22]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	2101      	movs	r1, #1
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	4013      	ands	r3, r2
 80013ae:	b25a      	sxtb	r2, r3
 80013b0:	4603      	mov	r3, r0
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	3318      	adds	r3, #24
 80013b6:	443b      	add	r3, r7
 80013b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80013bc:	e016      	b.n	80013ec <init+0x174>
 80013be:	bf00      	nop
 80013c0:	20000202 	.word	0x20000202
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80013c4:	7dbb      	ldrb	r3, [r7, #22]
 80013c6:	08db      	lsrs	r3, r3, #3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	3318      	adds	r3, #24
 80013cc:	443b      	add	r3, r7
 80013ce:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80013d2:	461a      	mov	r2, r3
 80013d4:	7dbb      	ldrb	r3, [r7, #22]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	fa42 f303 	asr.w	r3, r2, r3
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <init+0x174>
    {
      spads_enabled++;
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
 80013e8:	3301      	adds	r3, #1
 80013ea:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 80013ec:	7dbb      	ldrb	r3, [r7, #22]
 80013ee:	3301      	adds	r3, #1
 80013f0:	75bb      	strb	r3, [r7, #22]
 80013f2:	7dbb      	ldrb	r3, [r7, #22]
 80013f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80013f6:	d9bf      	bls.n	8001378 <init+0x100>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2206      	movs	r2, #6
 80013fe:	4619      	mov	r1, r3
 8001400:	20b0      	movs	r0, #176	@ 0xb0
 8001402:	f7ff fead 	bl	8001160 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 8001406:	2101      	movs	r1, #1
 8001408:	20ff      	movs	r0, #255	@ 0xff
 800140a:	f7ff fe1d 	bl	8001048 <writeReg>
  writeReg(0x00, 0x00);
 800140e:	2100      	movs	r1, #0
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fe19 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x00);
 8001416:	2100      	movs	r1, #0
 8001418:	20ff      	movs	r0, #255	@ 0xff
 800141a:	f7ff fe15 	bl	8001048 <writeReg>
  writeReg(0x09, 0x00);
 800141e:	2100      	movs	r1, #0
 8001420:	2009      	movs	r0, #9
 8001422:	f7ff fe11 	bl	8001048 <writeReg>
  writeReg(0x10, 0x00);
 8001426:	2100      	movs	r1, #0
 8001428:	2010      	movs	r0, #16
 800142a:	f7ff fe0d 	bl	8001048 <writeReg>
  writeReg(0x11, 0x00);
 800142e:	2100      	movs	r1, #0
 8001430:	2011      	movs	r0, #17
 8001432:	f7ff fe09 	bl	8001048 <writeReg>

  writeReg(0x24, 0x01);
 8001436:	2101      	movs	r1, #1
 8001438:	2024      	movs	r0, #36	@ 0x24
 800143a:	f7ff fe05 	bl	8001048 <writeReg>
  writeReg(0x25, 0xFF);
 800143e:	21ff      	movs	r1, #255	@ 0xff
 8001440:	2025      	movs	r0, #37	@ 0x25
 8001442:	f7ff fe01 	bl	8001048 <writeReg>
  writeReg(0x75, 0x00);
 8001446:	2100      	movs	r1, #0
 8001448:	2075      	movs	r0, #117	@ 0x75
 800144a:	f7ff fdfd 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x01);
 800144e:	2101      	movs	r1, #1
 8001450:	20ff      	movs	r0, #255	@ 0xff
 8001452:	f7ff fdf9 	bl	8001048 <writeReg>
  writeReg(0x4E, 0x2C);
 8001456:	212c      	movs	r1, #44	@ 0x2c
 8001458:	204e      	movs	r0, #78	@ 0x4e
 800145a:	f7ff fdf5 	bl	8001048 <writeReg>
  writeReg(0x48, 0x00);
 800145e:	2100      	movs	r1, #0
 8001460:	2048      	movs	r0, #72	@ 0x48
 8001462:	f7ff fdf1 	bl	8001048 <writeReg>
  writeReg(0x30, 0x20);
 8001466:	2120      	movs	r1, #32
 8001468:	2030      	movs	r0, #48	@ 0x30
 800146a:	f7ff fded 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x00);
 800146e:	2100      	movs	r1, #0
 8001470:	20ff      	movs	r0, #255	@ 0xff
 8001472:	f7ff fde9 	bl	8001048 <writeReg>
  writeReg(0x30, 0x09);
 8001476:	2109      	movs	r1, #9
 8001478:	2030      	movs	r0, #48	@ 0x30
 800147a:	f7ff fde5 	bl	8001048 <writeReg>
  writeReg(0x54, 0x00);
 800147e:	2100      	movs	r1, #0
 8001480:	2054      	movs	r0, #84	@ 0x54
 8001482:	f7ff fde1 	bl	8001048 <writeReg>
  writeReg(0x31, 0x04);
 8001486:	2104      	movs	r1, #4
 8001488:	2031      	movs	r0, #49	@ 0x31
 800148a:	f7ff fddd 	bl	8001048 <writeReg>
  writeReg(0x32, 0x03);
 800148e:	2103      	movs	r1, #3
 8001490:	2032      	movs	r0, #50	@ 0x32
 8001492:	f7ff fdd9 	bl	8001048 <writeReg>
  writeReg(0x40, 0x83);
 8001496:	2183      	movs	r1, #131	@ 0x83
 8001498:	2040      	movs	r0, #64	@ 0x40
 800149a:	f7ff fdd5 	bl	8001048 <writeReg>
  writeReg(0x46, 0x25);
 800149e:	2125      	movs	r1, #37	@ 0x25
 80014a0:	2046      	movs	r0, #70	@ 0x46
 80014a2:	f7ff fdd1 	bl	8001048 <writeReg>
  writeReg(0x60, 0x00);
 80014a6:	2100      	movs	r1, #0
 80014a8:	2060      	movs	r0, #96	@ 0x60
 80014aa:	f7ff fdcd 	bl	8001048 <writeReg>
  writeReg(0x27, 0x00);
 80014ae:	2100      	movs	r1, #0
 80014b0:	2027      	movs	r0, #39	@ 0x27
 80014b2:	f7ff fdc9 	bl	8001048 <writeReg>
  writeReg(0x50, 0x06);
 80014b6:	2106      	movs	r1, #6
 80014b8:	2050      	movs	r0, #80	@ 0x50
 80014ba:	f7ff fdc5 	bl	8001048 <writeReg>
  writeReg(0x51, 0x00);
 80014be:	2100      	movs	r1, #0
 80014c0:	2051      	movs	r0, #81	@ 0x51
 80014c2:	f7ff fdc1 	bl	8001048 <writeReg>
  writeReg(0x52, 0x96);
 80014c6:	2196      	movs	r1, #150	@ 0x96
 80014c8:	2052      	movs	r0, #82	@ 0x52
 80014ca:	f7ff fdbd 	bl	8001048 <writeReg>
  writeReg(0x56, 0x08);
 80014ce:	2108      	movs	r1, #8
 80014d0:	2056      	movs	r0, #86	@ 0x56
 80014d2:	f7ff fdb9 	bl	8001048 <writeReg>
  writeReg(0x57, 0x30);
 80014d6:	2130      	movs	r1, #48	@ 0x30
 80014d8:	2057      	movs	r0, #87	@ 0x57
 80014da:	f7ff fdb5 	bl	8001048 <writeReg>
  writeReg(0x61, 0x00);
 80014de:	2100      	movs	r1, #0
 80014e0:	2061      	movs	r0, #97	@ 0x61
 80014e2:	f7ff fdb1 	bl	8001048 <writeReg>
  writeReg(0x62, 0x00);
 80014e6:	2100      	movs	r1, #0
 80014e8:	2062      	movs	r0, #98	@ 0x62
 80014ea:	f7ff fdad 	bl	8001048 <writeReg>
  writeReg(0x64, 0x00);
 80014ee:	2100      	movs	r1, #0
 80014f0:	2064      	movs	r0, #100	@ 0x64
 80014f2:	f7ff fda9 	bl	8001048 <writeReg>
  writeReg(0x65, 0x00);
 80014f6:	2100      	movs	r1, #0
 80014f8:	2065      	movs	r0, #101	@ 0x65
 80014fa:	f7ff fda5 	bl	8001048 <writeReg>
  writeReg(0x66, 0xA0);
 80014fe:	21a0      	movs	r1, #160	@ 0xa0
 8001500:	2066      	movs	r0, #102	@ 0x66
 8001502:	f7ff fda1 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x01);
 8001506:	2101      	movs	r1, #1
 8001508:	20ff      	movs	r0, #255	@ 0xff
 800150a:	f7ff fd9d 	bl	8001048 <writeReg>
  writeReg(0x22, 0x32);
 800150e:	2132      	movs	r1, #50	@ 0x32
 8001510:	2022      	movs	r0, #34	@ 0x22
 8001512:	f7ff fd99 	bl	8001048 <writeReg>
  writeReg(0x47, 0x14);
 8001516:	2114      	movs	r1, #20
 8001518:	2047      	movs	r0, #71	@ 0x47
 800151a:	f7ff fd95 	bl	8001048 <writeReg>
  writeReg(0x49, 0xFF);
 800151e:	21ff      	movs	r1, #255	@ 0xff
 8001520:	2049      	movs	r0, #73	@ 0x49
 8001522:	f7ff fd91 	bl	8001048 <writeReg>
  writeReg(0x4A, 0x00);
 8001526:	2100      	movs	r1, #0
 8001528:	204a      	movs	r0, #74	@ 0x4a
 800152a:	f7ff fd8d 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x00);
 800152e:	2100      	movs	r1, #0
 8001530:	20ff      	movs	r0, #255	@ 0xff
 8001532:	f7ff fd89 	bl	8001048 <writeReg>
  writeReg(0x7A, 0x0A);
 8001536:	210a      	movs	r1, #10
 8001538:	207a      	movs	r0, #122	@ 0x7a
 800153a:	f7ff fd85 	bl	8001048 <writeReg>
  writeReg(0x7B, 0x00);
 800153e:	2100      	movs	r1, #0
 8001540:	207b      	movs	r0, #123	@ 0x7b
 8001542:	f7ff fd81 	bl	8001048 <writeReg>
  writeReg(0x78, 0x21);
 8001546:	2121      	movs	r1, #33	@ 0x21
 8001548:	2078      	movs	r0, #120	@ 0x78
 800154a:	f7ff fd7d 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x01);
 800154e:	2101      	movs	r1, #1
 8001550:	20ff      	movs	r0, #255	@ 0xff
 8001552:	f7ff fd79 	bl	8001048 <writeReg>
  writeReg(0x23, 0x34);
 8001556:	2134      	movs	r1, #52	@ 0x34
 8001558:	2023      	movs	r0, #35	@ 0x23
 800155a:	f7ff fd75 	bl	8001048 <writeReg>
  writeReg(0x42, 0x00);
 800155e:	2100      	movs	r1, #0
 8001560:	2042      	movs	r0, #66	@ 0x42
 8001562:	f7ff fd71 	bl	8001048 <writeReg>
  writeReg(0x44, 0xFF);
 8001566:	21ff      	movs	r1, #255	@ 0xff
 8001568:	2044      	movs	r0, #68	@ 0x44
 800156a:	f7ff fd6d 	bl	8001048 <writeReg>
  writeReg(0x45, 0x26);
 800156e:	2126      	movs	r1, #38	@ 0x26
 8001570:	2045      	movs	r0, #69	@ 0x45
 8001572:	f7ff fd69 	bl	8001048 <writeReg>
  writeReg(0x46, 0x05);
 8001576:	2105      	movs	r1, #5
 8001578:	2046      	movs	r0, #70	@ 0x46
 800157a:	f7ff fd65 	bl	8001048 <writeReg>
  writeReg(0x40, 0x40);
 800157e:	2140      	movs	r1, #64	@ 0x40
 8001580:	2040      	movs	r0, #64	@ 0x40
 8001582:	f7ff fd61 	bl	8001048 <writeReg>
  writeReg(0x0E, 0x06);
 8001586:	2106      	movs	r1, #6
 8001588:	200e      	movs	r0, #14
 800158a:	f7ff fd5d 	bl	8001048 <writeReg>
  writeReg(0x20, 0x1A);
 800158e:	211a      	movs	r1, #26
 8001590:	2020      	movs	r0, #32
 8001592:	f7ff fd59 	bl	8001048 <writeReg>
  writeReg(0x43, 0x40);
 8001596:	2140      	movs	r1, #64	@ 0x40
 8001598:	2043      	movs	r0, #67	@ 0x43
 800159a:	f7ff fd55 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x00);
 800159e:	2100      	movs	r1, #0
 80015a0:	20ff      	movs	r0, #255	@ 0xff
 80015a2:	f7ff fd51 	bl	8001048 <writeReg>
  writeReg(0x34, 0x03);
 80015a6:	2103      	movs	r1, #3
 80015a8:	2034      	movs	r0, #52	@ 0x34
 80015aa:	f7ff fd4d 	bl	8001048 <writeReg>
  writeReg(0x35, 0x44);
 80015ae:	2144      	movs	r1, #68	@ 0x44
 80015b0:	2035      	movs	r0, #53	@ 0x35
 80015b2:	f7ff fd49 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x01);
 80015b6:	2101      	movs	r1, #1
 80015b8:	20ff      	movs	r0, #255	@ 0xff
 80015ba:	f7ff fd45 	bl	8001048 <writeReg>
  writeReg(0x31, 0x04);
 80015be:	2104      	movs	r1, #4
 80015c0:	2031      	movs	r0, #49	@ 0x31
 80015c2:	f7ff fd41 	bl	8001048 <writeReg>
  writeReg(0x4B, 0x09);
 80015c6:	2109      	movs	r1, #9
 80015c8:	204b      	movs	r0, #75	@ 0x4b
 80015ca:	f7ff fd3d 	bl	8001048 <writeReg>
  writeReg(0x4C, 0x05);
 80015ce:	2105      	movs	r1, #5
 80015d0:	204c      	movs	r0, #76	@ 0x4c
 80015d2:	f7ff fd39 	bl	8001048 <writeReg>
  writeReg(0x4D, 0x04);
 80015d6:	2104      	movs	r1, #4
 80015d8:	204d      	movs	r0, #77	@ 0x4d
 80015da:	f7ff fd35 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x00);
 80015de:	2100      	movs	r1, #0
 80015e0:	20ff      	movs	r0, #255	@ 0xff
 80015e2:	f7ff fd31 	bl	8001048 <writeReg>
  writeReg(0x44, 0x00);
 80015e6:	2100      	movs	r1, #0
 80015e8:	2044      	movs	r0, #68	@ 0x44
 80015ea:	f7ff fd2d 	bl	8001048 <writeReg>
  writeReg(0x45, 0x20);
 80015ee:	2120      	movs	r1, #32
 80015f0:	2045      	movs	r0, #69	@ 0x45
 80015f2:	f7ff fd29 	bl	8001048 <writeReg>
  writeReg(0x47, 0x08);
 80015f6:	2108      	movs	r1, #8
 80015f8:	2047      	movs	r0, #71	@ 0x47
 80015fa:	f7ff fd25 	bl	8001048 <writeReg>
  writeReg(0x48, 0x28);
 80015fe:	2128      	movs	r1, #40	@ 0x28
 8001600:	2048      	movs	r0, #72	@ 0x48
 8001602:	f7ff fd21 	bl	8001048 <writeReg>
  writeReg(0x67, 0x00);
 8001606:	2100      	movs	r1, #0
 8001608:	2067      	movs	r0, #103	@ 0x67
 800160a:	f7ff fd1d 	bl	8001048 <writeReg>
  writeReg(0x70, 0x04);
 800160e:	2104      	movs	r1, #4
 8001610:	2070      	movs	r0, #112	@ 0x70
 8001612:	f7ff fd19 	bl	8001048 <writeReg>
  writeReg(0x71, 0x01);
 8001616:	2101      	movs	r1, #1
 8001618:	2071      	movs	r0, #113	@ 0x71
 800161a:	f7ff fd15 	bl	8001048 <writeReg>
  writeReg(0x72, 0xFE);
 800161e:	21fe      	movs	r1, #254	@ 0xfe
 8001620:	2072      	movs	r0, #114	@ 0x72
 8001622:	f7ff fd11 	bl	8001048 <writeReg>
  writeReg(0x76, 0x00);
 8001626:	2100      	movs	r1, #0
 8001628:	2076      	movs	r0, #118	@ 0x76
 800162a:	f7ff fd0d 	bl	8001048 <writeReg>
  writeReg(0x77, 0x00);
 800162e:	2100      	movs	r1, #0
 8001630:	2077      	movs	r0, #119	@ 0x77
 8001632:	f7ff fd09 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x01);
 8001636:	2101      	movs	r1, #1
 8001638:	20ff      	movs	r0, #255	@ 0xff
 800163a:	f7ff fd05 	bl	8001048 <writeReg>
  writeReg(0x0D, 0x01);
 800163e:	2101      	movs	r1, #1
 8001640:	200d      	movs	r0, #13
 8001642:	f7ff fd01 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x00);
 8001646:	2100      	movs	r1, #0
 8001648:	20ff      	movs	r0, #255	@ 0xff
 800164a:	f7ff fcfd 	bl	8001048 <writeReg>
  writeReg(0x80, 0x01);
 800164e:	2101      	movs	r1, #1
 8001650:	2080      	movs	r0, #128	@ 0x80
 8001652:	f7ff fcf9 	bl	8001048 <writeReg>
  writeReg(0x01, 0xF8);
 8001656:	21f8      	movs	r1, #248	@ 0xf8
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff fcf5 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x01);
 800165e:	2101      	movs	r1, #1
 8001660:	20ff      	movs	r0, #255	@ 0xff
 8001662:	f7ff fcf1 	bl	8001048 <writeReg>
  writeReg(0x8E, 0x01);
 8001666:	2101      	movs	r1, #1
 8001668:	208e      	movs	r0, #142	@ 0x8e
 800166a:	f7ff fced 	bl	8001048 <writeReg>
  writeReg(0x00, 0x01);
 800166e:	2101      	movs	r1, #1
 8001670:	2000      	movs	r0, #0
 8001672:	f7ff fce9 	bl	8001048 <writeReg>
  writeReg(0xFF, 0x00);
 8001676:	2100      	movs	r1, #0
 8001678:	20ff      	movs	r0, #255	@ 0xff
 800167a:	f7ff fce5 	bl	8001048 <writeReg>
  writeReg(0x80, 0x00);
 800167e:	2100      	movs	r1, #0
 8001680:	2080      	movs	r0, #128	@ 0x80
 8001682:	f7ff fce1 	bl	8001048 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001686:	2104      	movs	r1, #4
 8001688:	200a      	movs	r0, #10
 800168a:	f7ff fcdd 	bl	8001048 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 800168e:	2084      	movs	r0, #132	@ 0x84
 8001690:	f7ff fd18 	bl	80010c4 <readReg>
 8001694:	4603      	mov	r3, r0
 8001696:	f023 0310 	bic.w	r3, r3, #16
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4619      	mov	r1, r3
 800169e:	2084      	movs	r0, #132	@ 0x84
 80016a0:	f7ff fcd2 	bl	8001048 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80016a4:	2101      	movs	r1, #1
 80016a6:	200b      	movs	r0, #11
 80016a8:	f7ff fcce 	bl	8001048 <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80016ac:	f000 f906 	bl	80018bc <getMeasurementTimingBudget>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a19      	ldr	r2, [pc, #100]	@ (8001718 <init+0x4a0>)
 80016b4:	6013      	str	r3, [r2, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80016b6:	21e8      	movs	r1, #232	@ 0xe8
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff fcc5 	bl	8001048 <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80016be:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <init+0x4a0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f862 	bl	800178c <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80016c8:	2101      	movs	r1, #1
 80016ca:	2001      	movs	r0, #1
 80016cc:	f7ff fcbc 	bl	8001048 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80016d0:	2040      	movs	r0, #64	@ 0x40
 80016d2:	f000 fbd5 	bl	8001e80 <performSingleRefCalibration>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f083 0301 	eor.w	r3, r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <init+0x46e>
 80016e2:	2300      	movs	r3, #0
 80016e4:	e013      	b.n	800170e <init+0x496>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80016e6:	2102      	movs	r1, #2
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff fcad 	bl	8001048 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 fbc6 	bl	8001e80 <performSingleRefCalibration>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f083 0301 	eor.w	r3, r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <init+0x48c>
 8001700:	2300      	movs	r3, #0
 8001702:	e004      	b.n	800170e <init+0x496>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001704:	21e8      	movs	r1, #232	@ 0xe8
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fc9e 	bl	8001048 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 800170c:	2301      	movs	r3, #1
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000204 	.word	0x20000204
 800171c:	00000000 	.word	0x00000000

08001720 <setSignalRateLimit>:

bool setSignalRateLimit(float limit_Mcps)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 800172a:	edd7 7a01 	vldr	s15, [r7, #4]
 800172e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d40a      	bmi.n	800174e <setSignalRateLimit+0x2e>
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7fe ff0d 	bl	8000558 <__aeabi_f2d>
 800173e:	a311      	add	r3, pc, #68	@ (adr r3, 8001784 <setSignalRateLimit+0x64>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f9f0 	bl	8000b28 <__aeabi_dcmpgt>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <setSignalRateLimit+0x32>
 800174e:	2300      	movs	r3, #0
 8001750:	e00f      	b.n	8001772 <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8001752:	edd7 7a01 	vldr	s15, [r7, #4]
 8001756:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001780 <setSignalRateLimit+0x60>
 800175a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001762:	ee17 3a90 	vmov	r3, s15
 8001766:	b29b      	uxth	r3, r3
 8001768:	4619      	mov	r1, r3
 800176a:	2044      	movs	r0, #68	@ 0x44
 800176c:	f7ff fc88 	bl	8001080 <writeReg16Bit>
  return true;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	f3af 8000 	nop.w
 8001780:	43000000 	.word	0x43000000
 8001784:	0a3d70a4 	.word	0x0a3d70a4
 8001788:	407fffd7 	.word	0x407fffd7

0800178c <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b092      	sub	sp, #72	@ 0x48
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	struct SequenceStepEnables enables;
	struct SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8001794:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 8001798:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t const EndOverhead        = 960;
 800179c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80017a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t const MsrcOverhead       = 660;
 80017a2:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80017a6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  uint16_t const TccOverhead        = 590;
 80017a8:	f240 234e 	movw	r3, #590	@ 0x24e
 80017ac:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t const DssOverhead        = 690;
 80017ae:	f240 23b2 	movw	r3, #690	@ 0x2b2
 80017b2:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint16_t const PreRangeOverhead   = 660;
 80017b4:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80017b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t const FinalRangeOverhead = 550;
 80017ba:	f240 2326 	movw	r3, #550	@ 0x226
 80017be:	86bb      	strh	r3, [r7, #52]	@ 0x34

  uint32_t const MinTimingBudget = 20000;
 80017c0:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80017c4:	633b      	str	r3, [r7, #48]	@ 0x30

  if (budget_us < MinTimingBudget) { return false; }
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d201      	bcs.n	80017d2 <setMeasurementTimingBudget+0x46>
 80017ce:	2300      	movs	r3, #0
 80017d0:	e06e      	b.n	80018b0 <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80017d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80017d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80017d8:	4413      	add	r3, r2
 80017da:	647b      	str	r3, [r7, #68]	@ 0x44

  getSequenceStepEnables(&enables);
 80017dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fa13 	bl	8001c0c <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 80017e6:	f107 020c 	add.w	r2, r7, #12
 80017ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fa54 	bl	8001c9e <getSequenceStepTimeouts>

  if (enables.tcc)
 80017f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001802:	4413      	add	r3, r2
 8001804:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001806:	4413      	add	r3, r2
 8001808:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.dss)
 800180a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800181c:	4413      	add	r3, r2
 800181e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001820:	e009      	b.n	8001836 <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 8001822:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800182e:	4413      	add	r3, r2
 8001830:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001832:	4413      	add	r3, r2
 8001834:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.pre_range)
 8001836:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001842:	4413      	add	r3, r2
 8001844:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001846:	4413      	add	r3, r2
 8001848:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.final_range)
 800184a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800184e:	2b00      	cmp	r3, #0
 8001850:	d02d      	beq.n	80018ae <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 8001852:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001854:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001856:	4413      	add	r3, r2
 8001858:	647b      	str	r3, [r7, #68]	@ 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 800185a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	429a      	cmp	r2, r3
 8001860:	d901      	bls.n	8001866 <setMeasurementTimingBudget+0xda>
    {
      // "Requested timeout too big."
      return false;
 8001862:	2300      	movs	r3, #0
 8001864:	e024      	b.n	80018b0 <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 800186e:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8001870:	b2db      	uxtb	r3, r3
 8001872:	4619      	mov	r1, r3
 8001874:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001876:	f000 fadd 	bl	8001e34 <timeoutMicrosecondsToMclks>
 800187a:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 800187c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (enables.pre_range)
 8001880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001888:	8a7a      	ldrh	r2, [r7, #18]
 800188a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800188e:	4413      	add	r3, r2
 8001890:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001894:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fa79 	bl	8001d90 <encodeTimeout>
 800189e:	4603      	mov	r3, r0
 80018a0:	4619      	mov	r1, r3
 80018a2:	2071      	movs	r0, #113	@ 0x71
 80018a4:	f7ff fbec 	bl	8001080 <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80018a8:	4a03      	ldr	r2, [pc, #12]	@ (80018b8 <setMeasurementTimingBudget+0x12c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  }
  return true;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3748      	adds	r7, #72	@ 0x48
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000204 	.word	0x20000204

080018bc <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	@ 0x30
 80018c0:	af00      	add	r7, sp, #0
	struct SequenceStepEnables enables;
	struct SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 80018c2:	f240 7376 	movw	r3, #1910	@ 0x776
 80018c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t const EndOverhead        = 960;
 80018c8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80018cc:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t const MsrcOverhead       = 660;
 80018ce:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80018d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const TccOverhead        = 590;
 80018d4:	f240 234e 	movw	r3, #590	@ 0x24e
 80018d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t const DssOverhead        = 690;
 80018da:	f240 23b2 	movw	r3, #690	@ 0x2b2
 80018de:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t const PreRangeOverhead   = 660;
 80018e0:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80018e4:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 80018e6:	f240 2326 	movw	r3, #550	@ 0x226
 80018ea:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80018ec:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80018ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80018f0:	4413      	add	r3, r2
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  getSequenceStepEnables(&enables);
 80018f4:	f107 0318 	add.w	r3, r7, #24
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f987 	bl	8001c0c <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 80018fe:	463a      	mov	r2, r7
 8001900:	f107 0318 	add.w	r3, r7, #24
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f9c9 	bl	8001c9e <getSequenceStepTimeouts>

  if (enables.tcc)
 800190c:	7e3b      	ldrb	r3, [r7, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <getMeasurementTimingBudget+0x62>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001916:	4413      	add	r3, r2
 8001918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800191a:	4413      	add	r3, r2
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.dss)
 800191e:	7ebb      	ldrb	r3, [r7, #26]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d007      	beq.n	8001934 <getMeasurementTimingBudget+0x78>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001928:	4413      	add	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800192e:	4413      	add	r3, r2
 8001930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001932:	e008      	b.n	8001946 <getMeasurementTimingBudget+0x8a>
  }
  else if (enables.msrc)
 8001934:	7e7b      	ldrb	r3, [r7, #25]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d005      	beq.n	8001946 <getMeasurementTimingBudget+0x8a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800193e:	4413      	add	r3, r2
 8001940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001942:	4413      	add	r3, r2
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.pre_range)
 8001946:	7efb      	ldrb	r3, [r7, #27]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <getMeasurementTimingBudget+0x9c>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	8c3b      	ldrh	r3, [r7, #32]
 8001950:	4413      	add	r3, r2
 8001952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001954:	4413      	add	r3, r2
 8001956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.final_range)
 8001958:	7f3b      	ldrb	r3, [r7, #28]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <getMeasurementTimingBudget+0xae>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	8bfb      	ldrh	r3, [r7, #30]
 8001962:	4413      	add	r3, r2
 8001964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001966:	4413      	add	r3, r2
 8001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 800196a:	4a04      	ldr	r2, [pc, #16]	@ (800197c <getMeasurementTimingBudget+0xc0>)
 800196c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800196e:	6013      	str	r3, [r2, #0]
  return budget_us;
 8001970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001972:	4618      	mov	r0, r3
 8001974:	3730      	adds	r7, #48	@ 0x30
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000204 	.word	0x20000204

08001980 <getVcselPulsePeriod>:


// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d108      	bne.n	80019a2 <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8001990:	2050      	movs	r0, #80	@ 0x50
 8001992:	f7ff fb97 	bl	80010c4 <readReg>
 8001996:	4603      	mov	r3, r0
 8001998:	3301      	adds	r3, #1
 800199a:	b2db      	uxtb	r3, r3
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	e00c      	b.n	80019bc <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d108      	bne.n	80019ba <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80019a8:	2070      	movs	r0, #112	@ 0x70
 80019aa:	f7ff fb8b 	bl	80010c4 <readReg>
 80019ae:	4603      	mov	r3, r0
 80019b0:	3301      	adds	r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	e000      	b.n	80019bc <getVcselPulsePeriod+0x3c>
  }
  else { return 255; }
 80019ba:	23ff      	movs	r3, #255	@ 0xff
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t readRangeContinuousMillimeters(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
  startTimeout();
 80019ca:	f7ff fb31 	bl	8001030 <millis>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <readRangeContinuousMillimeters+0x6c>)
 80019d4:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80019d6:	e015      	b.n	8001a04 <readRangeContinuousMillimeters+0x40>
  {
    if (checkTimeoutExpired())
 80019d8:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <readRangeContinuousMillimeters+0x70>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d011      	beq.n	8001a04 <readRangeContinuousMillimeters+0x40>
 80019e0:	f7ff fb26 	bl	8001030 <millis>
 80019e4:	4603      	mov	r3, r0
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <readRangeContinuousMillimeters+0x6c>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a10      	ldr	r2, [pc, #64]	@ (8001a34 <readRangeContinuousMillimeters+0x70>)
 80019f2:	8812      	ldrh	r2, [r2, #0]
 80019f4:	4293      	cmp	r3, r2
 80019f6:	dd05      	ble.n	8001a04 <readRangeContinuousMillimeters+0x40>
    {
      did_timeout = true;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <readRangeContinuousMillimeters+0x74>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
      return 65535;
 80019fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a02:	e011      	b.n	8001a28 <readRangeContinuousMillimeters+0x64>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001a04:	2013      	movs	r0, #19
 8001a06:	f7ff fb5d 	bl	80010c4 <readReg>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0e1      	beq.n	80019d8 <readRangeContinuousMillimeters+0x14>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 8001a14:	201e      	movs	r0, #30
 8001a16:	f7ff fb79 	bl	800110c <readReg16Bit>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001a1e:	2101      	movs	r1, #1
 8001a20:	200b      	movs	r0, #11
 8001a22:	f7ff fb11 	bl	8001048 <writeReg>

  return range;
 8001a26:	88fb      	ldrh	r3, [r7, #6]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000200 	.word	0x20000200
 8001a34:	200001fc 	.word	0x200001fc
 8001a38:	200001fe 	.word	0x200001fe

08001a3c <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
uint16_t readRangeSingleMillimeters(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  writeReg(0x80, 0x01);
 8001a40:	2101      	movs	r1, #1
 8001a42:	2080      	movs	r0, #128	@ 0x80
 8001a44:	f7ff fb00 	bl	8001048 <writeReg>
  writeReg(0xFF, 0x01);
 8001a48:	2101      	movs	r1, #1
 8001a4a:	20ff      	movs	r0, #255	@ 0xff
 8001a4c:	f7ff fafc 	bl	8001048 <writeReg>
  writeReg(0x00, 0x00);
 8001a50:	2100      	movs	r1, #0
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff faf8 	bl	8001048 <writeReg>
  writeReg(0x91, stop_variable);
 8001a58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <readRangeSingleMillimeters+0x9c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	2091      	movs	r0, #145	@ 0x91
 8001a60:	f7ff faf2 	bl	8001048 <writeReg>
  writeReg(0x00, 0x01);
 8001a64:	2101      	movs	r1, #1
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff faee 	bl	8001048 <writeReg>
  writeReg(0xFF, 0x00);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	20ff      	movs	r0, #255	@ 0xff
 8001a70:	f7ff faea 	bl	8001048 <writeReg>
  writeReg(0x80, 0x00);
 8001a74:	2100      	movs	r1, #0
 8001a76:	2080      	movs	r0, #128	@ 0x80
 8001a78:	f7ff fae6 	bl	8001048 <writeReg>

  writeReg(SYSRANGE_START, 0x01);
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fae2 	bl	8001048 <writeReg>

  // "Wait until start bit has been cleared"
  startTimeout();
 8001a84:	f7ff fad4 	bl	8001030 <millis>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <readRangeSingleMillimeters+0xa0>)
 8001a8e:	801a      	strh	r2, [r3, #0]
  while (readReg(SYSRANGE_START) & 0x01)
 8001a90:	e015      	b.n	8001abe <readRangeSingleMillimeters+0x82>
  {
    if (checkTimeoutExpired())
 8001a92:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <readRangeSingleMillimeters+0xa4>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d011      	beq.n	8001abe <readRangeSingleMillimeters+0x82>
 8001a9a:	f7ff fac9 	bl	8001030 <millis>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001adc <readRangeSingleMillimeters+0xa0>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae0 <readRangeSingleMillimeters+0xa4>)
 8001aac:	8812      	ldrh	r2, [r2, #0]
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	dd05      	ble.n	8001abe <readRangeSingleMillimeters+0x82>
    {
      did_timeout = true;
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <readRangeSingleMillimeters+0xa8>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
      return 65535;
 8001ab8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001abc:	e00a      	b.n	8001ad4 <readRangeSingleMillimeters+0x98>
  while (readReg(SYSRANGE_START) & 0x01)
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fb00 	bl	80010c4 <readReg>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1e1      	bne.n	8001a92 <readRangeSingleMillimeters+0x56>
    }
  }

  return readRangeContinuousMillimeters();
 8001ace:	f7ff ff79 	bl	80019c4 <readRangeContinuousMillimeters>
 8001ad2:	4603      	mov	r3, r0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000202 	.word	0x20000202
 8001adc:	20000200 	.word	0x20000200
 8001ae0:	200001fc 	.word	0x200001fc
 8001ae4:	200001fe 	.word	0x200001fe

08001ae8 <timeoutOccurred>:


// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool timeoutOccurred()
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
  bool tmp = did_timeout;
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <timeoutOccurred+0x20>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  did_timeout = false;
 8001af4:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <timeoutOccurred+0x20>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
  return tmp;
 8001afa:	79fb      	ldrb	r3, [r7, #7]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	200001fe 	.word	0x200001fe

08001b0c <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 8001b16:	2101      	movs	r1, #1
 8001b18:	2080      	movs	r0, #128	@ 0x80
 8001b1a:	f7ff fa95 	bl	8001048 <writeReg>
  writeReg(0xFF, 0x01);
 8001b1e:	2101      	movs	r1, #1
 8001b20:	20ff      	movs	r0, #255	@ 0xff
 8001b22:	f7ff fa91 	bl	8001048 <writeReg>
  writeReg(0x00, 0x00);
 8001b26:	2100      	movs	r1, #0
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff fa8d 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x06);
 8001b2e:	2106      	movs	r1, #6
 8001b30:	20ff      	movs	r0, #255	@ 0xff
 8001b32:	f7ff fa89 	bl	8001048 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 8001b36:	2083      	movs	r0, #131	@ 0x83
 8001b38:	f7ff fac4 	bl	80010c4 <readReg>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	4619      	mov	r1, r3
 8001b46:	2083      	movs	r0, #131	@ 0x83
 8001b48:	f7ff fa7e 	bl	8001048 <writeReg>
  writeReg(0xFF, 0x07);
 8001b4c:	2107      	movs	r1, #7
 8001b4e:	20ff      	movs	r0, #255	@ 0xff
 8001b50:	f7ff fa7a 	bl	8001048 <writeReg>
  writeReg(0x81, 0x01);
 8001b54:	2101      	movs	r1, #1
 8001b56:	2081      	movs	r0, #129	@ 0x81
 8001b58:	f7ff fa76 	bl	8001048 <writeReg>

  writeReg(0x80, 0x01);
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	2080      	movs	r0, #128	@ 0x80
 8001b60:	f7ff fa72 	bl	8001048 <writeReg>

  writeReg(0x94, 0x6b);
 8001b64:	216b      	movs	r1, #107	@ 0x6b
 8001b66:	2094      	movs	r0, #148	@ 0x94
 8001b68:	f7ff fa6e 	bl	8001048 <writeReg>
  writeReg(0x83, 0x00);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2083      	movs	r0, #131	@ 0x83
 8001b70:	f7ff fa6a 	bl	8001048 <writeReg>
  startTimeout();
 8001b74:	f7ff fa5c 	bl	8001030 <millis>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b22      	ldr	r3, [pc, #136]	@ (8001c08 <getSpadInfo+0xfc>)
 8001b7e:	801a      	strh	r2, [r3, #0]
//  while (readReg(0x83) == 0x00)
//  {
//    if (checkTimeoutExpired()) { return false; }
//  }
  writeReg(0x83, 0x01);
 8001b80:	2101      	movs	r1, #1
 8001b82:	2083      	movs	r0, #131	@ 0x83
 8001b84:	f7ff fa60 	bl	8001048 <writeReg>
  tmp = readReg(0x92);
 8001b88:	2092      	movs	r0, #146	@ 0x92
 8001b8a:	f7ff fa9b 	bl	80010c4 <readReg>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	09db      	lsrs	r3, r3, #7
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2081      	movs	r0, #129	@ 0x81
 8001bba:	f7ff fa45 	bl	8001048 <writeReg>
  writeReg(0xFF, 0x06);
 8001bbe:	2106      	movs	r1, #6
 8001bc0:	20ff      	movs	r0, #255	@ 0xff
 8001bc2:	f7ff fa41 	bl	8001048 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 8001bc6:	2083      	movs	r0, #131	@ 0x83
 8001bc8:	f7ff fa7c 	bl	80010c4 <readReg>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f023 0304 	bic.w	r3, r3, #4
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	2083      	movs	r0, #131	@ 0x83
 8001bd8:	f7ff fa36 	bl	8001048 <writeReg>
  writeReg(0xFF, 0x01);
 8001bdc:	2101      	movs	r1, #1
 8001bde:	20ff      	movs	r0, #255	@ 0xff
 8001be0:	f7ff fa32 	bl	8001048 <writeReg>
  writeReg(0x00, 0x01);
 8001be4:	2101      	movs	r1, #1
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff fa2e 	bl	8001048 <writeReg>

  writeReg(0xFF, 0x00);
 8001bec:	2100      	movs	r1, #0
 8001bee:	20ff      	movs	r0, #255	@ 0xff
 8001bf0:	f7ff fa2a 	bl	8001048 <writeReg>
  writeReg(0x80, 0x00);
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2080      	movs	r0, #128	@ 0x80
 8001bf8:	f7ff fa26 	bl	8001048 <writeReg>

  return true;
 8001bfc:	2301      	movs	r3, #1
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000200 	.word	0x20000200

08001c0c <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(struct SequenceStepEnables * enables)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7ff fa55 	bl	80010c4 <readReg>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf14      	ite	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	2300      	moveq	r3, #0
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	08db      	lsrs	r3, r3, #3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf14      	ite	ne
 8001c44:	2301      	movne	r3, #1
 8001c46:	2300      	moveq	r3, #0
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	099b      	lsrs	r3, r3, #6
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf14      	ite	ne
 8001c74:	2301      	movne	r3, #1
 8001c76:	2300      	moveq	r3, #0
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	09db      	lsrs	r3, r3, #7
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	711a      	strb	r2, [r3, #4]
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(struct SequenceStepEnables const * enables, struct SequenceStepTimeouts * timeouts)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff fe69 	bl	8001980 <getVcselPulsePeriod>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001cb6:	2046      	movs	r0, #70	@ 0x46
 8001cb8:	f7ff fa04 	bl	80010c4 <readReg>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f000 f886 	bl	8001de4 <timeoutMclksToMicroseconds>
 8001cd8:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001cde:	2051      	movs	r0, #81	@ 0x51
 8001ce0:	f7ff fa14 	bl	800110c <readReg16Bit>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f83e 	bl	8001d68 <decodeTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4610      	mov	r0, r2
 8001d02:	f000 f86f 	bl	8001de4 <timeoutMclksToMicroseconds>
 8001d06:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff fe37 	bl	8001980 <getVcselPulsePeriod>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001d1a:	2071      	movs	r0, #113	@ 0x71
 8001d1c:	f7ff f9f6 	bl	800110c <readReg16Bit>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f820 	bl	8001d68 <decodeTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	78db      	ldrb	r3, [r3, #3]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <getSequenceStepTimeouts+0xaa>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	891a      	ldrh	r2, [r3, #8]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	88db      	ldrh	r3, [r3, #6]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4619      	mov	r1, r3
 8001d54:	4610      	mov	r0, r2
 8001d56:	f000 f845 	bl	8001de4 <timeoutMclksToMicroseconds>
 8001d5a:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	615a      	str	r2, [r3, #20]
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001d76:	88fa      	ldrh	r2, [r7, #6]
 8001d78:	0a12      	lsrs	r2, r2, #8
 8001d7a:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001d80:	3301      	adds	r3, #1
 8001d82:	b29b      	uxth	r3, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d016      	beq.n	8001dd6 <encodeTimeout+0x46>
  {
    ls_byte = timeout_mclks - 1;
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001dae:	e005      	b.n	8001dbc <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8001db6:	897b      	ldrh	r3, [r7, #10]
 8001db8:	3301      	adds	r3, #1
 8001dba:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2bff      	cmp	r3, #255	@ 0xff
 8001dc0:	d8f6      	bhi.n	8001db0 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001dc2:	897b      	ldrh	r3, [r7, #10]
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	e000      	b.n	8001dd8 <encodeTimeout+0x48>
  }
  else { return 0; }
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <timeoutMclksToMicroseconds>:


// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	460a      	mov	r2, r1
 8001dee:	80fb      	strh	r3, [r7, #6]
 8001df0:	4613      	mov	r3, r2
 8001df2:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001df4:	797b      	ldrb	r3, [r7, #5]
 8001df6:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <timeoutMclksToMicroseconds+0x48>)
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001e00:	4a0b      	ldr	r2, [pc, #44]	@ (8001e30 <timeoutMclksToMicroseconds+0x4c>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	099b      	lsrs	r3, r3, #6
 8001e08:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	fb03 f202 	mul.w	r2, r3, r2
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	085b      	lsrs	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	4a05      	ldr	r2, [pc, #20]	@ (8001e30 <timeoutMclksToMicroseconds+0x4c>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	099b      	lsrs	r3, r3, #6
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	003a2f00 	.word	0x003a2f00
 8001e30:	10624dd3 	.word	0x10624dd3

08001e34 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <timeoutMicrosecondsToMclks+0x44>)
 8001e44:	fb02 f303 	mul.w	r3, r2, r3
 8001e48:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e7c <timeoutMicrosecondsToMclks+0x48>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	099b      	lsrs	r3, r3, #6
 8001e54:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e5c:	fb03 f202 	mul.w	r2, r3, r2
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	441a      	add	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	003a2f00 	.word	0x003a2f00
 8001e7c:	10624dd3 	.word	0x10624dd3

08001e80 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	4619      	mov	r1, r3
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff f8d7 	bl	8001048 <writeReg>

  startTimeout();
 8001e9a:	f7ff f8c9 	bl	8001030 <millis>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <performSingleRefCalibration+0x78>)
 8001ea4:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001ea6:	e011      	b.n	8001ecc <performSingleRefCalibration+0x4c>
  {
    if (checkTimeoutExpired()) { return false; }
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <performSingleRefCalibration+0x7c>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00d      	beq.n	8001ecc <performSingleRefCalibration+0x4c>
 8001eb0:	f7ff f8be 	bl	8001030 <millis>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <performSingleRefCalibration+0x78>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8001efc <performSingleRefCalibration+0x7c>)
 8001ec2:	8812      	ldrh	r2, [r2, #0]
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	dd01      	ble.n	8001ecc <performSingleRefCalibration+0x4c>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e010      	b.n	8001eee <performSingleRefCalibration+0x6e>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001ecc:	2013      	movs	r0, #19
 8001ece:	f7ff f8f9 	bl	80010c4 <readReg>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0e5      	beq.n	8001ea8 <performSingleRefCalibration+0x28>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001edc:	2101      	movs	r1, #1
 8001ede:	200b      	movs	r0, #11
 8001ee0:	f7ff f8b2 	bl	8001048 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff f8ae 	bl	8001048 <writeReg>

  return true;
 8001eec:	2301      	movs	r3, #1
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000200 	.word	0x20000200
 8001efc:	200001fc 	.word	0x200001fc

08001f00 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a07      	ldr	r2, [pc, #28]	@ (8001f2c <vApplicationGetIdleTaskMemory+0x2c>)
 8001f10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	4a06      	ldr	r2, [pc, #24]	@ (8001f30 <vApplicationGetIdleTaskMemory+0x30>)
 8001f16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2280      	movs	r2, #128	@ 0x80
 8001f1c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000208 	.word	0x20000208
 8001f30:	2000025c 	.word	0x2000025c

08001f34 <DHT20_Init>:


/* USER CODE BEGIN PFP */

/* USER CODE END PFP */
void DHT20_Init(void) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af02      	add	r7, sp, #8
    uint8_t cmd = DHT20_INIT_CMD;
 8001f3a:	2371      	movs	r3, #113	@ 0x71
 8001f3c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, DHT20_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8001f3e:	1dfa      	adds	r2, r7, #7
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2301      	movs	r3, #1
 8001f48:	2170      	movs	r1, #112	@ 0x70
 8001f4a:	4803      	ldr	r0, [pc, #12]	@ (8001f58 <DHT20_Init+0x24>)
 8001f4c:	f001 ff70 	bl	8003e30 <HAL_I2C_Master_Transmit>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200005c8 	.word	0x200005c8

08001f5c <DHT20_ReadTemperature>:

void DHT20_ReadTemperature(float *temperature, float *humidity) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	@ 0x28
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	uint8_t cmd[DHT20_CMD_LEN] = {0xAC, 0x33, 0x00};  // Command to start measurement
 8001f66:	4a28      	ldr	r2, [pc, #160]	@ (8002008 <DHT20_ReadTemperature+0xac>)
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	8019      	strh	r1, [r3, #0]
 8001f72:	3302      	adds	r3, #2
 8001f74:	0c12      	lsrs	r2, r2, #16
 8001f76:	701a      	strb	r2, [r3, #0]
	uint8_t response[DHT20_RESP_LEN];

    // Send command to read data
    HAL_I2C_Master_Transmit(&hi2c2, DHT20_ADDRESS, cmd, DHT20_CMD_LEN, HAL_MAX_DELAY);
 8001f78:	f107 0214 	add.w	r2, r7, #20
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2303      	movs	r3, #3
 8001f84:	2170      	movs	r1, #112	@ 0x70
 8001f86:	4821      	ldr	r0, [pc, #132]	@ (800200c <DHT20_ReadTemperature+0xb0>)
 8001f88:	f001 ff52 	bl	8003e30 <HAL_I2C_Master_Transmit>
    osDelay(100);
 8001f8c:	2064      	movs	r0, #100	@ 0x64
 8001f8e:	f004 ff0a 	bl	8006da6 <osDelay>
    // Receive data from sensor
    HAL_I2C_Master_Receive(&hi2c2, DHT20_ADDRESS, response, DHT20_RESP_LEN, HAL_MAX_DELAY);
 8001f92:	f107 020c 	add.w	r2, r7, #12
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	2307      	movs	r3, #7
 8001f9e:	2170      	movs	r1, #112	@ 0x70
 8001fa0:	481a      	ldr	r0, [pc, #104]	@ (800200c <DHT20_ReadTemperature+0xb0>)
 8001fa2:	f002 f843 	bl	800402c <HAL_I2C_Master_Receive>

    // Calculate temperature
    uint32_t raw_humidity = ((response[1] << 12) | (response[2] << 4) | (response[3] >> 4));
 8001fa6:	7b7b      	ldrb	r3, [r7, #13]
 8001fa8:	031a      	lsls	r2, r3, #12
 8001faa:	7bbb      	ldrb	r3, [r7, #14]
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	0912      	lsrs	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61fb      	str	r3, [r7, #28]
    uint32_t raw_temperature = ((response[3] & 0x0F) << 16) | (response[4] << 8) | response[5];
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	041b      	lsls	r3, r3, #16
 8001fbe:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001fc2:	7c3b      	ldrb	r3, [r7, #16]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	7c7a      	ldrb	r2, [r7, #17]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
    *humidity = (raw_humidity * 100) / 1048576;  // Convert to percentage
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	2264      	movs	r2, #100	@ 0x64
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	0d1b      	lsrs	r3, r3, #20
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	edc3 7a00 	vstr	s15, [r3]
    *temperature = ((raw_temperature * 200) / 1048576) - 50;  // Convert to Celsius
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	22c8      	movs	r2, #200	@ 0xc8
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	0d1b      	lsrs	r3, r3, #20
 8001ff0:	3b32      	subs	r3, #50	@ 0x32
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	edc3 7a00 	vstr	s15, [r3]


}
 8002000:	bf00      	nop
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	0800c8e8 	.word	0x0800c8e8
 800200c:	200005c8 	.word	0x200005c8

08002010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	b09c      	sub	sp, #112	@ 0x70
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002016:	f000 ff33 	bl	8002e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800201a:	f000 f889 	bl	8002130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800201e:	f000 fa69 	bl	80024f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002022:	f000 f941 	bl	80022a8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002026:	f000 f96d 	bl	8002304 <MX_I2C2_Init>
  MX_TIM1_Init();
 800202a:	f000 f999 	bl	8002360 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800202e:	f000 fa37 	bl	80024a0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002032:	f000 f8e7 	bl	8002204 <MX_ADC1_Init>
  DHT20_Init();
 8002036:	f7ff ff7d 	bl	8001f34 <DHT20_Init>
  HAL_ADC_Start(&hadc1);
 800203a:	4833      	ldr	r0, [pc, #204]	@ (8002108 <main+0xf8>)
 800203c:	f000 ffca 	bl	8002fd4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,20);
 8002040:	2114      	movs	r1, #20
 8002042:	4831      	ldr	r0, [pc, #196]	@ (8002108 <main+0xf8>)
 8002044:	f001 f87a 	bl	800313c <HAL_ADC_PollForConversion>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002048:	2100      	movs	r1, #0
 800204a:	4830      	ldr	r0, [pc, #192]	@ (800210c <main+0xfc>)
 800204c:	f003 fb3c 	bl	80056c8 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 8002050:	2064      	movs	r0, #100	@ 0x64
 8002052:	f000 ff57 	bl	8002f04 <HAL_Delay>
  if (!init(true)) {
 8002056:	2001      	movs	r0, #1
 8002058:	f7ff f90e 	bl	8001278 <init>
 800205c:	4603      	mov	r3, r0
 800205e:	f083 0301 	eor.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <main+0x5c>

            while (1);
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <main+0x58>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800206c:	4b28      	ldr	r3, [pc, #160]	@ (8002110 <main+0x100>)
 800206e:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8002072:	461d      	mov	r5, r3
 8002074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002078:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800207c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002080:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f004 fe41 	bl	8006d0e <osThreadCreate>
 800208c:	4603      	mov	r3, r0
 800208e:	4a21      	ldr	r2, [pc, #132]	@ (8002114 <main+0x104>)
 8002090:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityHigh, 0, 256);
 8002092:	4b21      	ldr	r3, [pc, #132]	@ (8002118 <main+0x108>)
 8002094:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002098:	461d      	mov	r5, r3
 800209a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800209c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800209e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80020a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f004 fe2e 	bl	8006d0e <osThreadCreate>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4a19      	ldr	r2, [pc, #100]	@ (800211c <main+0x10c>)
 80020b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityAboveNormal, 0, 256);
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <main+0x110>)
 80020ba:	f107 041c 	add.w	r4, r7, #28
 80020be:	461d      	mov	r5, r3
 80020c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fe1b 	bl	8006d0e <osThreadCreate>
 80020d8:	4603      	mov	r3, r0
 80020da:	4a12      	ldr	r2, [pc, #72]	@ (8002124 <main+0x114>)
 80020dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 80020de:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <main+0x118>)
 80020e0:	463c      	mov	r4, r7
 80020e2:	461d      	mov	r5, r3
 80020e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80020f0:	463b      	mov	r3, r7
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 fe0a 	bl	8006d0e <osThreadCreate>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <main+0x11c>)
 80020fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002100:	f004 fdfe 	bl	8006d00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <main+0xf4>
 8002108:	2000052c 	.word	0x2000052c
 800210c:	2000061c 	.word	0x2000061c
 8002110:	0800c8f8 	.word	0x0800c8f8
 8002114:	200006ac 	.word	0x200006ac
 8002118:	0800c920 	.word	0x0800c920
 800211c:	200006b0 	.word	0x200006b0
 8002120:	0800c948 	.word	0x0800c948
 8002124:	200006b4 	.word	0x200006b4
 8002128:	0800c970 	.word	0x0800c970
 800212c:	200006b8 	.word	0x200006b8

08002130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b094      	sub	sp, #80	@ 0x50
 8002134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002136:	f107 0320 	add.w	r3, r7, #32
 800213a:	2230      	movs	r2, #48	@ 0x30
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f006 ffe9 	bl	8009116 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	4b28      	ldr	r3, [pc, #160]	@ (80021fc <SystemClock_Config+0xcc>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	4a27      	ldr	r2, [pc, #156]	@ (80021fc <SystemClock_Config+0xcc>)
 800215e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002162:	6413      	str	r3, [r2, #64]	@ 0x40
 8002164:	4b25      	ldr	r3, [pc, #148]	@ (80021fc <SystemClock_Config+0xcc>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002170:	2300      	movs	r3, #0
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <SystemClock_Config+0xd0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800217c:	4a20      	ldr	r2, [pc, #128]	@ (8002200 <SystemClock_Config+0xd0>)
 800217e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <SystemClock_Config+0xd0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002190:	2302      	movs	r3, #2
 8002192:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002194:	2301      	movs	r3, #1
 8002196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002198:	2310      	movs	r3, #16
 800219a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800219c:	2302      	movs	r3, #2
 800219e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021a0:	2300      	movs	r3, #0
 80021a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021a4:	2308      	movs	r3, #8
 80021a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80021a8:	2354      	movs	r3, #84	@ 0x54
 80021aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021ac:	2302      	movs	r3, #2
 80021ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021b0:	2304      	movs	r3, #4
 80021b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021b4:	f107 0320 	add.w	r3, r7, #32
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 fcef 	bl	8004b9c <HAL_RCC_OscConfig>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021c4:	f000 fb12 	bl	80027ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c8:	230f      	movs	r3, #15
 80021ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021cc:	2302      	movs	r3, #2
 80021ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021de:	f107 030c 	add.w	r3, r7, #12
 80021e2:	2102      	movs	r1, #2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 ff51 	bl	800508c <HAL_RCC_ClockConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80021f0:	f000 fafc 	bl	80027ec <Error_Handler>
  }
}
 80021f4:	bf00      	nop
 80021f6:	3750      	adds	r7, #80	@ 0x50
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40023800 	.word	0x40023800
 8002200:	40007000 	.word	0x40007000

08002204 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800220a:	463b      	mov	r3, r7
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002216:	4b21      	ldr	r3, [pc, #132]	@ (800229c <MX_ADC1_Init+0x98>)
 8002218:	4a21      	ldr	r2, [pc, #132]	@ (80022a0 <MX_ADC1_Init+0x9c>)
 800221a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800221c:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <MX_ADC1_Init+0x98>)
 800221e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002222:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002224:	4b1d      	ldr	r3, [pc, #116]	@ (800229c <MX_ADC1_Init+0x98>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800222a:	4b1c      	ldr	r3, [pc, #112]	@ (800229c <MX_ADC1_Init+0x98>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002230:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <MX_ADC1_Init+0x98>)
 8002232:	2200      	movs	r2, #0
 8002234:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002236:	4b19      	ldr	r3, [pc, #100]	@ (800229c <MX_ADC1_Init+0x98>)
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800223e:	4b17      	ldr	r3, [pc, #92]	@ (800229c <MX_ADC1_Init+0x98>)
 8002240:	2200      	movs	r2, #0
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002244:	4b15      	ldr	r3, [pc, #84]	@ (800229c <MX_ADC1_Init+0x98>)
 8002246:	4a17      	ldr	r2, [pc, #92]	@ (80022a4 <MX_ADC1_Init+0xa0>)
 8002248:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800224a:	4b14      	ldr	r3, [pc, #80]	@ (800229c <MX_ADC1_Init+0x98>)
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002250:	4b12      	ldr	r3, [pc, #72]	@ (800229c <MX_ADC1_Init+0x98>)
 8002252:	2201      	movs	r2, #1
 8002254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002256:	4b11      	ldr	r3, [pc, #68]	@ (800229c <MX_ADC1_Init+0x98>)
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800225e:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <MX_ADC1_Init+0x98>)
 8002260:	2201      	movs	r2, #1
 8002262:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002264:	480d      	ldr	r0, [pc, #52]	@ (800229c <MX_ADC1_Init+0x98>)
 8002266:	f000 fe71 	bl	8002f4c <HAL_ADC_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002270:	f000 fabc 	bl	80027ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002274:	2300      	movs	r3, #0
 8002276:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002278:	2301      	movs	r3, #1
 800227a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800227c:	2301      	movs	r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002280:	463b      	mov	r3, r7
 8002282:	4619      	mov	r1, r3
 8002284:	4805      	ldr	r0, [pc, #20]	@ (800229c <MX_ADC1_Init+0x98>)
 8002286:	f000 fff1 	bl	800326c <HAL_ADC_ConfigChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002290:	f000 faac 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	2000052c 	.word	0x2000052c
 80022a0:	40012000 	.word	0x40012000
 80022a4:	0f000001 	.word	0x0f000001

080022a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022ac:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <MX_I2C1_Init+0x50>)
 80022ae:	4a13      	ldr	r2, [pc, #76]	@ (80022fc <MX_I2C1_Init+0x54>)
 80022b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022b2:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <MX_I2C1_Init+0x50>)
 80022b4:	4a12      	ldr	r2, [pc, #72]	@ (8002300 <MX_I2C1_Init+0x58>)
 80022b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	@ (80022f8 <MX_I2C1_Init+0x50>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <MX_I2C1_Init+0x50>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <MX_I2C1_Init+0x50>)
 80022c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022cc:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <MX_I2C1_Init+0x50>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022d2:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <MX_I2C1_Init+0x50>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d8:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <MX_I2C1_Init+0x50>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <MX_I2C1_Init+0x50>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022e4:	4804      	ldr	r0, [pc, #16]	@ (80022f8 <MX_I2C1_Init+0x50>)
 80022e6:	f001 fc5f 	bl	8003ba8 <HAL_I2C_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022f0:	f000 fa7c 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000574 	.word	0x20000574
 80022fc:	40005400 	.word	0x40005400
 8002300:	000186a0 	.word	0x000186a0

08002304 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002308:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <MX_I2C2_Init+0x50>)
 800230a:	4a13      	ldr	r2, [pc, #76]	@ (8002358 <MX_I2C2_Init+0x54>)
 800230c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800230e:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <MX_I2C2_Init+0x50>)
 8002310:	4a12      	ldr	r2, [pc, #72]	@ (800235c <MX_I2C2_Init+0x58>)
 8002312:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002314:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <MX_I2C2_Init+0x50>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <MX_I2C2_Init+0x50>)
 800231c:	2200      	movs	r2, #0
 800231e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <MX_I2C2_Init+0x50>)
 8002322:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002326:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002328:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <MX_I2C2_Init+0x50>)
 800232a:	2200      	movs	r2, #0
 800232c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <MX_I2C2_Init+0x50>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002334:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <MX_I2C2_Init+0x50>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <MX_I2C2_Init+0x50>)
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002340:	4804      	ldr	r0, [pc, #16]	@ (8002354 <MX_I2C2_Init+0x50>)
 8002342:	f001 fc31 	bl	8003ba8 <HAL_I2C_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800234c:	f000 fa4e 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200005c8 	.word	0x200005c8
 8002358:	40005800 	.word	0x40005800
 800235c:	000186a0 	.word	0x000186a0

08002360 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b096      	sub	sp, #88	@ 0x58
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002366:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002374:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800237e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	611a      	str	r2, [r3, #16]
 800238e:	615a      	str	r2, [r3, #20]
 8002390:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	2220      	movs	r2, #32
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f006 febc 	bl	8009116 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800239e:	4b3e      	ldr	r3, [pc, #248]	@ (8002498 <MX_TIM1_Init+0x138>)
 80023a0:	4a3e      	ldr	r2, [pc, #248]	@ (800249c <MX_TIM1_Init+0x13c>)
 80023a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80023a4:	4b3c      	ldr	r3, [pc, #240]	@ (8002498 <MX_TIM1_Init+0x138>)
 80023a6:	2253      	movs	r2, #83	@ 0x53
 80023a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002498 <MX_TIM1_Init+0x138>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80023b0:	4b39      	ldr	r3, [pc, #228]	@ (8002498 <MX_TIM1_Init+0x138>)
 80023b2:	2264      	movs	r2, #100	@ 0x64
 80023b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b6:	4b38      	ldr	r3, [pc, #224]	@ (8002498 <MX_TIM1_Init+0x138>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023bc:	4b36      	ldr	r3, [pc, #216]	@ (8002498 <MX_TIM1_Init+0x138>)
 80023be:	2200      	movs	r2, #0
 80023c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c2:	4b35      	ldr	r3, [pc, #212]	@ (8002498 <MX_TIM1_Init+0x138>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023c8:	4833      	ldr	r0, [pc, #204]	@ (8002498 <MX_TIM1_Init+0x138>)
 80023ca:	f003 f871 	bl	80054b0 <HAL_TIM_Base_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80023d4:	f000 fa0a 	bl	80027ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023de:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80023e2:	4619      	mov	r1, r3
 80023e4:	482c      	ldr	r0, [pc, #176]	@ (8002498 <MX_TIM1_Init+0x138>)
 80023e6:	f003 fbd1 	bl	8005b8c <HAL_TIM_ConfigClockSource>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80023f0:	f000 f9fc 	bl	80027ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023f4:	4828      	ldr	r0, [pc, #160]	@ (8002498 <MX_TIM1_Init+0x138>)
 80023f6:	f003 f90d 	bl	8005614 <HAL_TIM_PWM_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002400:	f000 f9f4 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002404:	2300      	movs	r3, #0
 8002406:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800240c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002410:	4619      	mov	r1, r3
 8002412:	4821      	ldr	r0, [pc, #132]	@ (8002498 <MX_TIM1_Init+0x138>)
 8002414:	f003 ff7c 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800241e:	f000 f9e5 	bl	80027ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002422:	2360      	movs	r3, #96	@ 0x60
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800242a:	2300      	movs	r3, #0
 800242c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800242e:	2300      	movs	r3, #0
 8002430:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800243e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002442:	2200      	movs	r2, #0
 8002444:	4619      	mov	r1, r3
 8002446:	4814      	ldr	r0, [pc, #80]	@ (8002498 <MX_TIM1_Init+0x138>)
 8002448:	f003 fade 	bl	8005a08 <HAL_TIM_PWM_ConfigChannel>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002452:	f000 f9cb 	bl	80027ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800246a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800246e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	4619      	mov	r1, r3
 8002478:	4807      	ldr	r0, [pc, #28]	@ (8002498 <MX_TIM1_Init+0x138>)
 800247a:	f003 ffb7 	bl	80063ec <HAL_TIMEx_ConfigBreakDeadTime>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002484:	f000 f9b2 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002488:	4803      	ldr	r0, [pc, #12]	@ (8002498 <MX_TIM1_Init+0x138>)
 800248a:	f000 fad3 	bl	8002a34 <HAL_TIM_MspPostInit>

}
 800248e:	bf00      	nop
 8002490:	3758      	adds	r7, #88	@ 0x58
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	2000061c 	.word	0x2000061c
 800249c:	40010000 	.word	0x40010000

080024a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024a4:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <MX_USART2_UART_Init+0x4c>)
 80024a6:	4a12      	ldr	r2, [pc, #72]	@ (80024f0 <MX_USART2_UART_Init+0x50>)
 80024a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024aa:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <MX_USART2_UART_Init+0x4c>)
 80024ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	@ (80024ec <MX_USART2_UART_Init+0x4c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <MX_USART2_UART_Init+0x4c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024be:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <MX_USART2_UART_Init+0x4c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024c4:	4b09      	ldr	r3, [pc, #36]	@ (80024ec <MX_USART2_UART_Init+0x4c>)
 80024c6:	220c      	movs	r2, #12
 80024c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ca:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <MX_USART2_UART_Init+0x4c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d0:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <MX_USART2_UART_Init+0x4c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024d6:	4805      	ldr	r0, [pc, #20]	@ (80024ec <MX_USART2_UART_Init+0x4c>)
 80024d8:	f003 ffee 	bl	80064b8 <HAL_UART_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024e2:	f000 f983 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000664 	.word	0x20000664
 80024f0:	40004400 	.word	0x40004400

080024f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	@ 0x28
 80024f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	4b32      	ldr	r3, [pc, #200]	@ (80025d8 <MX_GPIO_Init+0xe4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	4a31      	ldr	r2, [pc, #196]	@ (80025d8 <MX_GPIO_Init+0xe4>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6313      	str	r3, [r2, #48]	@ 0x30
 800251a:	4b2f      	ldr	r3, [pc, #188]	@ (80025d8 <MX_GPIO_Init+0xe4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	4b2b      	ldr	r3, [pc, #172]	@ (80025d8 <MX_GPIO_Init+0xe4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	4a2a      	ldr	r2, [pc, #168]	@ (80025d8 <MX_GPIO_Init+0xe4>)
 8002530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002534:	6313      	str	r3, [r2, #48]	@ 0x30
 8002536:	4b28      	ldr	r3, [pc, #160]	@ (80025d8 <MX_GPIO_Init+0xe4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	4b24      	ldr	r3, [pc, #144]	@ (80025d8 <MX_GPIO_Init+0xe4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	4a23      	ldr	r2, [pc, #140]	@ (80025d8 <MX_GPIO_Init+0xe4>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6313      	str	r3, [r2, #48]	@ 0x30
 8002552:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <MX_GPIO_Init+0xe4>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <MX_GPIO_Init+0xe4>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <MX_GPIO_Init+0xe4>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6313      	str	r3, [r2, #48]	@ 0x30
 800256e:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <MX_GPIO_Init+0xe4>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800257a:	2200      	movs	r2, #0
 800257c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002580:	4816      	ldr	r0, [pc, #88]	@ (80025dc <MX_GPIO_Init+0xe8>)
 8002582:	f001 faf7 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Engage_Brake_GPIO_Port, Engage_Brake_Pin, GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800258c:	4814      	ldr	r0, [pc, #80]	@ (80025e0 <MX_GPIO_Init+0xec>)
 800258e:	f001 faf1 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002592:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002598:	2301      	movs	r3, #1
 800259a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2300      	movs	r3, #0
 80025a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4619      	mov	r1, r3
 80025aa:	480c      	ldr	r0, [pc, #48]	@ (80025dc <MX_GPIO_Init+0xe8>)
 80025ac:	f001 f95e 	bl	800386c <HAL_GPIO_Init>

  /*Configure GPIO pin : Engage_Brake_Pin */
  GPIO_InitStruct.Pin = Engage_Brake_Pin;
 80025b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b6:	2301      	movs	r3, #1
 80025b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Engage_Brake_GPIO_Port, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	4805      	ldr	r0, [pc, #20]	@ (80025e0 <MX_GPIO_Init+0xec>)
 80025ca:	f001 f94f 	bl	800386c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80025ce:	bf00      	nop
 80025d0:	3728      	adds	r7, #40	@ 0x28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020800 	.word	0x40020800
 80025e0:	40020000 	.word	0x40020000

080025e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
//	    }
//	    else{
//	  	  TIM1->CCR1 = 30;
//	    }
//	    osDelay(200);
	  if (obstacle_detected) {
 80025ec:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <StartDefaultTask+0x64>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <StartDefaultTask+0x26>
	      TIM1->CCR1 = 0;
 80025f6:	4b15      	ldr	r3, [pc, #84]	@ (800264c <StartDefaultTask+0x68>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	635a      	str	r2, [r3, #52]	@ 0x34
	      HAL_GPIO_WritePin(Engage_Brake_GPIO_Port, Engage_Brake_Pin, GPIO_PIN_SET);
 80025fc:	2201      	movs	r2, #1
 80025fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002602:	4813      	ldr	r0, [pc, #76]	@ (8002650 <StartDefaultTask+0x6c>)
 8002604:	f001 fab6 	bl	8003b74 <HAL_GPIO_WritePin>
 8002608:	e7f0      	b.n	80025ec <StartDefaultTask+0x8>

	  }
	  else {
	  if (temperature > TEMP_THRESHOLD_C)
 800260a:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <StartDefaultTask+0x70>)
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002658 <StartDefaultTask+0x74>
 8002614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261c:	dd08      	ble.n	8002630 <StartDefaultTask+0x4c>
	 	     {
		    pwm_duty = (throttle_percent > MAX_SAFE_PWM_PERCENT) ? MAX_SAFE_PWM_PERCENT : throttle_percent;
 800261e:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <StartDefaultTask+0x78>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b32      	cmp	r3, #50	@ 0x32
 8002624:	bf28      	it	cs
 8002626:	2332      	movcs	r3, #50	@ 0x32
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b0d      	ldr	r3, [pc, #52]	@ (8002660 <StartDefaultTask+0x7c>)
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e003      	b.n	8002638 <StartDefaultTask+0x54>
		    }
		    else
		    {
		        pwm_duty = throttle_percent;
 8002630:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <StartDefaultTask+0x78>)
 8002632:	781a      	ldrb	r2, [r3, #0]
 8002634:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <StartDefaultTask+0x7c>)
 8002636:	701a      	strb	r2, [r3, #0]
	 	     }

	 	     TIM1->CCR1 = pwm_duty; // Apply PWM value
 8002638:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <StartDefaultTask+0x7c>)
 800263a:	781a      	ldrb	r2, [r3, #0]
 800263c:	4b03      	ldr	r3, [pc, #12]	@ (800264c <StartDefaultTask+0x68>)
 800263e:	635a      	str	r2, [r3, #52]	@ 0x34
	 	     osDelay(100);
 8002640:	2064      	movs	r0, #100	@ 0x64
 8002642:	f004 fbb0 	bl	8006da6 <osDelay>
	  if (obstacle_detected) {
 8002646:	e7d1      	b.n	80025ec <StartDefaultTask+0x8>
 8002648:	20000524 	.word	0x20000524
 800264c:	40010000 	.word	0x40010000
 8002650:	40020000 	.word	0x40020000
 8002654:	20000000 	.word	0x20000000
 8002658:	42340000 	.word	0x42340000
 800265c:	20000528 	.word	0x20000528
 8002660:	20000529 	.word	0x20000529

08002664 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	   distance = readRangeSingleMillimeters();
 800266c:	f7ff f9e6 	bl	8001a3c <readRangeSingleMillimeters>
 8002670:	4603      	mov	r3, r0
 8002672:	461a      	mov	r2, r3
 8002674:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <StartTask02+0x80>)
 8002676:	801a      	strh	r2, [r3, #0]

	  	        if (timeoutOccurred()) {
 8002678:	f7ff fa36 	bl	8001ae8 <timeoutOccurred>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d010      	beq.n	80026a4 <StartTask02+0x40>
	               	  snprintf(buf, sizeof(buf), "Timeout");
 8002682:	4a19      	ldr	r2, [pc, #100]	@ (80026e8 <StartTask02+0x84>)
 8002684:	21c8      	movs	r1, #200	@ 0xc8
 8002686:	4819      	ldr	r0, [pc, #100]	@ (80026ec <StartTask02+0x88>)
 8002688:	f006 fcaa 	bl	8008fe0 <sniprintf>
	  		      	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800268c:	4817      	ldr	r0, [pc, #92]	@ (80026ec <StartTask02+0x88>)
 800268e:	f7fd fdf7 	bl	8000280 <strlen>
 8002692:	4603      	mov	r3, r0
 8002694:	b29a      	uxth	r2, r3
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	4914      	ldr	r1, [pc, #80]	@ (80026ec <StartTask02+0x88>)
 800269c:	4814      	ldr	r0, [pc, #80]	@ (80026f0 <StartTask02+0x8c>)
 800269e:	f003 ff5b 	bl	8006558 <HAL_UART_Transmit>
 80026a2:	e011      	b.n	80026c8 <StartTask02+0x64>
	  	        } else {

	  	      	  snprintf(buf, sizeof(buf), "Distance: %d mm\r\n", distance);
 80026a4:	4b0f      	ldr	r3, [pc, #60]	@ (80026e4 <StartTask02+0x80>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	4a12      	ldr	r2, [pc, #72]	@ (80026f4 <StartTask02+0x90>)
 80026aa:	21c8      	movs	r1, #200	@ 0xc8
 80026ac:	480f      	ldr	r0, [pc, #60]	@ (80026ec <StartTask02+0x88>)
 80026ae:	f006 fc97 	bl	8008fe0 <sniprintf>
	  	      	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80026b2:	480e      	ldr	r0, [pc, #56]	@ (80026ec <StartTask02+0x88>)
 80026b4:	f7fd fde4 	bl	8000280 <strlen>
 80026b8:	4603      	mov	r3, r0
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	f04f 33ff 	mov.w	r3, #4294967295
 80026c0:	490a      	ldr	r1, [pc, #40]	@ (80026ec <StartTask02+0x88>)
 80026c2:	480b      	ldr	r0, [pc, #44]	@ (80026f0 <StartTask02+0x8c>)
 80026c4:	f003 ff48 	bl	8006558 <HAL_UART_Transmit>
	  	        }
	  	        obstacle_detected = (distance < 100);
 80026c8:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <StartTask02+0x80>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	2b63      	cmp	r3, #99	@ 0x63
 80026ce:	bf94      	ite	ls
 80026d0:	2301      	movls	r3, #1
 80026d2:	2300      	movhi	r3, #0
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <StartTask02+0x94>)
 80026d8:	701a      	strb	r2, [r3, #0]
	  	        osDelay(200);
 80026da:	20c8      	movs	r0, #200	@ 0xc8
 80026dc:	f004 fb63 	bl	8006da6 <osDelay>
	   distance = readRangeSingleMillimeters();
 80026e0:	e7c4      	b.n	800266c <StartTask02+0x8>
 80026e2:	bf00      	nop
 80026e4:	2000052a 	.word	0x2000052a
 80026e8:	0800c98c 	.word	0x0800c98c
 80026ec:	2000045c 	.word	0x2000045c
 80026f0:	20000664 	.word	0x20000664
 80026f4:	0800c994 	.word	0x0800c994
 80026f8:	20000524 	.word	0x20000524

080026fc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af04      	add	r7, sp, #16
 8002702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	      DHT20_ReadTemperature(&temperature, &humidity);
 8002704:	4912      	ldr	r1, [pc, #72]	@ (8002750 <StartTask03+0x54>)
 8002706:	4813      	ldr	r0, [pc, #76]	@ (8002754 <StartTask03+0x58>)
 8002708:	f7ff fc28 	bl	8001f5c <DHT20_ReadTemperature>

	 	  snprintf(buf, sizeof(buf), "Temperature: %.2f C, Humidity: %d%%\r\n", temperature, throttle_percent);
 800270c:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <StartTask03+0x58>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd ff21 	bl	8000558 <__aeabi_f2d>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	490f      	ldr	r1, [pc, #60]	@ (8002758 <StartTask03+0x5c>)
 800271c:	7809      	ldrb	r1, [r1, #0]
 800271e:	9102      	str	r1, [sp, #8]
 8002720:	e9cd 2300 	strd	r2, r3, [sp]
 8002724:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <StartTask03+0x60>)
 8002726:	21c8      	movs	r1, #200	@ 0xc8
 8002728:	480d      	ldr	r0, [pc, #52]	@ (8002760 <StartTask03+0x64>)
 800272a:	f006 fc59 	bl	8008fe0 <sniprintf>
	 	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800272e:	480c      	ldr	r0, [pc, #48]	@ (8002760 <StartTask03+0x64>)
 8002730:	f7fd fda6 	bl	8000280 <strlen>
 8002734:	4603      	mov	r3, r0
 8002736:	b29a      	uxth	r2, r3
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
 800273c:	4908      	ldr	r1, [pc, #32]	@ (8002760 <StartTask03+0x64>)
 800273e:	4809      	ldr	r0, [pc, #36]	@ (8002764 <StartTask03+0x68>)
 8002740:	f003 ff0a 	bl	8006558 <HAL_UART_Transmit>

	      osDelay(1000);
 8002744:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002748:	f004 fb2d 	bl	8006da6 <osDelay>
	      DHT20_ReadTemperature(&temperature, &humidity);
 800274c:	bf00      	nop
 800274e:	e7d9      	b.n	8002704 <StartTask03+0x8>
 8002750:	20000004 	.word	0x20000004
 8002754:	20000000 	.word	0x20000000
 8002758:	20000528 	.word	0x20000528
 800275c:	0800c9a8 	.word	0x0800c9a8
 8002760:	2000045c 	.word	0x2000045c
 8002764:	20000664 	.word	0x20000664

08002768 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	     HAL_ADC_Start(&hadc1);
 8002770:	4811      	ldr	r0, [pc, #68]	@ (80027b8 <StartTask04+0x50>)
 8002772:	f000 fc2f 	bl	8002fd4 <HAL_ADC_Start>
	 	 HAL_ADC_PollForConversion(&hadc1,20);
 8002776:	2114      	movs	r1, #20
 8002778:	480f      	ldr	r0, [pc, #60]	@ (80027b8 <StartTask04+0x50>)
 800277a:	f000 fcdf 	bl	800313c <HAL_ADC_PollForConversion>
	 	throttle_adc = HAL_ADC_GetValue(&hadc1);
 800277e:	480e      	ldr	r0, [pc, #56]	@ (80027b8 <StartTask04+0x50>)
 8002780:	f000 fd67 	bl	8003252 <HAL_ADC_GetValue>
 8002784:	4603      	mov	r3, r0
 8002786:	b29a      	uxth	r2, r3
 8002788:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <StartTask04+0x54>)
 800278a:	801a      	strh	r2, [r3, #0]
	 	throttle_percent = (throttle_adc * 100) / 4095;
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <StartTask04+0x54>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	2364      	movs	r3, #100	@ 0x64
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	4a09      	ldr	r2, [pc, #36]	@ (80027c0 <StartTask04+0x58>)
 800279a:	fb82 1203 	smull	r1, r2, r2, r3
 800279e:	441a      	add	r2, r3
 80027a0:	12d2      	asrs	r2, r2, #11
 80027a2:	17db      	asrs	r3, r3, #31
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <StartTask04+0x5c>)
 80027aa:	701a      	strb	r2, [r3, #0]
	     osDelay(200);
 80027ac:	20c8      	movs	r0, #200	@ 0xc8
 80027ae:	f004 fafa 	bl	8006da6 <osDelay>
	     HAL_ADC_Start(&hadc1);
 80027b2:	bf00      	nop
 80027b4:	e7dc      	b.n	8002770 <StartTask04+0x8>
 80027b6:	bf00      	nop
 80027b8:	2000052c 	.word	0x2000052c
 80027bc:	20000526 	.word	0x20000526
 80027c0:	80080081 	.word	0x80080081
 80027c4:	20000528 	.word	0x20000528

080027c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a04      	ldr	r2, [pc, #16]	@ (80027e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80027da:	f000 fb73 	bl	8002ec4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40000c00 	.word	0x40000c00

080027ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f0:	b672      	cpsid	i
}
 80027f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <Error_Handler+0x8>

080027f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	4b12      	ldr	r3, [pc, #72]	@ (800284c <HAL_MspInit+0x54>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	4a11      	ldr	r2, [pc, #68]	@ (800284c <HAL_MspInit+0x54>)
 8002808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800280c:	6453      	str	r3, [r2, #68]	@ 0x44
 800280e:	4b0f      	ldr	r3, [pc, #60]	@ (800284c <HAL_MspInit+0x54>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_MspInit+0x54>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a0a      	ldr	r2, [pc, #40]	@ (800284c <HAL_MspInit+0x54>)
 8002824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b08      	ldr	r3, [pc, #32]	@ (800284c <HAL_MspInit+0x54>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	210f      	movs	r1, #15
 800283a:	f06f 0001 	mvn.w	r0, #1
 800283e:	f000 ffeb 	bl	8003818 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800

08002850 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	@ 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a17      	ldr	r2, [pc, #92]	@ (80028cc <HAL_ADC_MspInit+0x7c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d127      	bne.n	80028c2 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <HAL_ADC_MspInit+0x80>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	4a15      	ldr	r2, [pc, #84]	@ (80028d0 <HAL_ADC_MspInit+0x80>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002880:	6453      	str	r3, [r2, #68]	@ 0x44
 8002882:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <HAL_ADC_MspInit+0x80>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b0f      	ldr	r3, [pc, #60]	@ (80028d0 <HAL_ADC_MspInit+0x80>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	4a0e      	ldr	r2, [pc, #56]	@ (80028d0 <HAL_ADC_MspInit+0x80>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6313      	str	r3, [r2, #48]	@ 0x30
 800289e:	4b0c      	ldr	r3, [pc, #48]	@ (80028d0 <HAL_ADC_MspInit+0x80>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028aa:	2301      	movs	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ae:	2303      	movs	r3, #3
 80028b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	4619      	mov	r1, r3
 80028bc:	4805      	ldr	r0, [pc, #20]	@ (80028d4 <HAL_ADC_MspInit+0x84>)
 80028be:	f000 ffd5 	bl	800386c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80028c2:	bf00      	nop
 80028c4:	3728      	adds	r7, #40	@ 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40012000 	.word	0x40012000
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020000 	.word	0x40020000

080028d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	@ 0x30
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a3a      	ldr	r2, [pc, #232]	@ (80029e0 <HAL_I2C_MspInit+0x108>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d12c      	bne.n	8002954 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	4b39      	ldr	r3, [pc, #228]	@ (80029e4 <HAL_I2C_MspInit+0x10c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	4a38      	ldr	r2, [pc, #224]	@ (80029e4 <HAL_I2C_MspInit+0x10c>)
 8002904:	f043 0302 	orr.w	r3, r3, #2
 8002908:	6313      	str	r3, [r2, #48]	@ 0x30
 800290a:	4b36      	ldr	r3, [pc, #216]	@ (80029e4 <HAL_I2C_MspInit+0x10c>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002916:	23c0      	movs	r3, #192	@ 0xc0
 8002918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800291a:	2312      	movs	r3, #18
 800291c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002926:	2304      	movs	r3, #4
 8002928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	482d      	ldr	r0, [pc, #180]	@ (80029e8 <HAL_I2C_MspInit+0x110>)
 8002932:	f000 ff9b 	bl	800386c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	4b2a      	ldr	r3, [pc, #168]	@ (80029e4 <HAL_I2C_MspInit+0x10c>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	4a29      	ldr	r2, [pc, #164]	@ (80029e4 <HAL_I2C_MspInit+0x10c>)
 8002940:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002944:	6413      	str	r3, [r2, #64]	@ 0x40
 8002946:	4b27      	ldr	r3, [pc, #156]	@ (80029e4 <HAL_I2C_MspInit+0x10c>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002952:	e041      	b.n	80029d8 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a24      	ldr	r2, [pc, #144]	@ (80029ec <HAL_I2C_MspInit+0x114>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d13c      	bne.n	80029d8 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	4b20      	ldr	r3, [pc, #128]	@ (80029e4 <HAL_I2C_MspInit+0x10c>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4a1f      	ldr	r2, [pc, #124]	@ (80029e4 <HAL_I2C_MspInit+0x10c>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <HAL_I2C_MspInit+0x10c>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800297a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800297e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002980:	2312      	movs	r3, #18
 8002982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002988:	2303      	movs	r3, #3
 800298a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800298c:	2304      	movs	r3, #4
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002990:	f107 031c 	add.w	r3, r7, #28
 8002994:	4619      	mov	r1, r3
 8002996:	4814      	ldr	r0, [pc, #80]	@ (80029e8 <HAL_I2C_MspInit+0x110>)
 8002998:	f000 ff68 	bl	800386c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800299c:	2308      	movs	r3, #8
 800299e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029a0:	2312      	movs	r3, #18
 80029a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80029ac:	2309      	movs	r3, #9
 80029ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	4619      	mov	r1, r3
 80029b6:	480c      	ldr	r0, [pc, #48]	@ (80029e8 <HAL_I2C_MspInit+0x110>)
 80029b8:	f000 ff58 	bl	800386c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <HAL_I2C_MspInit+0x10c>)
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	4a07      	ldr	r2, [pc, #28]	@ (80029e4 <HAL_I2C_MspInit+0x10c>)
 80029c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <HAL_I2C_MspInit+0x10c>)
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
}
 80029d8:	bf00      	nop
 80029da:	3730      	adds	r7, #48	@ 0x30
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40005400 	.word	0x40005400
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40020400 	.word	0x40020400
 80029ec:	40005800 	.word	0x40005800

080029f0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0b      	ldr	r2, [pc, #44]	@ (8002a2c <HAL_TIM_Base_MspInit+0x3c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10d      	bne.n	8002a1e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <HAL_TIM_Base_MspInit+0x40>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0a:	4a09      	ldr	r2, [pc, #36]	@ (8002a30 <HAL_TIM_Base_MspInit+0x40>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a12:	4b07      	ldr	r3, [pc, #28]	@ (8002a30 <HAL_TIM_Base_MspInit+0x40>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	40023800 	.word	0x40023800

08002a34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <HAL_TIM_MspPostInit+0x68>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d11e      	bne.n	8002a94 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_TIM_MspPostInit+0x6c>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	4a10      	ldr	r2, [pc, #64]	@ (8002aa0 <HAL_TIM_MspPostInit+0x6c>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a66:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <HAL_TIM_MspPostInit+0x6c>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a84:	2301      	movs	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4805      	ldr	r0, [pc, #20]	@ (8002aa4 <HAL_TIM_MspPostInit+0x70>)
 8002a90:	f000 feec 	bl	800386c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a94:	bf00      	nop
 8002a96:	3720      	adds	r7, #32
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020000 	.word	0x40020000

08002aa8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	@ 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a19      	ldr	r2, [pc, #100]	@ (8002b2c <HAL_UART_MspInit+0x84>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d12b      	bne.n	8002b22 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	4b18      	ldr	r3, [pc, #96]	@ (8002b30 <HAL_UART_MspInit+0x88>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	4a17      	ldr	r2, [pc, #92]	@ (8002b30 <HAL_UART_MspInit+0x88>)
 8002ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ada:	4b15      	ldr	r3, [pc, #84]	@ (8002b30 <HAL_UART_MspInit+0x88>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <HAL_UART_MspInit+0x88>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	4a10      	ldr	r2, [pc, #64]	@ (8002b30 <HAL_UART_MspInit+0x88>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <HAL_UART_MspInit+0x88>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b02:	230c      	movs	r3, #12
 8002b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b12:	2307      	movs	r3, #7
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b16:	f107 0314 	add.w	r3, r7, #20
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4805      	ldr	r0, [pc, #20]	@ (8002b34 <HAL_UART_MspInit+0x8c>)
 8002b1e:	f000 fea5 	bl	800386c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002b22:	bf00      	nop
 8002b24:	3728      	adds	r7, #40	@ 0x28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40004400 	.word	0x40004400
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020000 	.word	0x40020000

08002b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08e      	sub	sp, #56	@ 0x38
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	4b33      	ldr	r3, [pc, #204]	@ (8002c1c <HAL_InitTick+0xe4>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	4a32      	ldr	r2, [pc, #200]	@ (8002c1c <HAL_InitTick+0xe4>)
 8002b52:	f043 0308 	orr.w	r3, r3, #8
 8002b56:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b58:	4b30      	ldr	r3, [pc, #192]	@ (8002c1c <HAL_InitTick+0xe4>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b64:	f107 0210 	add.w	r2, r7, #16
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fc6c 	bl	800544c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b7e:	f002 fc3d 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8002b82:	6378      	str	r0, [r7, #52]	@ 0x34
 8002b84:	e004      	b.n	8002b90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b86:	f002 fc39 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b92:	4a23      	ldr	r2, [pc, #140]	@ (8002c20 <HAL_InitTick+0xe8>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	0c9b      	lsrs	r3, r3, #18
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002b9e:	4b21      	ldr	r3, [pc, #132]	@ (8002c24 <HAL_InitTick+0xec>)
 8002ba0:	4a21      	ldr	r2, [pc, #132]	@ (8002c28 <HAL_InitTick+0xf0>)
 8002ba2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c24 <HAL_InitTick+0xec>)
 8002ba6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002baa:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002bac:	4a1d      	ldr	r2, [pc, #116]	@ (8002c24 <HAL_InitTick+0xec>)
 8002bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c24 <HAL_InitTick+0xec>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c24 <HAL_InitTick+0xec>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbe:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <HAL_InitTick+0xec>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002bc4:	4817      	ldr	r0, [pc, #92]	@ (8002c24 <HAL_InitTick+0xec>)
 8002bc6:	f002 fc73 	bl	80054b0 <HAL_TIM_Base_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d11b      	bne.n	8002c10 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002bd8:	4812      	ldr	r0, [pc, #72]	@ (8002c24 <HAL_InitTick+0xec>)
 8002bda:	f002 fcb9 	bl	8005550 <HAL_TIM_Base_Start_IT>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002be4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d111      	bne.n	8002c10 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002bec:	2032      	movs	r0, #50	@ 0x32
 8002bee:	f000 fe2f 	bl	8003850 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d808      	bhi.n	8002c0a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	2032      	movs	r0, #50	@ 0x32
 8002bfe:	f000 fe0b 	bl	8003818 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c02:	4a0a      	ldr	r2, [pc, #40]	@ (8002c2c <HAL_InitTick+0xf4>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	e002      	b.n	8002c10 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3738      	adds	r7, #56	@ 0x38
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	431bde83 	.word	0x431bde83
 8002c24:	200006bc 	.word	0x200006bc
 8002c28:	40000c00 	.word	0x40000c00
 8002c2c:	2000000c 	.word	0x2000000c

08002c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <NMI_Handler+0x4>

08002c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <HardFault_Handler+0x4>

08002c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <MemManage_Handler+0x4>

08002c48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c4c:	bf00      	nop
 8002c4e:	e7fd      	b.n	8002c4c <BusFault_Handler+0x4>

08002c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c54:	bf00      	nop
 8002c56:	e7fd      	b.n	8002c54 <UsageFault_Handler+0x4>

08002c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002c6c:	4802      	ldr	r0, [pc, #8]	@ (8002c78 <TIM5_IRQHandler+0x10>)
 8002c6e:	f002 fddb 	bl	8005828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200006bc 	.word	0x200006bc

08002c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return 1;
 8002c80:	2301      	movs	r3, #1
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <_kill>:

int _kill(int pid, int sig)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c96:	f006 fa91 	bl	80091bc <__errno>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2216      	movs	r2, #22
 8002c9e:	601a      	str	r2, [r3, #0]
  return -1;
 8002ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_exit>:

void _exit (int status)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ffe7 	bl	8002c8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cbe:	bf00      	nop
 8002cc0:	e7fd      	b.n	8002cbe <_exit+0x12>

08002cc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e00a      	b.n	8002cea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cd4:	f3af 8000 	nop.w
 8002cd8:	4601      	mov	r1, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	60ba      	str	r2, [r7, #8]
 8002ce0:	b2ca      	uxtb	r2, r1
 8002ce2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	dbf0      	blt.n	8002cd4 <_read+0x12>
  }

  return len;
 8002cf2:	687b      	ldr	r3, [r7, #4]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e009      	b.n	8002d22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	60ba      	str	r2, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	dbf1      	blt.n	8002d0e <_write+0x12>
  }
  return len;
 8002d2a:	687b      	ldr	r3, [r7, #4]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_close>:

int _close(int file)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d5c:	605a      	str	r2, [r3, #4]
  return 0;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <_isatty>:

int _isatty(int file)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d74:	2301      	movs	r3, #1
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da4:	4a14      	ldr	r2, [pc, #80]	@ (8002df8 <_sbrk+0x5c>)
 8002da6:	4b15      	ldr	r3, [pc, #84]	@ (8002dfc <_sbrk+0x60>)
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002db0:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db8:	4b11      	ldr	r3, [pc, #68]	@ (8002e00 <_sbrk+0x64>)
 8002dba:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <_sbrk+0x68>)
 8002dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dbe:	4b10      	ldr	r3, [pc, #64]	@ (8002e00 <_sbrk+0x64>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d207      	bcs.n	8002ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dcc:	f006 f9f6 	bl	80091bc <__errno>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	e009      	b.n	8002df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ddc:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <_sbrk+0x64>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002de2:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <_sbrk+0x64>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	4a05      	ldr	r2, [pc, #20]	@ (8002e00 <_sbrk+0x64>)
 8002dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20010000 	.word	0x20010000
 8002dfc:	00000400 	.word	0x00000400
 8002e00:	20000704 	.word	0x20000704
 8002e04:	200045b0 	.word	0x200045b0

08002e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e0c:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <SystemInit+0x20>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e12:	4a05      	ldr	r2, [pc, #20]	@ (8002e28 <SystemInit+0x20>)
 8002e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
ldr   sp, =_estack      /* set stack pointer */
 8002e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e30:	f7ff ffea 	bl	8002e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e34:	480c      	ldr	r0, [pc, #48]	@ (8002e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e36:	490d      	ldr	r1, [pc, #52]	@ (8002e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e38:	4a0d      	ldr	r2, [pc, #52]	@ (8002e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e3c:	e002      	b.n	8002e44 <LoopCopyDataInit>

08002e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e42:	3304      	adds	r3, #4

08002e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e48:	d3f9      	bcc.n	8002e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e50:	e001      	b.n	8002e56 <LoopFillZerobss>

08002e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e54:	3204      	adds	r2, #4

08002e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e58:	d3fb      	bcc.n	8002e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e5a:	f006 f9b5 	bl	80091c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e5e:	f7ff f8d7 	bl	8002010 <main>
  bx  lr    
 8002e62:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8002e64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e6c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002e70:	0800ce2c 	.word	0x0800ce2c
  ldr r2, =_sbss
 8002e74:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002e78:	200045ac 	.word	0x200045ac

08002e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e7c:	e7fe      	b.n	8002e7c <ADC_IRQHandler>
	...

08002e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e84:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <HAL_Init+0x40>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec0 <HAL_Init+0x40>)
 8002e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_Init+0x40>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec0 <HAL_Init+0x40>)
 8002e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e9c:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <HAL_Init+0x40>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a07      	ldr	r2, [pc, #28]	@ (8002ec0 <HAL_Init+0x40>)
 8002ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea8:	2003      	movs	r0, #3
 8002eaa:	f000 fcaa 	bl	8003802 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eae:	200f      	movs	r0, #15
 8002eb0:	f7ff fe42 	bl	8002b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb4:	f7ff fca0 	bl	80027f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023c00 	.word	0x40023c00

08002ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ec8:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <HAL_IncTick+0x20>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <HAL_IncTick+0x24>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	4a04      	ldr	r2, [pc, #16]	@ (8002ee8 <HAL_IncTick+0x24>)
 8002ed6:	6013      	str	r3, [r2, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000010 	.word	0x20000010
 8002ee8:	20000708 	.word	0x20000708

08002eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef0:	4b03      	ldr	r3, [pc, #12]	@ (8002f00 <HAL_GetTick+0x14>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	20000708 	.word	0x20000708

08002f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f0c:	f7ff ffee 	bl	8002eec <HAL_GetTick>
 8002f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d005      	beq.n	8002f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <HAL_Delay+0x44>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4413      	add	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f2a:	bf00      	nop
 8002f2c:	f7ff ffde 	bl	8002eec <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d8f7      	bhi.n	8002f2c <HAL_Delay+0x28>
  {
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000010 	.word	0x20000010

08002f4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e033      	b.n	8002fca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fc70 	bl	8002850 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d118      	bne.n	8002fbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f92:	f023 0302 	bic.w	r3, r3, #2
 8002f96:	f043 0202 	orr.w	r2, r3, #2
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fa86 	bl	80034b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fae:	f023 0303 	bic.w	r3, r3, #3
 8002fb2:	f043 0201 	orr.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fba:	e001      	b.n	8002fc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_Start+0x1a>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e097      	b.n	800311e <HAL_ADC_Start+0x14a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d018      	beq.n	8003036 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003014:	4b45      	ldr	r3, [pc, #276]	@ (800312c <HAL_ADC_Start+0x158>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a45      	ldr	r2, [pc, #276]	@ (8003130 <HAL_ADC_Start+0x15c>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	0c9a      	lsrs	r2, r3, #18
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003028:	e002      	b.n	8003030 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3b01      	subs	r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f9      	bne.n	800302a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d15f      	bne.n	8003104 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800306e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800307e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003082:	d106      	bne.n	8003092 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003088:	f023 0206 	bic.w	r2, r3, #6
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003090:	e002      	b.n	8003098 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030a0:	4b24      	ldr	r3, [pc, #144]	@ (8003134 <HAL_ADC_Start+0x160>)
 80030a2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80030ac:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d129      	bne.n	800311c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	e020      	b.n	800311c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a16      	ldr	r2, [pc, #88]	@ (8003138 <HAL_ADC_Start+0x164>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d11b      	bne.n	800311c <HAL_ADC_Start+0x148>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d114      	bne.n	800311c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	e00b      	b.n	800311c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	f043 0210 	orr.w	r2, r3, #16
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003114:	f043 0201 	orr.w	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000008 	.word	0x20000008
 8003130:	431bde83 	.word	0x431bde83
 8003134:	40012300 	.word	0x40012300
 8003138:	40012000 	.word	0x40012000

0800313c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003158:	d113      	bne.n	8003182 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003168:	d10b      	bne.n	8003182 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e063      	b.n	800324a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003182:	f7ff feb3 	bl	8002eec <HAL_GetTick>
 8003186:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003188:	e021      	b.n	80031ce <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d01d      	beq.n	80031ce <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <HAL_ADC_PollForConversion+0x6c>
 8003198:	f7ff fea8 	bl	8002eec <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d212      	bcs.n	80031ce <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d00b      	beq.n	80031ce <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	f043 0204 	orr.w	r2, r3, #4
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e03d      	b.n	800324a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d1d6      	bne.n	800318a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0212 	mvn.w	r2, #18
 80031e4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d123      	bne.n	8003248 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003204:	2b00      	cmp	r3, #0
 8003206:	d11f      	bne.n	8003248 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003220:	2b00      	cmp	r3, #0
 8003222:	d111      	bne.n	8003248 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d105      	bne.n	8003248 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	f043 0201 	orr.w	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x1c>
 8003284:	2302      	movs	r3, #2
 8003286:	e105      	b.n	8003494 <HAL_ADC_ConfigChannel+0x228>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b09      	cmp	r3, #9
 8003296:	d925      	bls.n	80032e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68d9      	ldr	r1, [r3, #12]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	3b1e      	subs	r3, #30
 80032ae:	2207      	movs	r2, #7
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43da      	mvns	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	400a      	ands	r2, r1
 80032bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68d9      	ldr	r1, [r3, #12]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	4618      	mov	r0, r3
 80032d0:	4603      	mov	r3, r0
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4403      	add	r3, r0
 80032d6:	3b1e      	subs	r3, #30
 80032d8:	409a      	lsls	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	e022      	b.n	800332a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6919      	ldr	r1, [r3, #16]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	2207      	movs	r2, #7
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	400a      	ands	r2, r1
 8003306:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6919      	ldr	r1, [r3, #16]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	4618      	mov	r0, r3
 800331a:	4603      	mov	r3, r0
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4403      	add	r3, r0
 8003320:	409a      	lsls	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b06      	cmp	r3, #6
 8003330:	d824      	bhi.n	800337c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	3b05      	subs	r3, #5
 8003344:	221f      	movs	r2, #31
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	400a      	ands	r2, r1
 8003352:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	b29b      	uxth	r3, r3
 8003360:	4618      	mov	r0, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	3b05      	subs	r3, #5
 800336e:	fa00 f203 	lsl.w	r2, r0, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	635a      	str	r2, [r3, #52]	@ 0x34
 800337a:	e04c      	b.n	8003416 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b0c      	cmp	r3, #12
 8003382:	d824      	bhi.n	80033ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	3b23      	subs	r3, #35	@ 0x23
 8003396:	221f      	movs	r2, #31
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43da      	mvns	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	400a      	ands	r2, r1
 80033a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	4618      	mov	r0, r3
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	3b23      	subs	r3, #35	@ 0x23
 80033c0:	fa00 f203 	lsl.w	r2, r0, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80033cc:	e023      	b.n	8003416 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	3b41      	subs	r3, #65	@ 0x41
 80033e0:	221f      	movs	r2, #31
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43da      	mvns	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	400a      	ands	r2, r1
 80033ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4618      	mov	r0, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	3b41      	subs	r3, #65	@ 0x41
 800340a:	fa00 f203 	lsl.w	r2, r0, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003416:	4b22      	ldr	r3, [pc, #136]	@ (80034a0 <HAL_ADC_ConfigChannel+0x234>)
 8003418:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a21      	ldr	r2, [pc, #132]	@ (80034a4 <HAL_ADC_ConfigChannel+0x238>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d109      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x1cc>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b12      	cmp	r3, #18
 800342a:	d105      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a19      	ldr	r2, [pc, #100]	@ (80034a4 <HAL_ADC_ConfigChannel+0x238>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d123      	bne.n	800348a <HAL_ADC_ConfigChannel+0x21e>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b10      	cmp	r3, #16
 8003448:	d003      	beq.n	8003452 <HAL_ADC_ConfigChannel+0x1e6>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b11      	cmp	r3, #17
 8003450:	d11b      	bne.n	800348a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b10      	cmp	r3, #16
 8003464:	d111      	bne.n	800348a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003466:	4b10      	ldr	r3, [pc, #64]	@ (80034a8 <HAL_ADC_ConfigChannel+0x23c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a10      	ldr	r2, [pc, #64]	@ (80034ac <HAL_ADC_ConfigChannel+0x240>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	0c9a      	lsrs	r2, r3, #18
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800347c:	e002      	b.n	8003484 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	3b01      	subs	r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f9      	bne.n	800347e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	40012300 	.word	0x40012300
 80034a4:	40012000 	.word	0x40012000
 80034a8:	20000008 	.word	0x20000008
 80034ac:	431bde83 	.word	0x431bde83

080034b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034b8:	4b79      	ldr	r3, [pc, #484]	@ (80036a0 <ADC_Init+0x1f0>)
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	021a      	lsls	r2, r3, #8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800352a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6899      	ldr	r1, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003542:	4a58      	ldr	r2, [pc, #352]	@ (80036a4 <ADC_Init+0x1f4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d022      	beq.n	800358e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003556:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6899      	ldr	r1, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	e00f      	b.n	80035ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800359c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0202 	bic.w	r2, r2, #2
 80035bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6899      	ldr	r1, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7e1b      	ldrb	r3, [r3, #24]
 80035c8:	005a      	lsls	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80035fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	3b01      	subs	r3, #1
 8003608:	035a      	lsls	r2, r3, #13
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	e007      	b.n	8003624 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003622:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003632:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	3b01      	subs	r3, #1
 8003640:	051a      	lsls	r2, r3, #20
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6899      	ldr	r1, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003666:	025a      	lsls	r2, r3, #9
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800367e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6899      	ldr	r1, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	029a      	lsls	r2, r3, #10
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	609a      	str	r2, [r3, #8]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40012300 	.word	0x40012300
 80036a4:	0f000001 	.word	0x0f000001

080036a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b8:	4b0c      	ldr	r3, [pc, #48]	@ (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036c4:	4013      	ands	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036da:	4a04      	ldr	r2, [pc, #16]	@ (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	60d3      	str	r3, [r2, #12]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f4:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <__NVIC_GetPriorityGrouping+0x18>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f003 0307 	and.w	r3, r3, #7
}
 80036fe:	4618      	mov	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	2b00      	cmp	r3, #0
 800371c:	db0b      	blt.n	8003736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	f003 021f 	and.w	r2, r3, #31
 8003724:	4907      	ldr	r1, [pc, #28]	@ (8003744 <__NVIC_EnableIRQ+0x38>)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	2001      	movs	r0, #1
 800372e:	fa00 f202 	lsl.w	r2, r0, r2
 8003732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	e000e100 	.word	0xe000e100

08003748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	6039      	str	r1, [r7, #0]
 8003752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003758:	2b00      	cmp	r3, #0
 800375a:	db0a      	blt.n	8003772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	490c      	ldr	r1, [pc, #48]	@ (8003794 <__NVIC_SetPriority+0x4c>)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	0112      	lsls	r2, r2, #4
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	440b      	add	r3, r1
 800376c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003770:	e00a      	b.n	8003788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4908      	ldr	r1, [pc, #32]	@ (8003798 <__NVIC_SetPriority+0x50>)
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	3b04      	subs	r3, #4
 8003780:	0112      	lsls	r2, r2, #4
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	440b      	add	r3, r1
 8003786:	761a      	strb	r2, [r3, #24]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000e100 	.word	0xe000e100
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800379c:	b480      	push	{r7}
 800379e:	b089      	sub	sp, #36	@ 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f1c3 0307 	rsb	r3, r3, #7
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	bf28      	it	cs
 80037ba:	2304      	movcs	r3, #4
 80037bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3304      	adds	r3, #4
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d902      	bls.n	80037cc <NVIC_EncodePriority+0x30>
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3b03      	subs	r3, #3
 80037ca:	e000      	b.n	80037ce <NVIC_EncodePriority+0x32>
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d0:	f04f 32ff 	mov.w	r2, #4294967295
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43da      	mvns	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	401a      	ands	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037e4:	f04f 31ff 	mov.w	r1, #4294967295
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	43d9      	mvns	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f4:	4313      	orrs	r3, r2
         );
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3724      	adds	r7, #36	@ 0x24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ff4c 	bl	80036a8 <__NVIC_SetPriorityGrouping>
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800382a:	f7ff ff61 	bl	80036f0 <__NVIC_GetPriorityGrouping>
 800382e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	6978      	ldr	r0, [r7, #20]
 8003836:	f7ff ffb1 	bl	800379c <NVIC_EncodePriority>
 800383a:	4602      	mov	r2, r0
 800383c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff ff80 	bl	8003748 <__NVIC_SetPriority>
}
 8003848:	bf00      	nop
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff ff54 	bl	800370c <__NVIC_EnableIRQ>
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800386c:	b480      	push	{r7}
 800386e:	b089      	sub	sp, #36	@ 0x24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	e159      	b.n	8003b3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003888:	2201      	movs	r2, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4013      	ands	r3, r2
 800389a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	f040 8148 	bne.w	8003b36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d005      	beq.n	80038be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d130      	bne.n	8003920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	2203      	movs	r2, #3
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f4:	2201      	movs	r2, #1
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 0201 	and.w	r2, r3, #1
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b03      	cmp	r3, #3
 800392a:	d017      	beq.n	800395c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2203      	movs	r2, #3
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d123      	bne.n	80039b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	08da      	lsrs	r2, r3, #3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3208      	adds	r2, #8
 8003970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	220f      	movs	r2, #15
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	69b9      	ldr	r1, [r7, #24]
 80039ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	2203      	movs	r2, #3
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0203 	and.w	r2, r3, #3
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80a2 	beq.w	8003b36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	4b57      	ldr	r3, [pc, #348]	@ (8003b54 <HAL_GPIO_Init+0x2e8>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	4a56      	ldr	r2, [pc, #344]	@ (8003b54 <HAL_GPIO_Init+0x2e8>)
 80039fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a02:	4b54      	ldr	r3, [pc, #336]	@ (8003b54 <HAL_GPIO_Init+0x2e8>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a0e:	4a52      	ldr	r2, [pc, #328]	@ (8003b58 <HAL_GPIO_Init+0x2ec>)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	3302      	adds	r3, #2
 8003a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	220f      	movs	r2, #15
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a49      	ldr	r2, [pc, #292]	@ (8003b5c <HAL_GPIO_Init+0x2f0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d019      	beq.n	8003a6e <HAL_GPIO_Init+0x202>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a48      	ldr	r2, [pc, #288]	@ (8003b60 <HAL_GPIO_Init+0x2f4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <HAL_GPIO_Init+0x1fe>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a47      	ldr	r2, [pc, #284]	@ (8003b64 <HAL_GPIO_Init+0x2f8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00d      	beq.n	8003a66 <HAL_GPIO_Init+0x1fa>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a46      	ldr	r2, [pc, #280]	@ (8003b68 <HAL_GPIO_Init+0x2fc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <HAL_GPIO_Init+0x1f6>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a45      	ldr	r2, [pc, #276]	@ (8003b6c <HAL_GPIO_Init+0x300>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <HAL_GPIO_Init+0x1f2>
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	e008      	b.n	8003a70 <HAL_GPIO_Init+0x204>
 8003a5e:	2307      	movs	r3, #7
 8003a60:	e006      	b.n	8003a70 <HAL_GPIO_Init+0x204>
 8003a62:	2303      	movs	r3, #3
 8003a64:	e004      	b.n	8003a70 <HAL_GPIO_Init+0x204>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e002      	b.n	8003a70 <HAL_GPIO_Init+0x204>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_GPIO_Init+0x204>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	69fa      	ldr	r2, [r7, #28]
 8003a72:	f002 0203 	and.w	r2, r2, #3
 8003a76:	0092      	lsls	r2, r2, #2
 8003a78:	4093      	lsls	r3, r2
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a80:	4935      	ldr	r1, [pc, #212]	@ (8003b58 <HAL_GPIO_Init+0x2ec>)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	089b      	lsrs	r3, r3, #2
 8003a86:	3302      	adds	r3, #2
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a8e:	4b38      	ldr	r3, [pc, #224]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ab2:	4a2f      	ldr	r2, [pc, #188]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003adc:	4a24      	ldr	r2, [pc, #144]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ae2:	4b23      	ldr	r3, [pc, #140]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b06:	4a1a      	ldr	r2, [pc, #104]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b0c:	4b18      	ldr	r3, [pc, #96]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b30:	4a0f      	ldr	r2, [pc, #60]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b0f      	cmp	r3, #15
 8003b40:	f67f aea2 	bls.w	8003888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
 8003b48:	3724      	adds	r7, #36	@ 0x24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40013800 	.word	0x40013800
 8003b5c:	40020000 	.word	0x40020000
 8003b60:	40020400 	.word	0x40020400
 8003b64:	40020800 	.word	0x40020800
 8003b68:	40020c00 	.word	0x40020c00
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40013c00 	.word	0x40013c00

08003b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	807b      	strh	r3, [r7, #2]
 8003b80:	4613      	mov	r3, r2
 8003b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b84:	787b      	ldrb	r3, [r7, #1]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b8a:	887a      	ldrh	r2, [r7, #2]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b90:	e003      	b.n	8003b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b92:	887b      	ldrh	r3, [r7, #2]
 8003b94:	041a      	lsls	r2, r3, #16
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	619a      	str	r2, [r3, #24]
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e12b      	b.n	8003e12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fe fe82 	bl	80028d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	@ 0x24
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c0c:	f001 fbf6 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8003c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4a81      	ldr	r2, [pc, #516]	@ (8003e1c <HAL_I2C_Init+0x274>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d807      	bhi.n	8003c2c <HAL_I2C_Init+0x84>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a80      	ldr	r2, [pc, #512]	@ (8003e20 <HAL_I2C_Init+0x278>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	bf94      	ite	ls
 8003c24:	2301      	movls	r3, #1
 8003c26:	2300      	movhi	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	e006      	b.n	8003c3a <HAL_I2C_Init+0x92>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a7d      	ldr	r2, [pc, #500]	@ (8003e24 <HAL_I2C_Init+0x27c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	bf94      	ite	ls
 8003c34:	2301      	movls	r3, #1
 8003c36:	2300      	movhi	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0e7      	b.n	8003e12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a78      	ldr	r2, [pc, #480]	@ (8003e28 <HAL_I2C_Init+0x280>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0c9b      	lsrs	r3, r3, #18
 8003c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a6a      	ldr	r2, [pc, #424]	@ (8003e1c <HAL_I2C_Init+0x274>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d802      	bhi.n	8003c7c <HAL_I2C_Init+0xd4>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	e009      	b.n	8003c90 <HAL_I2C_Init+0xe8>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	4a69      	ldr	r2, [pc, #420]	@ (8003e2c <HAL_I2C_Init+0x284>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	3301      	adds	r3, #1
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ca2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	495c      	ldr	r1, [pc, #368]	@ (8003e1c <HAL_I2C_Init+0x274>)
 8003cac:	428b      	cmp	r3, r1
 8003cae:	d819      	bhi.n	8003ce4 <HAL_I2C_Init+0x13c>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e59      	subs	r1, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cbe:	1c59      	adds	r1, r3, #1
 8003cc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cc4:	400b      	ands	r3, r1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_I2C_Init+0x138>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1e59      	subs	r1, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cde:	e051      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	e04f      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d111      	bne.n	8003d10 <HAL_I2C_Init+0x168>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1e58      	subs	r0, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	440b      	add	r3, r1
 8003cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e012      	b.n	8003d36 <HAL_I2C_Init+0x18e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1e58      	subs	r0, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	0099      	lsls	r1, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d26:	3301      	adds	r3, #1
 8003d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Init+0x196>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e022      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <HAL_I2C_Init+0x1bc>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1e58      	subs	r0, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	440b      	add	r3, r1
 8003d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d62:	e00f      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1e58      	subs	r0, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	0099      	lsls	r1, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	6809      	ldr	r1, [r1, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003db2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6911      	ldr	r1, [r2, #16]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	000186a0 	.word	0x000186a0
 8003e20:	001e847f 	.word	0x001e847f
 8003e24:	003d08ff 	.word	0x003d08ff
 8003e28:	431bde83 	.word	0x431bde83
 8003e2c:	10624dd3 	.word	0x10624dd3

08003e30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	817b      	strh	r3, [r7, #10]
 8003e40:	4613      	mov	r3, r2
 8003e42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e44:	f7ff f852 	bl	8002eec <HAL_GetTick>
 8003e48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	f040 80e0 	bne.w	8004018 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2319      	movs	r3, #25
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4970      	ldr	r1, [pc, #448]	@ (8004024 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fc64 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e0d3      	b.n	800401a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_I2C_Master_Transmit+0x50>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e0cc      	b.n	800401a <HAL_I2C_Master_Transmit+0x1ea>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d007      	beq.n	8003ea6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2221      	movs	r2, #33	@ 0x21
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	893a      	ldrh	r2, [r7, #8]
 8003ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4a50      	ldr	r2, [pc, #320]	@ (8004028 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ee8:	8979      	ldrh	r1, [r7, #10]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	6a3a      	ldr	r2, [r7, #32]
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 face 	bl	8004490 <I2C_MasterRequestWrite>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e08d      	b.n	800401a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f14:	e066      	b.n	8003fe4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	6a39      	ldr	r1, [r7, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fd22 	bl	8004964 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d107      	bne.n	8003f3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e06b      	b.n	800401a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	781a      	ldrb	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_I2C_Master_Transmit+0x188>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d017      	beq.n	8003fb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	781a      	ldrb	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	6a39      	ldr	r1, [r7, #32]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fd19 	bl	80049f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00d      	beq.n	8003fe4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d107      	bne.n	8003fe0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e01a      	b.n	800401a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d194      	bne.n	8003f16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e000      	b.n	800401a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004018:	2302      	movs	r3, #2
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	00100002 	.word	0x00100002
 8004028:	ffff0000 	.word	0xffff0000

0800402c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08c      	sub	sp, #48	@ 0x30
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	607a      	str	r2, [r7, #4]
 8004036:	461a      	mov	r2, r3
 8004038:	460b      	mov	r3, r1
 800403a:	817b      	strh	r3, [r7, #10]
 800403c:	4613      	mov	r3, r2
 800403e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004040:	f7fe ff54 	bl	8002eec <HAL_GetTick>
 8004044:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b20      	cmp	r3, #32
 8004050:	f040 8217 	bne.w	8004482 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2319      	movs	r3, #25
 800405a:	2201      	movs	r2, #1
 800405c:	497c      	ldr	r1, [pc, #496]	@ (8004250 <HAL_I2C_Master_Receive+0x224>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fb66 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
 800406c:	e20a      	b.n	8004484 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_I2C_Master_Receive+0x50>
 8004078:	2302      	movs	r3, #2
 800407a:	e203      	b.n	8004484 <HAL_I2C_Master_Receive+0x458>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b01      	cmp	r3, #1
 8004090:	d007      	beq.n	80040a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2222      	movs	r2, #34	@ 0x22
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2210      	movs	r2, #16
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	893a      	ldrh	r2, [r7, #8]
 80040d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4a5c      	ldr	r2, [pc, #368]	@ (8004254 <HAL_I2C_Master_Receive+0x228>)
 80040e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040e4:	8979      	ldrh	r1, [r7, #10]
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fa52 	bl	8004594 <I2C_MasterRequestRead>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e1c4      	b.n	8004484 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d113      	bne.n	800412a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004102:	2300      	movs	r3, #0
 8004104:	623b      	str	r3, [r7, #32]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	623b      	str	r3, [r7, #32]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	623b      	str	r3, [r7, #32]
 8004116:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e198      	b.n	800445c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412e:	2b01      	cmp	r3, #1
 8004130:	d11b      	bne.n	800416a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004140:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e178      	b.n	800445c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416e:	2b02      	cmp	r3, #2
 8004170:	d11b      	bne.n	80041aa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004180:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004190:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	e158      	b.n	800445c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041d0:	e144      	b.n	800445c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	f200 80f1 	bhi.w	80043be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d123      	bne.n	800422c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fc4b 	bl	8004a84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e145      	b.n	8004484 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800422a:	e117      	b.n	800445c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004230:	2b02      	cmp	r3, #2
 8004232:	d14e      	bne.n	80042d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423a:	2200      	movs	r2, #0
 800423c:	4906      	ldr	r1, [pc, #24]	@ (8004258 <HAL_I2C_Master_Receive+0x22c>)
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fa76 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e11a      	b.n	8004484 <HAL_I2C_Master_Receive+0x458>
 800424e:	bf00      	nop
 8004250:	00100002 	.word	0x00100002
 8004254:	ffff0000 	.word	0xffff0000
 8004258:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800426a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042d0:	e0c4      	b.n	800445c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	2200      	movs	r2, #0
 80042da:	496c      	ldr	r1, [pc, #432]	@ (800448c <HAL_I2C_Master_Receive+0x460>)
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 fa27 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0cb      	b.n	8004484 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	2200      	movs	r2, #0
 8004336:	4955      	ldr	r1, [pc, #340]	@ (800448c <HAL_I2C_Master_Receive+0x460>)
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f9f9 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e09d      	b.n	8004484 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043bc:	e04e      	b.n	800445c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fb5e 	bl	8004a84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e058      	b.n	8004484 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b04      	cmp	r3, #4
 8004410:	d124      	bne.n	800445c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004416:	2b03      	cmp	r3, #3
 8004418:	d107      	bne.n	800442a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004428:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004460:	2b00      	cmp	r3, #0
 8004462:	f47f aeb6 	bne.w	80041d2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e000      	b.n	8004484 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004482:	2302      	movs	r3, #2
  }
}
 8004484:	4618      	mov	r0, r3
 8004486:	3728      	adds	r7, #40	@ 0x28
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	00010004 	.word	0x00010004

08004490 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	607a      	str	r2, [r7, #4]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	460b      	mov	r3, r1
 800449e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d006      	beq.n	80044ba <I2C_MasterRequestWrite+0x2a>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d003      	beq.n	80044ba <I2C_MasterRequestWrite+0x2a>
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044b8:	d108      	bne.n	80044cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e00b      	b.n	80044e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d0:	2b12      	cmp	r3, #18
 80044d2:	d107      	bne.n	80044e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f91d 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00d      	beq.n	8004518 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800450a:	d103      	bne.n	8004514 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004512:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e035      	b.n	8004584 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004520:	d108      	bne.n	8004534 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004522:	897b      	ldrh	r3, [r7, #10]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004530:	611a      	str	r2, [r3, #16]
 8004532:	e01b      	b.n	800456c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004534:	897b      	ldrh	r3, [r7, #10]
 8004536:	11db      	asrs	r3, r3, #7
 8004538:	b2db      	uxtb	r3, r3
 800453a:	f003 0306 	and.w	r3, r3, #6
 800453e:	b2db      	uxtb	r3, r3
 8004540:	f063 030f 	orn	r3, r3, #15
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	490e      	ldr	r1, [pc, #56]	@ (800458c <I2C_MasterRequestWrite+0xfc>)
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f966 	bl	8004824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e010      	b.n	8004584 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004562:	897b      	ldrh	r3, [r7, #10]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	4907      	ldr	r1, [pc, #28]	@ (8004590 <I2C_MasterRequestWrite+0x100>)
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f956 	bl	8004824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	00010008 	.word	0x00010008
 8004590:	00010002 	.word	0x00010002

08004594 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	460b      	mov	r3, r1
 80045a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d006      	beq.n	80045ce <I2C_MasterRequestRead+0x3a>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d003      	beq.n	80045ce <I2C_MasterRequestRead+0x3a>
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045cc:	d108      	bne.n	80045e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e00b      	b.n	80045f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	2b11      	cmp	r3, #17
 80045e6:	d107      	bne.n	80045f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f893 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00d      	beq.n	800462c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800461e:	d103      	bne.n	8004628 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004626:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e079      	b.n	8004720 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004634:	d108      	bne.n	8004648 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004636:	897b      	ldrh	r3, [r7, #10]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	b2da      	uxtb	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	611a      	str	r2, [r3, #16]
 8004646:	e05f      	b.n	8004708 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004648:	897b      	ldrh	r3, [r7, #10]
 800464a:	11db      	asrs	r3, r3, #7
 800464c:	b2db      	uxtb	r3, r3
 800464e:	f003 0306 	and.w	r3, r3, #6
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f063 030f 	orn	r3, r3, #15
 8004658:	b2da      	uxtb	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4930      	ldr	r1, [pc, #192]	@ (8004728 <I2C_MasterRequestRead+0x194>)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f8dc 	bl	8004824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e054      	b.n	8004720 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004676:	897b      	ldrh	r3, [r7, #10]
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4929      	ldr	r1, [pc, #164]	@ (800472c <I2C_MasterRequestRead+0x198>)
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f8cc 	bl	8004824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e044      	b.n	8004720 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	613b      	str	r3, [r7, #16]
 80046aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 f831 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00d      	beq.n	80046f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046e2:	d103      	bne.n	80046ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046ea:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e017      	b.n	8004720 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80046f0:	897b      	ldrh	r3, [r7, #10]
 80046f2:	11db      	asrs	r3, r3, #7
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	f003 0306 	and.w	r3, r3, #6
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f063 030e 	orn	r3, r3, #14
 8004700:	b2da      	uxtb	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	4907      	ldr	r1, [pc, #28]	@ (800472c <I2C_MasterRequestRead+0x198>)
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f888 	bl	8004824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	00010008 	.word	0x00010008
 800472c:	00010002 	.word	0x00010002

08004730 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	4613      	mov	r3, r2
 800473e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004740:	e048      	b.n	80047d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d044      	beq.n	80047d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474a:	f7fe fbcf 	bl	8002eec <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <I2C_WaitOnFlagUntilTimeout+0x30>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d139      	bne.n	80047d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	0c1b      	lsrs	r3, r3, #16
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b01      	cmp	r3, #1
 8004768:	d10d      	bne.n	8004786 <I2C_WaitOnFlagUntilTimeout+0x56>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	43da      	mvns	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	4013      	ands	r3, r2
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	bf0c      	ite	eq
 800477c:	2301      	moveq	r3, #1
 800477e:	2300      	movne	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	e00c      	b.n	80047a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	43da      	mvns	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d116      	bne.n	80047d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e023      	b.n	800481c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	0c1b      	lsrs	r3, r3, #16
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d10d      	bne.n	80047fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	43da      	mvns	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	4013      	ands	r3, r2
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	e00c      	b.n	8004814 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	43da      	mvns	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4013      	ands	r3, r2
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	429a      	cmp	r2, r3
 8004818:	d093      	beq.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004832:	e071      	b.n	8004918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004842:	d123      	bne.n	800488c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004852:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800485c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	f043 0204 	orr.w	r2, r3, #4
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e067      	b.n	800495c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004892:	d041      	beq.n	8004918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004894:	f7fe fb2a 	bl	8002eec <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d136      	bne.n	8004918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	0c1b      	lsrs	r3, r3, #16
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d10c      	bne.n	80048ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	43da      	mvns	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4013      	ands	r3, r2
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	bf14      	ite	ne
 80048c6:	2301      	movne	r3, #1
 80048c8:	2300      	moveq	r3, #0
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	e00b      	b.n	80048e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	43da      	mvns	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4013      	ands	r3, r2
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf14      	ite	ne
 80048e0:	2301      	movne	r3, #1
 80048e2:	2300      	moveq	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d016      	beq.n	8004918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004904:	f043 0220 	orr.w	r2, r3, #32
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e021      	b.n	800495c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	0c1b      	lsrs	r3, r3, #16
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b01      	cmp	r3, #1
 8004920:	d10c      	bne.n	800493c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	43da      	mvns	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4013      	ands	r3, r2
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e00b      	b.n	8004954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	43da      	mvns	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4013      	ands	r3, r2
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	bf14      	ite	ne
 800494e:	2301      	movne	r3, #1
 8004950:	2300      	moveq	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	f47f af6d 	bne.w	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004970:	e034      	b.n	80049dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f8e3 	bl	8004b3e <I2C_IsAcknowledgeFailed>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e034      	b.n	80049ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004988:	d028      	beq.n	80049dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498a:	f7fe faaf 	bl	8002eec <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	429a      	cmp	r2, r3
 8004998:	d302      	bcc.n	80049a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d11d      	bne.n	80049dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049aa:	2b80      	cmp	r3, #128	@ 0x80
 80049ac:	d016      	beq.n	80049dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c8:	f043 0220 	orr.w	r2, r3, #32
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e007      	b.n	80049ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e6:	2b80      	cmp	r3, #128	@ 0x80
 80049e8:	d1c3      	bne.n	8004972 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a00:	e034      	b.n	8004a6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f89b 	bl	8004b3e <I2C_IsAcknowledgeFailed>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e034      	b.n	8004a7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d028      	beq.n	8004a6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7fe fa67 	bl	8002eec <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d11d      	bne.n	8004a6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d016      	beq.n	8004a6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e007      	b.n	8004a7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d1c3      	bne.n	8004a02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a90:	e049      	b.n	8004b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d119      	bne.n	8004ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0210 	mvn.w	r2, #16
 8004aa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e030      	b.n	8004b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad4:	f7fe fa0a 	bl	8002eec <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d302      	bcc.n	8004aea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d11d      	bne.n	8004b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af4:	2b40      	cmp	r3, #64	@ 0x40
 8004af6:	d016      	beq.n	8004b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	f043 0220 	orr.w	r2, r3, #32
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e007      	b.n	8004b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b30:	2b40      	cmp	r3, #64	@ 0x40
 8004b32:	d1ae      	bne.n	8004a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b54:	d11b      	bne.n	8004b8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	f043 0204 	orr.w	r2, r3, #4
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e267      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d075      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bba:	4b88      	ldr	r3, [pc, #544]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d00c      	beq.n	8004be0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc6:	4b85      	ldr	r3, [pc, #532]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d112      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd2:	4b82      	ldr	r3, [pc, #520]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bde:	d10b      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be0:	4b7e      	ldr	r3, [pc, #504]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d05b      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x108>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d157      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e242      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c00:	d106      	bne.n	8004c10 <HAL_RCC_OscConfig+0x74>
 8004c02:	4b76      	ldr	r3, [pc, #472]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a75      	ldr	r2, [pc, #468]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e01d      	b.n	8004c4c <HAL_RCC_OscConfig+0xb0>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c18:	d10c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x98>
 8004c1a:	4b70      	ldr	r3, [pc, #448]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a6f      	ldr	r2, [pc, #444]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	4b6d      	ldr	r3, [pc, #436]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a6c      	ldr	r2, [pc, #432]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e00b      	b.n	8004c4c <HAL_RCC_OscConfig+0xb0>
 8004c34:	4b69      	ldr	r3, [pc, #420]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a68      	ldr	r2, [pc, #416]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	4b66      	ldr	r3, [pc, #408]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a65      	ldr	r2, [pc, #404]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d013      	beq.n	8004c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c54:	f7fe f94a 	bl	8002eec <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c5c:	f7fe f946 	bl	8002eec <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b64      	cmp	r3, #100	@ 0x64
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e207      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0xc0>
 8004c7a:	e014      	b.n	8004ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7c:	f7fe f936 	bl	8002eec <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c84:	f7fe f932 	bl	8002eec <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b64      	cmp	r3, #100	@ 0x64
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e1f3      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c96:	4b51      	ldr	r3, [pc, #324]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0xe8>
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d063      	beq.n	8004d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00b      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cbe:	4b47      	ldr	r3, [pc, #284]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d11c      	bne.n	8004d04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cca:	4b44      	ldr	r3, [pc, #272]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d116      	bne.n	8004d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd6:	4b41      	ldr	r3, [pc, #260]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_RCC_OscConfig+0x152>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d001      	beq.n	8004cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e1c7      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cee:	4b3b      	ldr	r3, [pc, #236]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4937      	ldr	r1, [pc, #220]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d02:	e03a      	b.n	8004d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d020      	beq.n	8004d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d0c:	4b34      	ldr	r3, [pc, #208]	@ (8004de0 <HAL_RCC_OscConfig+0x244>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d12:	f7fe f8eb 	bl	8002eec <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d1a:	f7fe f8e7 	bl	8002eec <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e1a8      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d38:	4b28      	ldr	r3, [pc, #160]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	4925      	ldr	r1, [pc, #148]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	600b      	str	r3, [r1, #0]
 8004d4c:	e015      	b.n	8004d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d4e:	4b24      	ldr	r3, [pc, #144]	@ (8004de0 <HAL_RCC_OscConfig+0x244>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fe f8ca 	bl	8002eec <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d5c:	f7fe f8c6 	bl	8002eec <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e187      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d036      	beq.n	8004df4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d016      	beq.n	8004dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d8e:	4b15      	ldr	r3, [pc, #84]	@ (8004de4 <HAL_RCC_OscConfig+0x248>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d94:	f7fe f8aa 	bl	8002eec <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9c:	f7fe f8a6 	bl	8002eec <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e167      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dae:	4b0b      	ldr	r3, [pc, #44]	@ (8004ddc <HAL_RCC_OscConfig+0x240>)
 8004db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0x200>
 8004dba:	e01b      	b.n	8004df4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dbc:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <HAL_RCC_OscConfig+0x248>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc2:	f7fe f893 	bl	8002eec <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc8:	e00e      	b.n	8004de8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dca:	f7fe f88f 	bl	8002eec <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d907      	bls.n	8004de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e150      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	42470000 	.word	0x42470000
 8004de4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de8:	4b88      	ldr	r3, [pc, #544]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1ea      	bne.n	8004dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8097 	beq.w	8004f30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e02:	2300      	movs	r3, #0
 8004e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e06:	4b81      	ldr	r3, [pc, #516]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10f      	bne.n	8004e32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e12:	2300      	movs	r3, #0
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	4b7d      	ldr	r3, [pc, #500]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	4a7c      	ldr	r2, [pc, #496]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e22:	4b7a      	ldr	r3, [pc, #488]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e32:	4b77      	ldr	r3, [pc, #476]	@ (8005010 <HAL_RCC_OscConfig+0x474>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d118      	bne.n	8004e70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e3e:	4b74      	ldr	r3, [pc, #464]	@ (8005010 <HAL_RCC_OscConfig+0x474>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a73      	ldr	r2, [pc, #460]	@ (8005010 <HAL_RCC_OscConfig+0x474>)
 8004e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4a:	f7fe f84f 	bl	8002eec <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e52:	f7fe f84b 	bl	8002eec <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e10c      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e64:	4b6a      	ldr	r3, [pc, #424]	@ (8005010 <HAL_RCC_OscConfig+0x474>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0f0      	beq.n	8004e52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d106      	bne.n	8004e86 <HAL_RCC_OscConfig+0x2ea>
 8004e78:	4b64      	ldr	r3, [pc, #400]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7c:	4a63      	ldr	r2, [pc, #396]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004e7e:	f043 0301 	orr.w	r3, r3, #1
 8004e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e84:	e01c      	b.n	8004ec0 <HAL_RCC_OscConfig+0x324>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x30c>
 8004e8e:	4b5f      	ldr	r3, [pc, #380]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e92:	4a5e      	ldr	r2, [pc, #376]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004e94:	f043 0304 	orr.w	r3, r3, #4
 8004e98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e9a:	4b5c      	ldr	r3, [pc, #368]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea6:	e00b      	b.n	8004ec0 <HAL_RCC_OscConfig+0x324>
 8004ea8:	4b58      	ldr	r3, [pc, #352]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eac:	4a57      	ldr	r2, [pc, #348]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004eae:	f023 0301 	bic.w	r3, r3, #1
 8004eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eb4:	4b55      	ldr	r3, [pc, #340]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb8:	4a54      	ldr	r2, [pc, #336]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004eba:	f023 0304 	bic.w	r3, r3, #4
 8004ebe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d015      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fe f810 	bl	8002eec <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed0:	f7fe f80c 	bl	8002eec <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e0cb      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee6:	4b49      	ldr	r3, [pc, #292]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0ee      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x334>
 8004ef2:	e014      	b.n	8004f1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef4:	f7fd fffa 	bl	8002eec <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efa:	e00a      	b.n	8004f12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efc:	f7fd fff6 	bl	8002eec <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e0b5      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f12:	4b3e      	ldr	r3, [pc, #248]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1ee      	bne.n	8004efc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d105      	bne.n	8004f30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f24:	4b39      	ldr	r3, [pc, #228]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f28:	4a38      	ldr	r2, [pc, #224]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80a1 	beq.w	800507c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f3a:	4b34      	ldr	r3, [pc, #208]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d05c      	beq.n	8005000 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d141      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4b31      	ldr	r3, [pc, #196]	@ (8005014 <HAL_RCC_OscConfig+0x478>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fd ffca 	bl	8002eec <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f5c:	f7fd ffc6 	bl	8002eec <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e087      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6e:	4b27      	ldr	r3, [pc, #156]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69da      	ldr	r2, [r3, #28]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f88:	019b      	lsls	r3, r3, #6
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	3b01      	subs	r3, #1
 8004f94:	041b      	lsls	r3, r3, #16
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9c:	061b      	lsls	r3, r3, #24
 8004f9e:	491b      	ldr	r1, [pc, #108]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8005014 <HAL_RCC_OscConfig+0x478>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004faa:	f7fd ff9f 	bl	8002eec <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb2:	f7fd ff9b 	bl	8002eec <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e05c      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc4:	4b11      	ldr	r3, [pc, #68]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0f0      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x416>
 8004fd0:	e054      	b.n	800507c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd2:	4b10      	ldr	r3, [pc, #64]	@ (8005014 <HAL_RCC_OscConfig+0x478>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd8:	f7fd ff88 	bl	8002eec <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7fd ff84 	bl	8002eec <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e045      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff2:	4b06      	ldr	r3, [pc, #24]	@ (800500c <HAL_RCC_OscConfig+0x470>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x444>
 8004ffe:	e03d      	b.n	800507c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d107      	bne.n	8005018 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e038      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
 800500c:	40023800 	.word	0x40023800
 8005010:	40007000 	.word	0x40007000
 8005014:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005018:	4b1b      	ldr	r3, [pc, #108]	@ (8005088 <HAL_RCC_OscConfig+0x4ec>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d028      	beq.n	8005078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005030:	429a      	cmp	r2, r3
 8005032:	d121      	bne.n	8005078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503e:	429a      	cmp	r2, r3
 8005040:	d11a      	bne.n	8005078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005048:	4013      	ands	r3, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800504e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005050:	4293      	cmp	r3, r2
 8005052:	d111      	bne.n	8005078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	3b01      	subs	r3, #1
 8005062:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d107      	bne.n	8005078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40023800 	.word	0x40023800

0800508c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0cc      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050a0:	4b68      	ldr	r3, [pc, #416]	@ (8005244 <HAL_RCC_ClockConfig+0x1b8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d90c      	bls.n	80050c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ae:	4b65      	ldr	r3, [pc, #404]	@ (8005244 <HAL_RCC_ClockConfig+0x1b8>)
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b6:	4b63      	ldr	r3, [pc, #396]	@ (8005244 <HAL_RCC_ClockConfig+0x1b8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0b8      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d020      	beq.n	8005116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e0:	4b59      	ldr	r3, [pc, #356]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4a58      	ldr	r2, [pc, #352]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050f8:	4b53      	ldr	r3, [pc, #332]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	4a52      	ldr	r2, [pc, #328]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005104:	4b50      	ldr	r3, [pc, #320]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	494d      	ldr	r1, [pc, #308]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	4313      	orrs	r3, r2
 8005114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d044      	beq.n	80051ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d107      	bne.n	800513a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512a:	4b47      	ldr	r3, [pc, #284]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d119      	bne.n	800516a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e07f      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d003      	beq.n	800514a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005146:	2b03      	cmp	r3, #3
 8005148:	d107      	bne.n	800515a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514a:	4b3f      	ldr	r3, [pc, #252]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d109      	bne.n	800516a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e06f      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515a:	4b3b      	ldr	r3, [pc, #236]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e067      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800516a:	4b37      	ldr	r3, [pc, #220]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f023 0203 	bic.w	r2, r3, #3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	4934      	ldr	r1, [pc, #208]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 8005178:	4313      	orrs	r3, r2
 800517a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800517c:	f7fd feb6 	bl	8002eec <HAL_GetTick>
 8005180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005182:	e00a      	b.n	800519a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005184:	f7fd feb2 	bl	8002eec <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e04f      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519a:	4b2b      	ldr	r3, [pc, #172]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 020c 	and.w	r2, r3, #12
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d1eb      	bne.n	8005184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051ac:	4b25      	ldr	r3, [pc, #148]	@ (8005244 <HAL_RCC_ClockConfig+0x1b8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d20c      	bcs.n	80051d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ba:	4b22      	ldr	r3, [pc, #136]	@ (8005244 <HAL_RCC_ClockConfig+0x1b8>)
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b20      	ldr	r3, [pc, #128]	@ (8005244 <HAL_RCC_ClockConfig+0x1b8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e032      	b.n	800523a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e0:	4b19      	ldr	r3, [pc, #100]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4916      	ldr	r1, [pc, #88]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051fe:	4b12      	ldr	r3, [pc, #72]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	490e      	ldr	r1, [pc, #56]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	4313      	orrs	r3, r2
 8005210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005212:	f000 f821 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8005216:	4602      	mov	r2, r0
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <HAL_RCC_ClockConfig+0x1bc>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	490a      	ldr	r1, [pc, #40]	@ (800524c <HAL_RCC_ClockConfig+0x1c0>)
 8005224:	5ccb      	ldrb	r3, [r1, r3]
 8005226:	fa22 f303 	lsr.w	r3, r2, r3
 800522a:	4a09      	ldr	r2, [pc, #36]	@ (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 800522c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800522e:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <HAL_RCC_ClockConfig+0x1c8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7fd fc80 	bl	8002b38 <HAL_InitTick>

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40023c00 	.word	0x40023c00
 8005248:	40023800 	.word	0x40023800
 800524c:	0800c9d8 	.word	0x0800c9d8
 8005250:	20000008 	.word	0x20000008
 8005254:	2000000c 	.word	0x2000000c

08005258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800525c:	b090      	sub	sp, #64	@ 0x40
 800525e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005270:	4b59      	ldr	r3, [pc, #356]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 030c 	and.w	r3, r3, #12
 8005278:	2b08      	cmp	r3, #8
 800527a:	d00d      	beq.n	8005298 <HAL_RCC_GetSysClockFreq+0x40>
 800527c:	2b08      	cmp	r3, #8
 800527e:	f200 80a1 	bhi.w	80053c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x34>
 8005286:	2b04      	cmp	r3, #4
 8005288:	d003      	beq.n	8005292 <HAL_RCC_GetSysClockFreq+0x3a>
 800528a:	e09b      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800528c:	4b53      	ldr	r3, [pc, #332]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x184>)
 800528e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005290:	e09b      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005292:	4b53      	ldr	r3, [pc, #332]	@ (80053e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005294:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005296:	e098      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005298:	4b4f      	ldr	r3, [pc, #316]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052a2:	4b4d      	ldr	r3, [pc, #308]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d028      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ae:	4b4a      	ldr	r3, [pc, #296]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	099b      	lsrs	r3, r3, #6
 80052b4:	2200      	movs	r2, #0
 80052b6:	623b      	str	r3, [r7, #32]
 80052b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80052c0:	2100      	movs	r1, #0
 80052c2:	4b47      	ldr	r3, [pc, #284]	@ (80053e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80052c4:	fb03 f201 	mul.w	r2, r3, r1
 80052c8:	2300      	movs	r3, #0
 80052ca:	fb00 f303 	mul.w	r3, r0, r3
 80052ce:	4413      	add	r3, r2
 80052d0:	4a43      	ldr	r2, [pc, #268]	@ (80053e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80052d2:	fba0 1202 	umull	r1, r2, r0, r2
 80052d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052d8:	460a      	mov	r2, r1
 80052da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80052dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052de:	4413      	add	r3, r2
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e4:	2200      	movs	r2, #0
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	61fa      	str	r2, [r7, #28]
 80052ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80052f2:	f7fb fcd1 	bl	8000c98 <__aeabi_uldivmod>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4613      	mov	r3, r2
 80052fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052fe:	e053      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005300:	4b35      	ldr	r3, [pc, #212]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	099b      	lsrs	r3, r3, #6
 8005306:	2200      	movs	r2, #0
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	617a      	str	r2, [r7, #20]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005312:	f04f 0b00 	mov.w	fp, #0
 8005316:	4652      	mov	r2, sl
 8005318:	465b      	mov	r3, fp
 800531a:	f04f 0000 	mov.w	r0, #0
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	0159      	lsls	r1, r3, #5
 8005324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005328:	0150      	lsls	r0, r2, #5
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	ebb2 080a 	subs.w	r8, r2, sl
 8005332:	eb63 090b 	sbc.w	r9, r3, fp
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005342:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005346:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800534a:	ebb2 0408 	subs.w	r4, r2, r8
 800534e:	eb63 0509 	sbc.w	r5, r3, r9
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	00eb      	lsls	r3, r5, #3
 800535c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005360:	00e2      	lsls	r2, r4, #3
 8005362:	4614      	mov	r4, r2
 8005364:	461d      	mov	r5, r3
 8005366:	eb14 030a 	adds.w	r3, r4, sl
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	eb45 030b 	adc.w	r3, r5, fp
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800537e:	4629      	mov	r1, r5
 8005380:	028b      	lsls	r3, r1, #10
 8005382:	4621      	mov	r1, r4
 8005384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005388:	4621      	mov	r1, r4
 800538a:	028a      	lsls	r2, r1, #10
 800538c:	4610      	mov	r0, r2
 800538e:	4619      	mov	r1, r3
 8005390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005392:	2200      	movs	r2, #0
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	60fa      	str	r2, [r7, #12]
 8005398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800539c:	f7fb fc7c 	bl	8000c98 <__aeabi_uldivmod>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4613      	mov	r3, r2
 80053a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053a8:	4b0b      	ldr	r3, [pc, #44]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	0c1b      	lsrs	r3, r3, #16
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	3301      	adds	r3, #1
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80053b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80053ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053c2:	e002      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053c4:	4b05      	ldr	r3, [pc, #20]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x184>)
 80053c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3740      	adds	r7, #64	@ 0x40
 80053d0:	46bd      	mov	sp, r7
 80053d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800
 80053dc:	00f42400 	.word	0x00f42400
 80053e0:	017d7840 	.word	0x017d7840

080053e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e8:	4b03      	ldr	r3, [pc, #12]	@ (80053f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053ea:	681b      	ldr	r3, [r3, #0]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000008 	.word	0x20000008

080053fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005400:	f7ff fff0 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b05      	ldr	r3, [pc, #20]	@ (800541c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	0a9b      	lsrs	r3, r3, #10
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	4903      	ldr	r1, [pc, #12]	@ (8005420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40023800 	.word	0x40023800
 8005420:	0800c9e8 	.word	0x0800c9e8

08005424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005428:	f7ff ffdc 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 800542c:	4602      	mov	r2, r0
 800542e:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	0b5b      	lsrs	r3, r3, #13
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	4903      	ldr	r1, [pc, #12]	@ (8005448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800543a:	5ccb      	ldrb	r3, [r1, r3]
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40023800 	.word	0x40023800
 8005448:	0800c9e8 	.word	0x0800c9e8

0800544c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	220f      	movs	r2, #15
 800545a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800545c:	4b12      	ldr	r3, [pc, #72]	@ (80054a8 <HAL_RCC_GetClockConfig+0x5c>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0203 	and.w	r2, r3, #3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005468:	4b0f      	ldr	r3, [pc, #60]	@ (80054a8 <HAL_RCC_GetClockConfig+0x5c>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005474:	4b0c      	ldr	r3, [pc, #48]	@ (80054a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005480:	4b09      	ldr	r3, [pc, #36]	@ (80054a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	08db      	lsrs	r3, r3, #3
 8005486:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800548e:	4b07      	ldr	r3, [pc, #28]	@ (80054ac <HAL_RCC_GetClockConfig+0x60>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0207 	and.w	r2, r3, #7
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	601a      	str	r2, [r3, #0]
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40023800 	.word	0x40023800
 80054ac:	40023c00 	.word	0x40023c00

080054b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e041      	b.n	8005546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fd fa8a 	bl	80029f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	4619      	mov	r1, r3
 80054ee:	4610      	mov	r0, r2
 80054f0:	f000 fc3c 	bl	8005d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	d001      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e044      	b.n	80055f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1e      	ldr	r2, [pc, #120]	@ (8005600 <HAL_TIM_Base_Start_IT+0xb0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d018      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x6c>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005592:	d013      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x6c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1a      	ldr	r2, [pc, #104]	@ (8005604 <HAL_TIM_Base_Start_IT+0xb4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00e      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x6c>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a19      	ldr	r2, [pc, #100]	@ (8005608 <HAL_TIM_Base_Start_IT+0xb8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d009      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x6c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a17      	ldr	r2, [pc, #92]	@ (800560c <HAL_TIM_Base_Start_IT+0xbc>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x6c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a16      	ldr	r2, [pc, #88]	@ (8005610 <HAL_TIM_Base_Start_IT+0xc0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d111      	bne.n	80055e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b06      	cmp	r3, #6
 80055cc:	d010      	beq.n	80055f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0201 	orr.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	e007      	b.n	80055f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40010000 	.word	0x40010000
 8005604:	40000400 	.word	0x40000400
 8005608:	40000800 	.word	0x40000800
 800560c:	40000c00 	.word	0x40000c00
 8005610:	40014000 	.word	0x40014000

08005614 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e041      	b.n	80056aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f839 	bl	80056b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
 8005650:	4619      	mov	r1, r3
 8005652:	4610      	mov	r0, r2
 8005654:	f000 fb8a 	bl	8005d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
	...

080056c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <HAL_TIM_PWM_Start+0x24>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	bf14      	ite	ne
 80056e4:	2301      	movne	r3, #1
 80056e6:	2300      	moveq	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	e022      	b.n	8005732 <HAL_TIM_PWM_Start+0x6a>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d109      	bne.n	8005706 <HAL_TIM_PWM_Start+0x3e>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	bf14      	ite	ne
 80056fe:	2301      	movne	r3, #1
 8005700:	2300      	moveq	r3, #0
 8005702:	b2db      	uxtb	r3, r3
 8005704:	e015      	b.n	8005732 <HAL_TIM_PWM_Start+0x6a>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d109      	bne.n	8005720 <HAL_TIM_PWM_Start+0x58>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b01      	cmp	r3, #1
 8005716:	bf14      	ite	ne
 8005718:	2301      	movne	r3, #1
 800571a:	2300      	moveq	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e008      	b.n	8005732 <HAL_TIM_PWM_Start+0x6a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b01      	cmp	r3, #1
 800572a:	bf14      	ite	ne
 800572c:	2301      	movne	r3, #1
 800572e:	2300      	moveq	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e068      	b.n	800580c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d104      	bne.n	800574a <HAL_TIM_PWM_Start+0x82>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005748:	e013      	b.n	8005772 <HAL_TIM_PWM_Start+0xaa>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b04      	cmp	r3, #4
 800574e:	d104      	bne.n	800575a <HAL_TIM_PWM_Start+0x92>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005758:	e00b      	b.n	8005772 <HAL_TIM_PWM_Start+0xaa>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d104      	bne.n	800576a <HAL_TIM_PWM_Start+0xa2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005768:	e003      	b.n	8005772 <HAL_TIM_PWM_Start+0xaa>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2201      	movs	r2, #1
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fda2 	bl	80062c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a23      	ldr	r2, [pc, #140]	@ (8005814 <HAL_TIM_PWM_Start+0x14c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d107      	bne.n	800579a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005798:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a1d      	ldr	r2, [pc, #116]	@ (8005814 <HAL_TIM_PWM_Start+0x14c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d018      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x10e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ac:	d013      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x10e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a19      	ldr	r2, [pc, #100]	@ (8005818 <HAL_TIM_PWM_Start+0x150>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00e      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x10e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a17      	ldr	r2, [pc, #92]	@ (800581c <HAL_TIM_PWM_Start+0x154>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d009      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x10e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a16      	ldr	r2, [pc, #88]	@ (8005820 <HAL_TIM_PWM_Start+0x158>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d004      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x10e>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a14      	ldr	r2, [pc, #80]	@ (8005824 <HAL_TIM_PWM_Start+0x15c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d111      	bne.n	80057fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b06      	cmp	r3, #6
 80057e6:	d010      	beq.n	800580a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	e007      	b.n	800580a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0201 	orr.w	r2, r2, #1
 8005808:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40010000 	.word	0x40010000
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40000c00 	.word	0x40000c00
 8005824:	40014000 	.word	0x40014000

08005828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d020      	beq.n	800588c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01b      	beq.n	800588c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0202 	mvn.w	r2, #2
 800585c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fa5b 	bl	8005d2e <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa4d 	bl	8005d1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fa5e 	bl	8005d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	d020      	beq.n	80058d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01b      	beq.n	80058d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0204 	mvn.w	r2, #4
 80058a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fa35 	bl	8005d2e <HAL_TIM_IC_CaptureCallback>
 80058c4:	e005      	b.n	80058d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fa27 	bl	8005d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fa38 	bl	8005d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d020      	beq.n	8005924 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01b      	beq.n	8005924 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f06f 0208 	mvn.w	r2, #8
 80058f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2204      	movs	r2, #4
 80058fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fa0f 	bl	8005d2e <HAL_TIM_IC_CaptureCallback>
 8005910:	e005      	b.n	800591e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fa01 	bl	8005d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fa12 	bl	8005d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b00      	cmp	r3, #0
 800592c:	d020      	beq.n	8005970 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01b      	beq.n	8005970 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0210 	mvn.w	r2, #16
 8005940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2208      	movs	r2, #8
 8005946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f9e9 	bl	8005d2e <HAL_TIM_IC_CaptureCallback>
 800595c:	e005      	b.n	800596a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f9db 	bl	8005d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f9ec 	bl	8005d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00c      	beq.n	8005994 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d007      	beq.n	8005994 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0201 	mvn.w	r2, #1
 800598c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fc ff1a 	bl	80027c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00c      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80059b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fd76 	bl	80064a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00c      	beq.n	80059dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f9bd 	bl	8005d56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00c      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0220 	mvn.w	r2, #32
 80059f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fd48 	bl	8006490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e0ae      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b0c      	cmp	r3, #12
 8005a32:	f200 809f 	bhi.w	8005b74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a36:	a201      	add	r2, pc, #4	@ (adr r2, 8005a3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a71 	.word	0x08005a71
 8005a40:	08005b75 	.word	0x08005b75
 8005a44:	08005b75 	.word	0x08005b75
 8005a48:	08005b75 	.word	0x08005b75
 8005a4c:	08005ab1 	.word	0x08005ab1
 8005a50:	08005b75 	.word	0x08005b75
 8005a54:	08005b75 	.word	0x08005b75
 8005a58:	08005b75 	.word	0x08005b75
 8005a5c:	08005af3 	.word	0x08005af3
 8005a60:	08005b75 	.word	0x08005b75
 8005a64:	08005b75 	.word	0x08005b75
 8005a68:	08005b75 	.word	0x08005b75
 8005a6c:	08005b33 	.word	0x08005b33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 f9fe 	bl	8005e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0208 	orr.w	r2, r2, #8
 8005a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0204 	bic.w	r2, r2, #4
 8005a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6999      	ldr	r1, [r3, #24]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	619a      	str	r2, [r3, #24]
      break;
 8005aae:	e064      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fa44 	bl	8005f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6999      	ldr	r1, [r3, #24]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	021a      	lsls	r2, r3, #8
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	619a      	str	r2, [r3, #24]
      break;
 8005af0:	e043      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fa8f 	bl	800601c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0208 	orr.w	r2, r2, #8
 8005b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0204 	bic.w	r2, r2, #4
 8005b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69d9      	ldr	r1, [r3, #28]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	61da      	str	r2, [r3, #28]
      break;
 8005b30:	e023      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fad9 	bl	80060f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69d9      	ldr	r1, [r3, #28]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	021a      	lsls	r2, r3, #8
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	61da      	str	r2, [r3, #28]
      break;
 8005b72:	e002      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	75fb      	strb	r3, [r7, #23]
      break;
 8005b78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e0b4      	b.n	8005d12 <HAL_TIM_ConfigClockSource+0x186>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005be0:	d03e      	beq.n	8005c60 <HAL_TIM_ConfigClockSource+0xd4>
 8005be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005be6:	f200 8087 	bhi.w	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bee:	f000 8086 	beq.w	8005cfe <HAL_TIM_ConfigClockSource+0x172>
 8005bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bf6:	d87f      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf8:	2b70      	cmp	r3, #112	@ 0x70
 8005bfa:	d01a      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0xa6>
 8005bfc:	2b70      	cmp	r3, #112	@ 0x70
 8005bfe:	d87b      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c00:	2b60      	cmp	r3, #96	@ 0x60
 8005c02:	d050      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x11a>
 8005c04:	2b60      	cmp	r3, #96	@ 0x60
 8005c06:	d877      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c08:	2b50      	cmp	r3, #80	@ 0x50
 8005c0a:	d03c      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0xfa>
 8005c0c:	2b50      	cmp	r3, #80	@ 0x50
 8005c0e:	d873      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c10:	2b40      	cmp	r3, #64	@ 0x40
 8005c12:	d058      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x13a>
 8005c14:	2b40      	cmp	r3, #64	@ 0x40
 8005c16:	d86f      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c18:	2b30      	cmp	r3, #48	@ 0x30
 8005c1a:	d064      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c1c:	2b30      	cmp	r3, #48	@ 0x30
 8005c1e:	d86b      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d060      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d867      	bhi.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d05c      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d05a      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c30:	e062      	b.n	8005cf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c42:	f000 fb1f 	bl	8006284 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	609a      	str	r2, [r3, #8]
      break;
 8005c5e:	e04f      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c70:	f000 fb08 	bl	8006284 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c82:	609a      	str	r2, [r3, #8]
      break;
 8005c84:	e03c      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c92:	461a      	mov	r2, r3
 8005c94:	f000 fa7c 	bl	8006190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2150      	movs	r1, #80	@ 0x50
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fad5 	bl	800624e <TIM_ITRx_SetConfig>
      break;
 8005ca4:	e02c      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f000 fa9b 	bl	80061ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2160      	movs	r1, #96	@ 0x60
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fac5 	bl	800624e <TIM_ITRx_SetConfig>
      break;
 8005cc4:	e01c      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f000 fa5c 	bl	8006190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2140      	movs	r1, #64	@ 0x40
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fab5 	bl	800624e <TIM_ITRx_SetConfig>
      break;
 8005ce4:	e00c      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f000 faac 	bl	800624e <TIM_ITRx_SetConfig>
      break;
 8005cf6:	e003      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cfc:	e000      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
	...

08005d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a37      	ldr	r2, [pc, #220]	@ (8005e5c <TIM_Base_SetConfig+0xf0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00f      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d8a:	d00b      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a34      	ldr	r2, [pc, #208]	@ (8005e60 <TIM_Base_SetConfig+0xf4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a33      	ldr	r2, [pc, #204]	@ (8005e64 <TIM_Base_SetConfig+0xf8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a32      	ldr	r2, [pc, #200]	@ (8005e68 <TIM_Base_SetConfig+0xfc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d108      	bne.n	8005db6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a28      	ldr	r2, [pc, #160]	@ (8005e5c <TIM_Base_SetConfig+0xf0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d01b      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc4:	d017      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a25      	ldr	r2, [pc, #148]	@ (8005e60 <TIM_Base_SetConfig+0xf4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a24      	ldr	r2, [pc, #144]	@ (8005e64 <TIM_Base_SetConfig+0xf8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00f      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a23      	ldr	r2, [pc, #140]	@ (8005e68 <TIM_Base_SetConfig+0xfc>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00b      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a22      	ldr	r2, [pc, #136]	@ (8005e6c <TIM_Base_SetConfig+0x100>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d007      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a21      	ldr	r2, [pc, #132]	@ (8005e70 <TIM_Base_SetConfig+0x104>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d003      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a20      	ldr	r2, [pc, #128]	@ (8005e74 <TIM_Base_SetConfig+0x108>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d108      	bne.n	8005e08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a0c      	ldr	r2, [pc, #48]	@ (8005e5c <TIM_Base_SetConfig+0xf0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d103      	bne.n	8005e36 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f043 0204 	orr.w	r2, r3, #4
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	601a      	str	r2, [r3, #0]
}
 8005e4e:	bf00      	nop
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	40000400 	.word	0x40000400
 8005e64:	40000800 	.word	0x40000800
 8005e68:	40000c00 	.word	0x40000c00
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	40014400 	.word	0x40014400
 8005e74:	40014800 	.word	0x40014800

08005e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f023 0201 	bic.w	r2, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0303 	bic.w	r3, r3, #3
 8005eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f023 0302 	bic.w	r3, r3, #2
 8005ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a1c      	ldr	r2, [pc, #112]	@ (8005f40 <TIM_OC1_SetConfig+0xc8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d10c      	bne.n	8005eee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0308 	bic.w	r3, r3, #8
 8005eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f023 0304 	bic.w	r3, r3, #4
 8005eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a13      	ldr	r2, [pc, #76]	@ (8005f40 <TIM_OC1_SetConfig+0xc8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d111      	bne.n	8005f1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	621a      	str	r2, [r3, #32]
}
 8005f34:	bf00      	nop
 8005f36:	371c      	adds	r7, #28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	40010000 	.word	0x40010000

08005f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f023 0210 	bic.w	r2, r3, #16
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f023 0320 	bic.w	r3, r3, #32
 8005f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8006018 <TIM_OC2_SetConfig+0xd4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d10d      	bne.n	8005fc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a15      	ldr	r2, [pc, #84]	@ (8006018 <TIM_OC2_SetConfig+0xd4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d113      	bne.n	8005ff0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40010000 	.word	0x40010000

0800601c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a1d      	ldr	r2, [pc, #116]	@ (80060ec <TIM_OC3_SetConfig+0xd0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d10d      	bne.n	8006096 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006080:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	021b      	lsls	r3, r3, #8
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a14      	ldr	r2, [pc, #80]	@ (80060ec <TIM_OC3_SetConfig+0xd0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d113      	bne.n	80060c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	621a      	str	r2, [r3, #32]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	40010000 	.word	0x40010000

080060f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800611e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800613a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	031b      	lsls	r3, r3, #12
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a10      	ldr	r2, [pc, #64]	@ (800618c <TIM_OC4_SetConfig+0x9c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d109      	bne.n	8006164 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	019b      	lsls	r3, r3, #6
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40010000 	.word	0x40010000

08006190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	f023 0201 	bic.w	r2, r3, #1
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f023 030a 	bic.w	r3, r3, #10
 80061cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	621a      	str	r2, [r3, #32]
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b087      	sub	sp, #28
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	f023 0210 	bic.w	r2, r3, #16
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	031b      	lsls	r3, r3, #12
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800622a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	621a      	str	r2, [r3, #32]
}
 8006242:	bf00      	nop
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	f043 0307 	orr.w	r3, r3, #7
 8006270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	609a      	str	r2, [r3, #8]
}
 8006278:	bf00      	nop
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800629e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	021a      	lsls	r2, r3, #8
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2201      	movs	r2, #1
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a1a      	ldr	r2, [r3, #32]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	43db      	mvns	r3, r3
 80062e6:	401a      	ands	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a1a      	ldr	r2, [r3, #32]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	fa01 f303 	lsl.w	r3, r1, r3
 80062fc:	431a      	orrs	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	621a      	str	r2, [r3, #32]
}
 8006302:	bf00      	nop
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006324:	2302      	movs	r3, #2
 8006326:	e050      	b.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800634e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1c      	ldr	r2, [pc, #112]	@ (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d018      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006374:	d013      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a18      	ldr	r2, [pc, #96]	@ (80063dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00e      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a16      	ldr	r2, [pc, #88]	@ (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d009      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a15      	ldr	r2, [pc, #84]	@ (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d004      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a13      	ldr	r2, [pc, #76]	@ (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d10c      	bne.n	80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800
 80063e4:	40000c00 	.word	0x40000c00
 80063e8:	40014000 	.word	0x40014000

080063ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006404:	2302      	movs	r3, #2
 8006406:	e03d      	b.n	8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e042      	b.n	8006550 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fc fae2 	bl	8002aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2224      	movs	r2, #36	@ 0x24
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f973 	bl	80067e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695a      	ldr	r2, [r3, #20]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	@ 0x28
 800655c:	af02      	add	r7, sp, #8
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	4613      	mov	r3, r2
 8006566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b20      	cmp	r3, #32
 8006576:	d175      	bne.n	8006664 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <HAL_UART_Transmit+0x2c>
 800657e:	88fb      	ldrh	r3, [r7, #6]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e06e      	b.n	8006666 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2221      	movs	r2, #33	@ 0x21
 8006592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006596:	f7fc fca9 	bl	8002eec <HAL_GetTick>
 800659a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	88fa      	ldrh	r2, [r7, #6]
 80065a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	88fa      	ldrh	r2, [r7, #6]
 80065a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065b0:	d108      	bne.n	80065c4 <HAL_UART_Transmit+0x6c>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d104      	bne.n	80065c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	e003      	b.n	80065cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065cc:	e02e      	b.n	800662c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2200      	movs	r2, #0
 80065d6:	2180      	movs	r1, #128	@ 0x80
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 f848 	bl	800666e <UART_WaitOnFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e03a      	b.n	8006666 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10b      	bne.n	800660e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006604:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	3302      	adds	r3, #2
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	e007      	b.n	800661e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	781a      	ldrb	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	3301      	adds	r3, #1
 800661c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1cb      	bne.n	80065ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2200      	movs	r2, #0
 800663e:	2140      	movs	r1, #64	@ 0x40
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f814 	bl	800666e <UART_WaitOnFlagUntilTimeout>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e006      	b.n	8006666 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	e000      	b.n	8006666 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006664:	2302      	movs	r3, #2
  }
}
 8006666:	4618      	mov	r0, r3
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b086      	sub	sp, #24
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	603b      	str	r3, [r7, #0]
 800667a:	4613      	mov	r3, r2
 800667c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800667e:	e03b      	b.n	80066f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d037      	beq.n	80066f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006688:	f7fc fc30 	bl	8002eec <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	429a      	cmp	r2, r3
 8006696:	d302      	bcc.n	800669e <UART_WaitOnFlagUntilTimeout+0x30>
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e03a      	b.n	8006718 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d023      	beq.n	80066f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b80      	cmp	r3, #128	@ 0x80
 80066b4:	d020      	beq.n	80066f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b40      	cmp	r3, #64	@ 0x40
 80066ba:	d01d      	beq.n	80066f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d116      	bne.n	80066f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f81d 	bl	8006720 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2208      	movs	r2, #8
 80066ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e00f      	b.n	8006718 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4013      	ands	r3, r2
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	429a      	cmp	r2, r3
 8006706:	bf0c      	ite	eq
 8006708:	2301      	moveq	r3, #1
 800670a:	2300      	movne	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	461a      	mov	r2, r3
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	429a      	cmp	r2, r3
 8006714:	d0b4      	beq.n	8006680 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b095      	sub	sp, #84	@ 0x54
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	330c      	adds	r3, #12
 800672e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800673e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	330c      	adds	r3, #12
 8006746:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006748:	643a      	str	r2, [r7, #64]	@ 0x40
 800674a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800674e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e5      	bne.n	8006728 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3314      	adds	r3, #20
 8006762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	e853 3f00 	ldrex	r3, [r3]
 800676a:	61fb      	str	r3, [r7, #28]
   return(result);
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3314      	adds	r3, #20
 800677a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800677c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800677e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006784:	e841 2300 	strex	r3, r2, [r1]
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e5      	bne.n	800675c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006794:	2b01      	cmp	r3, #1
 8006796:	d119      	bne.n	80067cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	330c      	adds	r3, #12
 800679e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f023 0310 	bic.w	r3, r3, #16
 80067ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	330c      	adds	r3, #12
 80067b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067b8:	61ba      	str	r2, [r7, #24]
 80067ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6979      	ldr	r1, [r7, #20]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	613b      	str	r3, [r7, #16]
   return(result);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e5      	bne.n	8006798 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80067da:	bf00      	nop
 80067dc:	3754      	adds	r7, #84	@ 0x54
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067ec:	b0c0      	sub	sp, #256	@ 0x100
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006804:	68d9      	ldr	r1, [r3, #12]
 8006806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	ea40 0301 	orr.w	r3, r0, r1
 8006810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	431a      	orrs	r2, r3
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	431a      	orrs	r2, r3
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006840:	f021 010c 	bic.w	r1, r1, #12
 8006844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800684e:	430b      	orrs	r3, r1
 8006850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800685e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006862:	6999      	ldr	r1, [r3, #24]
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	ea40 0301 	orr.w	r3, r0, r1
 800686e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	4b8f      	ldr	r3, [pc, #572]	@ (8006ab4 <UART_SetConfig+0x2cc>)
 8006878:	429a      	cmp	r2, r3
 800687a:	d005      	beq.n	8006888 <UART_SetConfig+0xa0>
 800687c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4b8d      	ldr	r3, [pc, #564]	@ (8006ab8 <UART_SetConfig+0x2d0>)
 8006884:	429a      	cmp	r2, r3
 8006886:	d104      	bne.n	8006892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006888:	f7fe fdcc 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 800688c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006890:	e003      	b.n	800689a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006892:	f7fe fdb3 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8006896:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800689a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068a4:	f040 810c 	bne.w	8006ac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068ac:	2200      	movs	r2, #0
 80068ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80068b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80068ba:	4622      	mov	r2, r4
 80068bc:	462b      	mov	r3, r5
 80068be:	1891      	adds	r1, r2, r2
 80068c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80068c2:	415b      	adcs	r3, r3
 80068c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80068ca:	4621      	mov	r1, r4
 80068cc:	eb12 0801 	adds.w	r8, r2, r1
 80068d0:	4629      	mov	r1, r5
 80068d2:	eb43 0901 	adc.w	r9, r3, r1
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068ea:	4690      	mov	r8, r2
 80068ec:	4699      	mov	r9, r3
 80068ee:	4623      	mov	r3, r4
 80068f0:	eb18 0303 	adds.w	r3, r8, r3
 80068f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068f8:	462b      	mov	r3, r5
 80068fa:	eb49 0303 	adc.w	r3, r9, r3
 80068fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800690e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006916:	460b      	mov	r3, r1
 8006918:	18db      	adds	r3, r3, r3
 800691a:	653b      	str	r3, [r7, #80]	@ 0x50
 800691c:	4613      	mov	r3, r2
 800691e:	eb42 0303 	adc.w	r3, r2, r3
 8006922:	657b      	str	r3, [r7, #84]	@ 0x54
 8006924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800692c:	f7fa f9b4 	bl	8000c98 <__aeabi_uldivmod>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4b61      	ldr	r3, [pc, #388]	@ (8006abc <UART_SetConfig+0x2d4>)
 8006936:	fba3 2302 	umull	r2, r3, r3, r2
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	011c      	lsls	r4, r3, #4
 800693e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006942:	2200      	movs	r2, #0
 8006944:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006948:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800694c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006950:	4642      	mov	r2, r8
 8006952:	464b      	mov	r3, r9
 8006954:	1891      	adds	r1, r2, r2
 8006956:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006958:	415b      	adcs	r3, r3
 800695a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800695c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006960:	4641      	mov	r1, r8
 8006962:	eb12 0a01 	adds.w	sl, r2, r1
 8006966:	4649      	mov	r1, r9
 8006968:	eb43 0b01 	adc.w	fp, r3, r1
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800697c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006980:	4692      	mov	sl, r2
 8006982:	469b      	mov	fp, r3
 8006984:	4643      	mov	r3, r8
 8006986:	eb1a 0303 	adds.w	r3, sl, r3
 800698a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800698e:	464b      	mov	r3, r9
 8006990:	eb4b 0303 	adc.w	r3, fp, r3
 8006994:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80069a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80069ac:	460b      	mov	r3, r1
 80069ae:	18db      	adds	r3, r3, r3
 80069b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069b2:	4613      	mov	r3, r2
 80069b4:	eb42 0303 	adc.w	r3, r2, r3
 80069b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80069ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80069be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80069c2:	f7fa f969 	bl	8000c98 <__aeabi_uldivmod>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4611      	mov	r1, r2
 80069cc:	4b3b      	ldr	r3, [pc, #236]	@ (8006abc <UART_SetConfig+0x2d4>)
 80069ce:	fba3 2301 	umull	r2, r3, r3, r1
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	2264      	movs	r2, #100	@ 0x64
 80069d6:	fb02 f303 	mul.w	r3, r2, r3
 80069da:	1acb      	subs	r3, r1, r3
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80069e2:	4b36      	ldr	r3, [pc, #216]	@ (8006abc <UART_SetConfig+0x2d4>)
 80069e4:	fba3 2302 	umull	r2, r3, r3, r2
 80069e8:	095b      	lsrs	r3, r3, #5
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80069f0:	441c      	add	r4, r3
 80069f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006a00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006a04:	4642      	mov	r2, r8
 8006a06:	464b      	mov	r3, r9
 8006a08:	1891      	adds	r1, r2, r2
 8006a0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006a0c:	415b      	adcs	r3, r3
 8006a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a14:	4641      	mov	r1, r8
 8006a16:	1851      	adds	r1, r2, r1
 8006a18:	6339      	str	r1, [r7, #48]	@ 0x30
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	414b      	adcs	r3, r1
 8006a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	00cb      	lsls	r3, r1, #3
 8006a30:	4651      	mov	r1, sl
 8006a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a36:	4651      	mov	r1, sl
 8006a38:	00ca      	lsls	r2, r1, #3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4642      	mov	r2, r8
 8006a42:	189b      	adds	r3, r3, r2
 8006a44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a48:	464b      	mov	r3, r9
 8006a4a:	460a      	mov	r2, r1
 8006a4c:	eb42 0303 	adc.w	r3, r2, r3
 8006a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a68:	460b      	mov	r3, r1
 8006a6a:	18db      	adds	r3, r3, r3
 8006a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a6e:	4613      	mov	r3, r2
 8006a70:	eb42 0303 	adc.w	r3, r2, r3
 8006a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a7e:	f7fa f90b 	bl	8000c98 <__aeabi_uldivmod>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4b0d      	ldr	r3, [pc, #52]	@ (8006abc <UART_SetConfig+0x2d4>)
 8006a88:	fba3 1302 	umull	r1, r3, r3, r2
 8006a8c:	095b      	lsrs	r3, r3, #5
 8006a8e:	2164      	movs	r1, #100	@ 0x64
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	3332      	adds	r3, #50	@ 0x32
 8006a9a:	4a08      	ldr	r2, [pc, #32]	@ (8006abc <UART_SetConfig+0x2d4>)
 8006a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa0:	095b      	lsrs	r3, r3, #5
 8006aa2:	f003 0207 	and.w	r2, r3, #7
 8006aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4422      	add	r2, r4
 8006aae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ab0:	e106      	b.n	8006cc0 <UART_SetConfig+0x4d8>
 8006ab2:	bf00      	nop
 8006ab4:	40011000 	.word	0x40011000
 8006ab8:	40011400 	.word	0x40011400
 8006abc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006aca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	1891      	adds	r1, r2, r2
 8006ad8:	6239      	str	r1, [r7, #32]
 8006ada:	415b      	adcs	r3, r3
 8006adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ae2:	4641      	mov	r1, r8
 8006ae4:	1854      	adds	r4, r2, r1
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	eb43 0501 	adc.w	r5, r3, r1
 8006aec:	f04f 0200 	mov.w	r2, #0
 8006af0:	f04f 0300 	mov.w	r3, #0
 8006af4:	00eb      	lsls	r3, r5, #3
 8006af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006afa:	00e2      	lsls	r2, r4, #3
 8006afc:	4614      	mov	r4, r2
 8006afe:	461d      	mov	r5, r3
 8006b00:	4643      	mov	r3, r8
 8006b02:	18e3      	adds	r3, r4, r3
 8006b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b08:	464b      	mov	r3, r9
 8006b0a:	eb45 0303 	adc.w	r3, r5, r3
 8006b0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b22:	f04f 0200 	mov.w	r2, #0
 8006b26:	f04f 0300 	mov.w	r3, #0
 8006b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b2e:	4629      	mov	r1, r5
 8006b30:	008b      	lsls	r3, r1, #2
 8006b32:	4621      	mov	r1, r4
 8006b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b38:	4621      	mov	r1, r4
 8006b3a:	008a      	lsls	r2, r1, #2
 8006b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006b40:	f7fa f8aa 	bl	8000c98 <__aeabi_uldivmod>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4b60      	ldr	r3, [pc, #384]	@ (8006ccc <UART_SetConfig+0x4e4>)
 8006b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b4e:	095b      	lsrs	r3, r3, #5
 8006b50:	011c      	lsls	r4, r3, #4
 8006b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b64:	4642      	mov	r2, r8
 8006b66:	464b      	mov	r3, r9
 8006b68:	1891      	adds	r1, r2, r2
 8006b6a:	61b9      	str	r1, [r7, #24]
 8006b6c:	415b      	adcs	r3, r3
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b74:	4641      	mov	r1, r8
 8006b76:	1851      	adds	r1, r2, r1
 8006b78:	6139      	str	r1, [r7, #16]
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	414b      	adcs	r3, r1
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	f04f 0200 	mov.w	r2, #0
 8006b84:	f04f 0300 	mov.w	r3, #0
 8006b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b8c:	4659      	mov	r1, fp
 8006b8e:	00cb      	lsls	r3, r1, #3
 8006b90:	4651      	mov	r1, sl
 8006b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b96:	4651      	mov	r1, sl
 8006b98:	00ca      	lsls	r2, r1, #3
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	189b      	adds	r3, r3, r2
 8006ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ba8:	464b      	mov	r3, r9
 8006baa:	460a      	mov	r2, r1
 8006bac:	eb42 0303 	adc.w	r3, r2, r3
 8006bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	f04f 0300 	mov.w	r3, #0
 8006bc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006bcc:	4649      	mov	r1, r9
 8006bce:	008b      	lsls	r3, r1, #2
 8006bd0:	4641      	mov	r1, r8
 8006bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bd6:	4641      	mov	r1, r8
 8006bd8:	008a      	lsls	r2, r1, #2
 8006bda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006bde:	f7fa f85b 	bl	8000c98 <__aeabi_uldivmod>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	4611      	mov	r1, r2
 8006be8:	4b38      	ldr	r3, [pc, #224]	@ (8006ccc <UART_SetConfig+0x4e4>)
 8006bea:	fba3 2301 	umull	r2, r3, r3, r1
 8006bee:	095b      	lsrs	r3, r3, #5
 8006bf0:	2264      	movs	r2, #100	@ 0x64
 8006bf2:	fb02 f303 	mul.w	r3, r2, r3
 8006bf6:	1acb      	subs	r3, r1, r3
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	3332      	adds	r3, #50	@ 0x32
 8006bfc:	4a33      	ldr	r2, [pc, #204]	@ (8006ccc <UART_SetConfig+0x4e4>)
 8006bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006c02:	095b      	lsrs	r3, r3, #5
 8006c04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c08:	441c      	add	r4, r3
 8006c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c0e:	2200      	movs	r2, #0
 8006c10:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c12:	677a      	str	r2, [r7, #116]	@ 0x74
 8006c14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006c18:	4642      	mov	r2, r8
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	1891      	adds	r1, r2, r2
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	415b      	adcs	r3, r3
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c28:	4641      	mov	r1, r8
 8006c2a:	1851      	adds	r1, r2, r1
 8006c2c:	6039      	str	r1, [r7, #0]
 8006c2e:	4649      	mov	r1, r9
 8006c30:	414b      	adcs	r3, r1
 8006c32:	607b      	str	r3, [r7, #4]
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	f04f 0300 	mov.w	r3, #0
 8006c3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c40:	4659      	mov	r1, fp
 8006c42:	00cb      	lsls	r3, r1, #3
 8006c44:	4651      	mov	r1, sl
 8006c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c4a:	4651      	mov	r1, sl
 8006c4c:	00ca      	lsls	r2, r1, #3
 8006c4e:	4610      	mov	r0, r2
 8006c50:	4619      	mov	r1, r3
 8006c52:	4603      	mov	r3, r0
 8006c54:	4642      	mov	r2, r8
 8006c56:	189b      	adds	r3, r3, r2
 8006c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c5a:	464b      	mov	r3, r9
 8006c5c:	460a      	mov	r2, r1
 8006c5e:	eb42 0303 	adc.w	r3, r2, r3
 8006c62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c70:	f04f 0200 	mov.w	r2, #0
 8006c74:	f04f 0300 	mov.w	r3, #0
 8006c78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	008b      	lsls	r3, r1, #2
 8006c80:	4641      	mov	r1, r8
 8006c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c86:	4641      	mov	r1, r8
 8006c88:	008a      	lsls	r2, r1, #2
 8006c8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c8e:	f7fa f803 	bl	8000c98 <__aeabi_uldivmod>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4b0d      	ldr	r3, [pc, #52]	@ (8006ccc <UART_SetConfig+0x4e4>)
 8006c98:	fba3 1302 	umull	r1, r3, r3, r2
 8006c9c:	095b      	lsrs	r3, r3, #5
 8006c9e:	2164      	movs	r1, #100	@ 0x64
 8006ca0:	fb01 f303 	mul.w	r3, r1, r3
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	3332      	adds	r3, #50	@ 0x32
 8006caa:	4a08      	ldr	r2, [pc, #32]	@ (8006ccc <UART_SetConfig+0x4e4>)
 8006cac:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb0:	095b      	lsrs	r3, r3, #5
 8006cb2:	f003 020f 	and.w	r2, r3, #15
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4422      	add	r2, r4
 8006cbe:	609a      	str	r2, [r3, #8]
}
 8006cc0:	bf00      	nop
 8006cc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ccc:	51eb851f 	.word	0x51eb851f

08006cd0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ce2:	2b84      	cmp	r3, #132	@ 0x84
 8006ce4:	d005      	beq.n	8006cf2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006ce6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	3303      	adds	r3, #3
 8006cf0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006d04:	f000 fae4 	bl	80072d0 <vTaskStartScheduler>
  
  return osOK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d10:	b089      	sub	sp, #36	@ 0x24
 8006d12:	af04      	add	r7, sp, #16
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d020      	beq.n	8006d62 <osThreadCreate+0x54>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01c      	beq.n	8006d62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685c      	ldr	r4, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691e      	ldr	r6, [r3, #16]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff ffc8 	bl	8006cd0 <makeFreeRtosPriority>
 8006d40:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d4a:	9202      	str	r2, [sp, #8]
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	9100      	str	r1, [sp, #0]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	4632      	mov	r2, r6
 8006d54:	4629      	mov	r1, r5
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 f8ed 	bl	8006f36 <xTaskCreateStatic>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	e01c      	b.n	8006d9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685c      	ldr	r4, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d6e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff ffaa 	bl	8006cd0 <makeFreeRtosPriority>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	f107 030c 	add.w	r3, r7, #12
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	9200      	str	r2, [sp, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	4632      	mov	r2, r6
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f000 f932 	bl	8006ff6 <xTaskCreate>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d001      	beq.n	8006d9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e000      	b.n	8006d9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006da6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <osDelay+0x16>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	e000      	b.n	8006dbe <osDelay+0x18>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fa50 	bl	8007264 <vTaskDelay>
  
  return osOK;
 8006dc4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f103 0208 	add.w	r2, r3, #8
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f04f 32ff 	mov.w	r2, #4294967295
 8006de6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f103 0208 	add.w	r2, r3, #8
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f103 0208 	add.w	r2, r3, #8
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689a      	ldr	r2, [r3, #8]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	601a      	str	r2, [r3, #0]
}
 8006e64:	bf00      	nop
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	d103      	bne.n	8006e90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	e00c      	b.n	8006eaa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3308      	adds	r3, #8
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	e002      	b.n	8006e9e <vListInsert+0x2e>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d2f6      	bcs.n	8006e98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	601a      	str	r2, [r3, #0]
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6892      	ldr	r2, [r2, #8]
 8006ef8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6852      	ldr	r2, [r2, #4]
 8006f02:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d103      	bne.n	8006f16 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	1e5a      	subs	r2, r3, #1
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b08e      	sub	sp, #56	@ 0x38
 8006f3a:	af04      	add	r7, sp, #16
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	607a      	str	r2, [r7, #4]
 8006f42:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10b      	bne.n	8006f62 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	e7fd      	b.n	8006f5e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	61fb      	str	r3, [r7, #28]
}
 8006f7a:	bf00      	nop
 8006f7c:	bf00      	nop
 8006f7e:	e7fd      	b.n	8006f7c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f80:	2354      	movs	r3, #84	@ 0x54
 8006f82:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	2b54      	cmp	r3, #84	@ 0x54
 8006f88:	d00b      	beq.n	8006fa2 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	61bb      	str	r3, [r7, #24]
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	e7fd      	b.n	8006f9e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006fa2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01e      	beq.n	8006fe8 <xTaskCreateStatic+0xb2>
 8006faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01b      	beq.n	8006fe8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fb8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9303      	str	r3, [sp, #12]
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	9302      	str	r3, [sp, #8]
 8006fca:	f107 0314 	add.w	r3, r7, #20
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f850 	bl	8007080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fe0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006fe2:	f000 f8d5 	bl	8007190 <prvAddNewTaskToReadyList>
 8006fe6:	e001      	b.n	8006fec <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fec:	697b      	ldr	r3, [r7, #20]
	}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3728      	adds	r7, #40	@ 0x28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b08c      	sub	sp, #48	@ 0x30
 8006ffa:	af04      	add	r7, sp, #16
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	60b9      	str	r1, [r7, #8]
 8007000:	603b      	str	r3, [r7, #0]
 8007002:	4613      	mov	r3, r2
 8007004:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007006:	88fb      	ldrh	r3, [r7, #6]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fed4 	bl	8007db8 <pvPortMalloc>
 8007010:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00e      	beq.n	8007036 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007018:	2054      	movs	r0, #84	@ 0x54
 800701a:	f000 fecd 	bl	8007db8 <pvPortMalloc>
 800701e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	631a      	str	r2, [r3, #48]	@ 0x30
 800702c:	e005      	b.n	800703a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800702e:	6978      	ldr	r0, [r7, #20]
 8007030:	f000 ff90 	bl	8007f54 <vPortFree>
 8007034:	e001      	b.n	800703a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007036:	2300      	movs	r3, #0
 8007038:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d017      	beq.n	8007070 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007048:	88fa      	ldrh	r2, [r7, #6]
 800704a:	2300      	movs	r3, #0
 800704c:	9303      	str	r3, [sp, #12]
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	9302      	str	r3, [sp, #8]
 8007052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 f80e 	bl	8007080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007064:	69f8      	ldr	r0, [r7, #28]
 8007066:	f000 f893 	bl	8007190 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800706a:	2301      	movs	r3, #1
 800706c:	61bb      	str	r3, [r7, #24]
 800706e:	e002      	b.n	8007076 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007070:	f04f 33ff 	mov.w	r3, #4294967295
 8007074:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007076:	69bb      	ldr	r3, [r7, #24]
	}
 8007078:	4618      	mov	r0, r3
 800707a:	3720      	adds	r7, #32
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b088      	sub	sp, #32
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007098:	3b01      	subs	r3, #1
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	f023 0307 	bic.w	r3, r3, #7
 80070a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00b      	beq.n	80070ca <prvInitialiseNewTask+0x4a>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	617b      	str	r3, [r7, #20]
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	e7fd      	b.n	80070c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01f      	beq.n	8007110 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070d0:	2300      	movs	r3, #0
 80070d2:	61fb      	str	r3, [r7, #28]
 80070d4:	e012      	b.n	80070fc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	7819      	ldrb	r1, [r3, #0]
 80070de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	4413      	add	r3, r2
 80070e4:	3334      	adds	r3, #52	@ 0x34
 80070e6:	460a      	mov	r2, r1
 80070e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	4413      	add	r3, r2
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d006      	beq.n	8007104 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	3301      	adds	r3, #1
 80070fa:	61fb      	str	r3, [r7, #28]
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	2b0f      	cmp	r3, #15
 8007100:	d9e9      	bls.n	80070d6 <prvInitialiseNewTask+0x56>
 8007102:	e000      	b.n	8007106 <prvInitialiseNewTask+0x86>
			{
				break;
 8007104:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800710e:	e003      	b.n	8007118 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711a:	2b06      	cmp	r3, #6
 800711c:	d901      	bls.n	8007122 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800711e:	2306      	movs	r3, #6
 8007120:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007126:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800712c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007130:	2200      	movs	r2, #0
 8007132:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007136:	3304      	adds	r3, #4
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff fe68 	bl	8006e0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	3318      	adds	r3, #24
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff fe63 	bl	8006e0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800714c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800714e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007150:	f1c3 0207 	rsb	r2, r3, #7
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800715c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007160:	2200      	movs	r2, #0
 8007162:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	68f9      	ldr	r1, [r7, #12]
 8007170:	69b8      	ldr	r0, [r7, #24]
 8007172:	f000 fc0d 	bl	8007990 <pxPortInitialiseStack>
 8007176:	4602      	mov	r2, r0
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800717c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007186:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007188:	bf00      	nop
 800718a:	3720      	adds	r7, #32
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007198:	f000 fd2e 	bl	8007bf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800719c:	4b2a      	ldr	r3, [pc, #168]	@ (8007248 <prvAddNewTaskToReadyList+0xb8>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3301      	adds	r3, #1
 80071a2:	4a29      	ldr	r2, [pc, #164]	@ (8007248 <prvAddNewTaskToReadyList+0xb8>)
 80071a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071a6:	4b29      	ldr	r3, [pc, #164]	@ (800724c <prvAddNewTaskToReadyList+0xbc>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d109      	bne.n	80071c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071ae:	4a27      	ldr	r2, [pc, #156]	@ (800724c <prvAddNewTaskToReadyList+0xbc>)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071b4:	4b24      	ldr	r3, [pc, #144]	@ (8007248 <prvAddNewTaskToReadyList+0xb8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d110      	bne.n	80071de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071bc:	f000 fac4 	bl	8007748 <prvInitialiseTaskLists>
 80071c0:	e00d      	b.n	80071de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071c2:	4b23      	ldr	r3, [pc, #140]	@ (8007250 <prvAddNewTaskToReadyList+0xc0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071ca:	4b20      	ldr	r3, [pc, #128]	@ (800724c <prvAddNewTaskToReadyList+0xbc>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d802      	bhi.n	80071de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071d8:	4a1c      	ldr	r2, [pc, #112]	@ (800724c <prvAddNewTaskToReadyList+0xbc>)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071de:	4b1d      	ldr	r3, [pc, #116]	@ (8007254 <prvAddNewTaskToReadyList+0xc4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3301      	adds	r3, #1
 80071e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007254 <prvAddNewTaskToReadyList+0xc4>)
 80071e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ec:	2201      	movs	r2, #1
 80071ee:	409a      	lsls	r2, r3
 80071f0:	4b19      	ldr	r3, [pc, #100]	@ (8007258 <prvAddNewTaskToReadyList+0xc8>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	4a18      	ldr	r2, [pc, #96]	@ (8007258 <prvAddNewTaskToReadyList+0xc8>)
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4a15      	ldr	r2, [pc, #84]	@ (800725c <prvAddNewTaskToReadyList+0xcc>)
 8007208:	441a      	add	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3304      	adds	r3, #4
 800720e:	4619      	mov	r1, r3
 8007210:	4610      	mov	r0, r2
 8007212:	f7ff fe09 	bl	8006e28 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007216:	f000 fd21 	bl	8007c5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800721a:	4b0d      	ldr	r3, [pc, #52]	@ (8007250 <prvAddNewTaskToReadyList+0xc0>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00e      	beq.n	8007240 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007222:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <prvAddNewTaskToReadyList+0xbc>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722c:	429a      	cmp	r2, r3
 800722e:	d207      	bcs.n	8007240 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007230:	4b0b      	ldr	r3, [pc, #44]	@ (8007260 <prvAddNewTaskToReadyList+0xd0>)
 8007232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	2000080c 	.word	0x2000080c
 800724c:	2000070c 	.word	0x2000070c
 8007250:	20000818 	.word	0x20000818
 8007254:	20000828 	.word	0x20000828
 8007258:	20000814 	.word	0x20000814
 800725c:	20000710 	.word	0x20000710
 8007260:	e000ed04 	.word	0xe000ed04

08007264 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d018      	beq.n	80072a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007276:	4b14      	ldr	r3, [pc, #80]	@ (80072c8 <vTaskDelay+0x64>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00b      	beq.n	8007296 <vTaskDelay+0x32>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	60bb      	str	r3, [r7, #8]
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	e7fd      	b.n	8007292 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007296:	f000 f87d 	bl	8007394 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800729a:	2100      	movs	r1, #0
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fb11 	bl	80078c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072a2:	f000 f885 	bl	80073b0 <xTaskResumeAll>
 80072a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d107      	bne.n	80072be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80072ae:	4b07      	ldr	r3, [pc, #28]	@ (80072cc <vTaskDelay+0x68>)
 80072b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072be:	bf00      	nop
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20000834 	.word	0x20000834
 80072cc:	e000ed04 	.word	0xe000ed04

080072d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08a      	sub	sp, #40	@ 0x28
 80072d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072de:	463a      	mov	r2, r7
 80072e0:	1d39      	adds	r1, r7, #4
 80072e2:	f107 0308 	add.w	r3, r7, #8
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fa fe0a 	bl	8001f00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	9202      	str	r2, [sp, #8]
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	2300      	movs	r3, #0
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	2300      	movs	r3, #0
 80072fc:	460a      	mov	r2, r1
 80072fe:	491f      	ldr	r1, [pc, #124]	@ (800737c <vTaskStartScheduler+0xac>)
 8007300:	481f      	ldr	r0, [pc, #124]	@ (8007380 <vTaskStartScheduler+0xb0>)
 8007302:	f7ff fe18 	bl	8006f36 <xTaskCreateStatic>
 8007306:	4603      	mov	r3, r0
 8007308:	4a1e      	ldr	r2, [pc, #120]	@ (8007384 <vTaskStartScheduler+0xb4>)
 800730a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800730c:	4b1d      	ldr	r3, [pc, #116]	@ (8007384 <vTaskStartScheduler+0xb4>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007314:	2301      	movs	r3, #1
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	e001      	b.n	800731e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800731a:	2300      	movs	r3, #0
 800731c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d116      	bne.n	8007352 <vTaskStartScheduler+0x82>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	613b      	str	r3, [r7, #16]
}
 8007336:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007338:	4b13      	ldr	r3, [pc, #76]	@ (8007388 <vTaskStartScheduler+0xb8>)
 800733a:	f04f 32ff 	mov.w	r2, #4294967295
 800733e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007340:	4b12      	ldr	r3, [pc, #72]	@ (800738c <vTaskStartScheduler+0xbc>)
 8007342:	2201      	movs	r2, #1
 8007344:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007346:	4b12      	ldr	r3, [pc, #72]	@ (8007390 <vTaskStartScheduler+0xc0>)
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800734c:	f000 fbb0 	bl	8007ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007350:	e00f      	b.n	8007372 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007358:	d10b      	bne.n	8007372 <vTaskStartScheduler+0xa2>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	60fb      	str	r3, [r7, #12]
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	e7fd      	b.n	800736e <vTaskStartScheduler+0x9e>
}
 8007372:	bf00      	nop
 8007374:	3718      	adds	r7, #24
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	0800c9d0 	.word	0x0800c9d0
 8007380:	08007719 	.word	0x08007719
 8007384:	20000830 	.word	0x20000830
 8007388:	2000082c 	.word	0x2000082c
 800738c:	20000818 	.word	0x20000818
 8007390:	20000810 	.word	0x20000810

08007394 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007398:	4b04      	ldr	r3, [pc, #16]	@ (80073ac <vTaskSuspendAll+0x18>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3301      	adds	r3, #1
 800739e:	4a03      	ldr	r2, [pc, #12]	@ (80073ac <vTaskSuspendAll+0x18>)
 80073a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073a2:	bf00      	nop
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	20000834 	.word	0x20000834

080073b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073be:	4b42      	ldr	r3, [pc, #264]	@ (80074c8 <xTaskResumeAll+0x118>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10b      	bne.n	80073de <xTaskResumeAll+0x2e>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	603b      	str	r3, [r7, #0]
}
 80073d8:	bf00      	nop
 80073da:	bf00      	nop
 80073dc:	e7fd      	b.n	80073da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073de:	f000 fc0b 	bl	8007bf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073e2:	4b39      	ldr	r3, [pc, #228]	@ (80074c8 <xTaskResumeAll+0x118>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	4a37      	ldr	r2, [pc, #220]	@ (80074c8 <xTaskResumeAll+0x118>)
 80073ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ec:	4b36      	ldr	r3, [pc, #216]	@ (80074c8 <xTaskResumeAll+0x118>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d161      	bne.n	80074b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073f4:	4b35      	ldr	r3, [pc, #212]	@ (80074cc <xTaskResumeAll+0x11c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d05d      	beq.n	80074b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073fc:	e02e      	b.n	800745c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073fe:	4b34      	ldr	r3, [pc, #208]	@ (80074d0 <xTaskResumeAll+0x120>)
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3318      	adds	r3, #24
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fd69 	bl	8006ee2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	3304      	adds	r3, #4
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff fd64 	bl	8006ee2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741e:	2201      	movs	r2, #1
 8007420:	409a      	lsls	r2, r3
 8007422:	4b2c      	ldr	r3, [pc, #176]	@ (80074d4 <xTaskResumeAll+0x124>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4313      	orrs	r3, r2
 8007428:	4a2a      	ldr	r2, [pc, #168]	@ (80074d4 <xTaskResumeAll+0x124>)
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4a27      	ldr	r2, [pc, #156]	@ (80074d8 <xTaskResumeAll+0x128>)
 800743a:	441a      	add	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3304      	adds	r3, #4
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f7ff fcf0 	bl	8006e28 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800744c:	4b23      	ldr	r3, [pc, #140]	@ (80074dc <xTaskResumeAll+0x12c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007452:	429a      	cmp	r2, r3
 8007454:	d302      	bcc.n	800745c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007456:	4b22      	ldr	r3, [pc, #136]	@ (80074e0 <xTaskResumeAll+0x130>)
 8007458:	2201      	movs	r2, #1
 800745a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800745c:	4b1c      	ldr	r3, [pc, #112]	@ (80074d0 <xTaskResumeAll+0x120>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1cc      	bne.n	80073fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800746a:	f000 fa0b 	bl	8007884 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800746e:	4b1d      	ldr	r3, [pc, #116]	@ (80074e4 <xTaskResumeAll+0x134>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d010      	beq.n	800749c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800747a:	f000 f837 	bl	80074ec <xTaskIncrementTick>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007484:	4b16      	ldr	r3, [pc, #88]	@ (80074e0 <xTaskResumeAll+0x130>)
 8007486:	2201      	movs	r2, #1
 8007488:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3b01      	subs	r3, #1
 800748e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1f1      	bne.n	800747a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007496:	4b13      	ldr	r3, [pc, #76]	@ (80074e4 <xTaskResumeAll+0x134>)
 8007498:	2200      	movs	r2, #0
 800749a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800749c:	4b10      	ldr	r3, [pc, #64]	@ (80074e0 <xTaskResumeAll+0x130>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d009      	beq.n	80074b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074a4:	2301      	movs	r3, #1
 80074a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074a8:	4b0f      	ldr	r3, [pc, #60]	@ (80074e8 <xTaskResumeAll+0x138>)
 80074aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074b8:	f000 fbd0 	bl	8007c5c <vPortExitCritical>

	return xAlreadyYielded;
 80074bc:	68bb      	ldr	r3, [r7, #8]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20000834 	.word	0x20000834
 80074cc:	2000080c 	.word	0x2000080c
 80074d0:	200007cc 	.word	0x200007cc
 80074d4:	20000814 	.word	0x20000814
 80074d8:	20000710 	.word	0x20000710
 80074dc:	2000070c 	.word	0x2000070c
 80074e0:	20000820 	.word	0x20000820
 80074e4:	2000081c 	.word	0x2000081c
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074f6:	4b4f      	ldr	r3, [pc, #316]	@ (8007634 <xTaskIncrementTick+0x148>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f040 808f 	bne.w	800761e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007500:	4b4d      	ldr	r3, [pc, #308]	@ (8007638 <xTaskIncrementTick+0x14c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3301      	adds	r3, #1
 8007506:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007508:	4a4b      	ldr	r2, [pc, #300]	@ (8007638 <xTaskIncrementTick+0x14c>)
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d121      	bne.n	8007558 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007514:	4b49      	ldr	r3, [pc, #292]	@ (800763c <xTaskIncrementTick+0x150>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00b      	beq.n	8007536 <xTaskIncrementTick+0x4a>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	603b      	str	r3, [r7, #0]
}
 8007530:	bf00      	nop
 8007532:	bf00      	nop
 8007534:	e7fd      	b.n	8007532 <xTaskIncrementTick+0x46>
 8007536:	4b41      	ldr	r3, [pc, #260]	@ (800763c <xTaskIncrementTick+0x150>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	4b40      	ldr	r3, [pc, #256]	@ (8007640 <xTaskIncrementTick+0x154>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a3e      	ldr	r2, [pc, #248]	@ (800763c <xTaskIncrementTick+0x150>)
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	4a3e      	ldr	r2, [pc, #248]	@ (8007640 <xTaskIncrementTick+0x154>)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	4b3e      	ldr	r3, [pc, #248]	@ (8007644 <xTaskIncrementTick+0x158>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3301      	adds	r3, #1
 8007550:	4a3c      	ldr	r2, [pc, #240]	@ (8007644 <xTaskIncrementTick+0x158>)
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	f000 f996 	bl	8007884 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007558:	4b3b      	ldr	r3, [pc, #236]	@ (8007648 <xTaskIncrementTick+0x15c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	429a      	cmp	r2, r3
 8007560:	d348      	bcc.n	80075f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007562:	4b36      	ldr	r3, [pc, #216]	@ (800763c <xTaskIncrementTick+0x150>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d104      	bne.n	8007576 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800756c:	4b36      	ldr	r3, [pc, #216]	@ (8007648 <xTaskIncrementTick+0x15c>)
 800756e:	f04f 32ff 	mov.w	r2, #4294967295
 8007572:	601a      	str	r2, [r3, #0]
					break;
 8007574:	e03e      	b.n	80075f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007576:	4b31      	ldr	r3, [pc, #196]	@ (800763c <xTaskIncrementTick+0x150>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	429a      	cmp	r2, r3
 800758c:	d203      	bcs.n	8007596 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800758e:	4a2e      	ldr	r2, [pc, #184]	@ (8007648 <xTaskIncrementTick+0x15c>)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007594:	e02e      	b.n	80075f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	3304      	adds	r3, #4
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff fca1 	bl	8006ee2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d004      	beq.n	80075b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	3318      	adds	r3, #24
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fc98 	bl	8006ee2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b6:	2201      	movs	r2, #1
 80075b8:	409a      	lsls	r2, r3
 80075ba:	4b24      	ldr	r3, [pc, #144]	@ (800764c <xTaskIncrementTick+0x160>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4313      	orrs	r3, r2
 80075c0:	4a22      	ldr	r2, [pc, #136]	@ (800764c <xTaskIncrementTick+0x160>)
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4a1f      	ldr	r2, [pc, #124]	@ (8007650 <xTaskIncrementTick+0x164>)
 80075d2:	441a      	add	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	3304      	adds	r3, #4
 80075d8:	4619      	mov	r1, r3
 80075da:	4610      	mov	r0, r2
 80075dc:	f7ff fc24 	bl	8006e28 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007654 <xTaskIncrementTick+0x168>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d3b9      	bcc.n	8007562 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80075ee:	2301      	movs	r3, #1
 80075f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075f2:	e7b6      	b.n	8007562 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075f4:	4b17      	ldr	r3, [pc, #92]	@ (8007654 <xTaskIncrementTick+0x168>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075fa:	4915      	ldr	r1, [pc, #84]	@ (8007650 <xTaskIncrementTick+0x164>)
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d901      	bls.n	8007610 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800760c:	2301      	movs	r3, #1
 800760e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007610:	4b11      	ldr	r3, [pc, #68]	@ (8007658 <xTaskIncrementTick+0x16c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d007      	beq.n	8007628 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007618:	2301      	movs	r3, #1
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	e004      	b.n	8007628 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800761e:	4b0f      	ldr	r3, [pc, #60]	@ (800765c <xTaskIncrementTick+0x170>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3301      	adds	r3, #1
 8007624:	4a0d      	ldr	r2, [pc, #52]	@ (800765c <xTaskIncrementTick+0x170>)
 8007626:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007628:	697b      	ldr	r3, [r7, #20]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20000834 	.word	0x20000834
 8007638:	20000810 	.word	0x20000810
 800763c:	200007c4 	.word	0x200007c4
 8007640:	200007c8 	.word	0x200007c8
 8007644:	20000824 	.word	0x20000824
 8007648:	2000082c 	.word	0x2000082c
 800764c:	20000814 	.word	0x20000814
 8007650:	20000710 	.word	0x20000710
 8007654:	2000070c 	.word	0x2000070c
 8007658:	20000820 	.word	0x20000820
 800765c:	2000081c 	.word	0x2000081c

08007660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007666:	4b27      	ldr	r3, [pc, #156]	@ (8007704 <vTaskSwitchContext+0xa4>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800766e:	4b26      	ldr	r3, [pc, #152]	@ (8007708 <vTaskSwitchContext+0xa8>)
 8007670:	2201      	movs	r2, #1
 8007672:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007674:	e040      	b.n	80076f8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007676:	4b24      	ldr	r3, [pc, #144]	@ (8007708 <vTaskSwitchContext+0xa8>)
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800767c:	4b23      	ldr	r3, [pc, #140]	@ (800770c <vTaskSwitchContext+0xac>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	fab3 f383 	clz	r3, r3
 8007688:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800768a:	7afb      	ldrb	r3, [r7, #11]
 800768c:	f1c3 031f 	rsb	r3, r3, #31
 8007690:	617b      	str	r3, [r7, #20]
 8007692:	491f      	ldr	r1, [pc, #124]	@ (8007710 <vTaskSwitchContext+0xb0>)
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4613      	mov	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	440b      	add	r3, r1
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10b      	bne.n	80076be <vTaskSwitchContext+0x5e>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	607b      	str	r3, [r7, #4]
}
 80076b8:	bf00      	nop
 80076ba:	bf00      	nop
 80076bc:	e7fd      	b.n	80076ba <vTaskSwitchContext+0x5a>
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4a11      	ldr	r2, [pc, #68]	@ (8007710 <vTaskSwitchContext+0xb0>)
 80076ca:	4413      	add	r3, r2
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	605a      	str	r2, [r3, #4]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	3308      	adds	r3, #8
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d104      	bne.n	80076ee <vTaskSwitchContext+0x8e>
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	605a      	str	r2, [r3, #4]
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	4a07      	ldr	r2, [pc, #28]	@ (8007714 <vTaskSwitchContext+0xb4>)
 80076f6:	6013      	str	r3, [r2, #0]
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	20000834 	.word	0x20000834
 8007708:	20000820 	.word	0x20000820
 800770c:	20000814 	.word	0x20000814
 8007710:	20000710 	.word	0x20000710
 8007714:	2000070c 	.word	0x2000070c

08007718 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007720:	f000 f852 	bl	80077c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007724:	4b06      	ldr	r3, [pc, #24]	@ (8007740 <prvIdleTask+0x28>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d9f9      	bls.n	8007720 <prvIdleTask+0x8>
			{
				taskYIELD();
 800772c:	4b05      	ldr	r3, [pc, #20]	@ (8007744 <prvIdleTask+0x2c>)
 800772e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800773c:	e7f0      	b.n	8007720 <prvIdleTask+0x8>
 800773e:	bf00      	nop
 8007740:	20000710 	.word	0x20000710
 8007744:	e000ed04 	.word	0xe000ed04

08007748 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800774e:	2300      	movs	r3, #0
 8007750:	607b      	str	r3, [r7, #4]
 8007752:	e00c      	b.n	800776e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	4613      	mov	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4a12      	ldr	r2, [pc, #72]	@ (80077a8 <prvInitialiseTaskLists+0x60>)
 8007760:	4413      	add	r3, r2
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fb33 	bl	8006dce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3301      	adds	r3, #1
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b06      	cmp	r3, #6
 8007772:	d9ef      	bls.n	8007754 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007774:	480d      	ldr	r0, [pc, #52]	@ (80077ac <prvInitialiseTaskLists+0x64>)
 8007776:	f7ff fb2a 	bl	8006dce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800777a:	480d      	ldr	r0, [pc, #52]	@ (80077b0 <prvInitialiseTaskLists+0x68>)
 800777c:	f7ff fb27 	bl	8006dce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007780:	480c      	ldr	r0, [pc, #48]	@ (80077b4 <prvInitialiseTaskLists+0x6c>)
 8007782:	f7ff fb24 	bl	8006dce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007786:	480c      	ldr	r0, [pc, #48]	@ (80077b8 <prvInitialiseTaskLists+0x70>)
 8007788:	f7ff fb21 	bl	8006dce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800778c:	480b      	ldr	r0, [pc, #44]	@ (80077bc <prvInitialiseTaskLists+0x74>)
 800778e:	f7ff fb1e 	bl	8006dce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007792:	4b0b      	ldr	r3, [pc, #44]	@ (80077c0 <prvInitialiseTaskLists+0x78>)
 8007794:	4a05      	ldr	r2, [pc, #20]	@ (80077ac <prvInitialiseTaskLists+0x64>)
 8007796:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007798:	4b0a      	ldr	r3, [pc, #40]	@ (80077c4 <prvInitialiseTaskLists+0x7c>)
 800779a:	4a05      	ldr	r2, [pc, #20]	@ (80077b0 <prvInitialiseTaskLists+0x68>)
 800779c:	601a      	str	r2, [r3, #0]
}
 800779e:	bf00      	nop
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000710 	.word	0x20000710
 80077ac:	2000079c 	.word	0x2000079c
 80077b0:	200007b0 	.word	0x200007b0
 80077b4:	200007cc 	.word	0x200007cc
 80077b8:	200007e0 	.word	0x200007e0
 80077bc:	200007f8 	.word	0x200007f8
 80077c0:	200007c4 	.word	0x200007c4
 80077c4:	200007c8 	.word	0x200007c8

080077c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077ce:	e019      	b.n	8007804 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077d0:	f000 fa12 	bl	8007bf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d4:	4b10      	ldr	r3, [pc, #64]	@ (8007818 <prvCheckTasksWaitingTermination+0x50>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3304      	adds	r3, #4
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff fb7e 	bl	8006ee2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077e6:	4b0d      	ldr	r3, [pc, #52]	@ (800781c <prvCheckTasksWaitingTermination+0x54>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	4a0b      	ldr	r2, [pc, #44]	@ (800781c <prvCheckTasksWaitingTermination+0x54>)
 80077ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007820 <prvCheckTasksWaitingTermination+0x58>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007820 <prvCheckTasksWaitingTermination+0x58>)
 80077f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077fa:	f000 fa2f 	bl	8007c5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f810 	bl	8007824 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007804:	4b06      	ldr	r3, [pc, #24]	@ (8007820 <prvCheckTasksWaitingTermination+0x58>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e1      	bne.n	80077d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800780c:	bf00      	nop
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	200007e0 	.word	0x200007e0
 800781c:	2000080c 	.word	0x2000080c
 8007820:	200007f4 	.word	0x200007f4

08007824 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007832:	2b00      	cmp	r3, #0
 8007834:	d108      	bne.n	8007848 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fb8a 	bl	8007f54 <vPortFree>
				vPortFree( pxTCB );
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fb87 	bl	8007f54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007846:	e019      	b.n	800787c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800784e:	2b01      	cmp	r3, #1
 8007850:	d103      	bne.n	800785a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fb7e 	bl	8007f54 <vPortFree>
	}
 8007858:	e010      	b.n	800787c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007860:	2b02      	cmp	r3, #2
 8007862:	d00b      	beq.n	800787c <prvDeleteTCB+0x58>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	60fb      	str	r3, [r7, #12]
}
 8007876:	bf00      	nop
 8007878:	bf00      	nop
 800787a:	e7fd      	b.n	8007878 <prvDeleteTCB+0x54>
	}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800788a:	4b0c      	ldr	r3, [pc, #48]	@ (80078bc <prvResetNextTaskUnblockTime+0x38>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d104      	bne.n	800789e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007894:	4b0a      	ldr	r3, [pc, #40]	@ (80078c0 <prvResetNextTaskUnblockTime+0x3c>)
 8007896:	f04f 32ff 	mov.w	r2, #4294967295
 800789a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800789c:	e008      	b.n	80078b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800789e:	4b07      	ldr	r3, [pc, #28]	@ (80078bc <prvResetNextTaskUnblockTime+0x38>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	4a04      	ldr	r2, [pc, #16]	@ (80078c0 <prvResetNextTaskUnblockTime+0x3c>)
 80078ae:	6013      	str	r3, [r2, #0]
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	200007c4 	.word	0x200007c4
 80078c0:	2000082c 	.word	0x2000082c

080078c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078ce:	4b29      	ldr	r3, [pc, #164]	@ (8007974 <prvAddCurrentTaskToDelayedList+0xb0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078d4:	4b28      	ldr	r3, [pc, #160]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3304      	adds	r3, #4
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff fb01 	bl	8006ee2 <uxListRemove>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10b      	bne.n	80078fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80078e6:	4b24      	ldr	r3, [pc, #144]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ec:	2201      	movs	r2, #1
 80078ee:	fa02 f303 	lsl.w	r3, r2, r3
 80078f2:	43da      	mvns	r2, r3
 80078f4:	4b21      	ldr	r3, [pc, #132]	@ (800797c <prvAddCurrentTaskToDelayedList+0xb8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4013      	ands	r3, r2
 80078fa:	4a20      	ldr	r2, [pc, #128]	@ (800797c <prvAddCurrentTaskToDelayedList+0xb8>)
 80078fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007904:	d10a      	bne.n	800791c <prvAddCurrentTaskToDelayedList+0x58>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d007      	beq.n	800791c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800790c:	4b1a      	ldr	r3, [pc, #104]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3304      	adds	r3, #4
 8007912:	4619      	mov	r1, r3
 8007914:	481a      	ldr	r0, [pc, #104]	@ (8007980 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007916:	f7ff fa87 	bl	8006e28 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800791a:	e026      	b.n	800796a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4413      	add	r3, r2
 8007922:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007924:	4b14      	ldr	r3, [pc, #80]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	429a      	cmp	r2, r3
 8007932:	d209      	bcs.n	8007948 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007934:	4b13      	ldr	r3, [pc, #76]	@ (8007984 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	4b0f      	ldr	r3, [pc, #60]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3304      	adds	r3, #4
 800793e:	4619      	mov	r1, r3
 8007940:	4610      	mov	r0, r2
 8007942:	f7ff fa95 	bl	8006e70 <vListInsert>
}
 8007946:	e010      	b.n	800796a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007948:	4b0f      	ldr	r3, [pc, #60]	@ (8007988 <prvAddCurrentTaskToDelayedList+0xc4>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	4b0a      	ldr	r3, [pc, #40]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3304      	adds	r3, #4
 8007952:	4619      	mov	r1, r3
 8007954:	4610      	mov	r0, r2
 8007956:	f7ff fa8b 	bl	8006e70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800795a:	4b0c      	ldr	r3, [pc, #48]	@ (800798c <prvAddCurrentTaskToDelayedList+0xc8>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	429a      	cmp	r2, r3
 8007962:	d202      	bcs.n	800796a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007964:	4a09      	ldr	r2, [pc, #36]	@ (800798c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	6013      	str	r3, [r2, #0]
}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000810 	.word	0x20000810
 8007978:	2000070c 	.word	0x2000070c
 800797c:	20000814 	.word	0x20000814
 8007980:	200007f8 	.word	0x200007f8
 8007984:	200007c8 	.word	0x200007c8
 8007988:	200007c4 	.word	0x200007c4
 800798c:	2000082c 	.word	0x2000082c

08007990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3b04      	subs	r3, #4
 80079a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3b04      	subs	r3, #4
 80079ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f023 0201 	bic.w	r2, r3, #1
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3b04      	subs	r3, #4
 80079be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079c0:	4a0c      	ldr	r2, [pc, #48]	@ (80079f4 <pxPortInitialiseStack+0x64>)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3b14      	subs	r3, #20
 80079ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3b04      	subs	r3, #4
 80079d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f06f 0202 	mvn.w	r2, #2
 80079de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3b20      	subs	r3, #32
 80079e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079e6:	68fb      	ldr	r3, [r7, #12]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	080079f9 	.word	0x080079f9

080079f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a02:	4b13      	ldr	r3, [pc, #76]	@ (8007a50 <prvTaskExitError+0x58>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0a:	d00b      	beq.n	8007a24 <prvTaskExitError+0x2c>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	60fb      	str	r3, [r7, #12]
}
 8007a1e:	bf00      	nop
 8007a20:	bf00      	nop
 8007a22:	e7fd      	b.n	8007a20 <prvTaskExitError+0x28>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	60bb      	str	r3, [r7, #8]
}
 8007a36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a38:	bf00      	nop
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d0fc      	beq.n	8007a3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000014 	.word	0x20000014
	...

08007a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a60:	4b07      	ldr	r3, [pc, #28]	@ (8007a80 <pxCurrentTCBConst2>)
 8007a62:	6819      	ldr	r1, [r3, #0]
 8007a64:	6808      	ldr	r0, [r1, #0]
 8007a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6a:	f380 8809 	msr	PSP, r0
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f380 8811 	msr	BASEPRI, r0
 8007a7a:	4770      	bx	lr
 8007a7c:	f3af 8000 	nop.w

08007a80 <pxCurrentTCBConst2>:
 8007a80:	2000070c 	.word	0x2000070c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop

08007a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a88:	4808      	ldr	r0, [pc, #32]	@ (8007aac <prvPortStartFirstTask+0x24>)
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	6800      	ldr	r0, [r0, #0]
 8007a8e:	f380 8808 	msr	MSP, r0
 8007a92:	f04f 0000 	mov.w	r0, #0
 8007a96:	f380 8814 	msr	CONTROL, r0
 8007a9a:	b662      	cpsie	i
 8007a9c:	b661      	cpsie	f
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	df00      	svc	0
 8007aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aaa:	bf00      	nop
 8007aac:	e000ed08 	.word	0xe000ed08

08007ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ab6:	4b47      	ldr	r3, [pc, #284]	@ (8007bd4 <xPortStartScheduler+0x124>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a47      	ldr	r2, [pc, #284]	@ (8007bd8 <xPortStartScheduler+0x128>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d10b      	bne.n	8007ad8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	60fb      	str	r3, [r7, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	bf00      	nop
 8007ad6:	e7fd      	b.n	8007ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8007bd4 <xPortStartScheduler+0x124>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a3f      	ldr	r2, [pc, #252]	@ (8007bdc <xPortStartScheduler+0x12c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d10b      	bne.n	8007afa <xPortStartScheduler+0x4a>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	613b      	str	r3, [r7, #16]
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop
 8007af8:	e7fd      	b.n	8007af6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007afa:	4b39      	ldr	r3, [pc, #228]	@ (8007be0 <xPortStartScheduler+0x130>)
 8007afc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	22ff      	movs	r2, #255	@ 0xff
 8007b0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	4b31      	ldr	r3, [pc, #196]	@ (8007be4 <xPortStartScheduler+0x134>)
 8007b20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b22:	4b31      	ldr	r3, [pc, #196]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b24:	2207      	movs	r2, #7
 8007b26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b28:	e009      	b.n	8007b3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	4a2d      	ldr	r2, [pc, #180]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b3e:	78fb      	ldrb	r3, [r7, #3]
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b46:	2b80      	cmp	r3, #128	@ 0x80
 8007b48:	d0ef      	beq.n	8007b2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b4a:	4b27      	ldr	r3, [pc, #156]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f1c3 0307 	rsb	r3, r3, #7
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d00b      	beq.n	8007b6e <xPortStartScheduler+0xbe>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	60bb      	str	r3, [r7, #8]
}
 8007b68:	bf00      	nop
 8007b6a:	bf00      	nop
 8007b6c:	e7fd      	b.n	8007b6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	021b      	lsls	r3, r3, #8
 8007b74:	4a1c      	ldr	r2, [pc, #112]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b78:	4b1b      	ldr	r3, [pc, #108]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b80:	4a19      	ldr	r2, [pc, #100]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b8c:	4b17      	ldr	r3, [pc, #92]	@ (8007bec <xPortStartScheduler+0x13c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a16      	ldr	r2, [pc, #88]	@ (8007bec <xPortStartScheduler+0x13c>)
 8007b92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b98:	4b14      	ldr	r3, [pc, #80]	@ (8007bec <xPortStartScheduler+0x13c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a13      	ldr	r2, [pc, #76]	@ (8007bec <xPortStartScheduler+0x13c>)
 8007b9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ba2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ba4:	f000 f8da 	bl	8007d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ba8:	4b11      	ldr	r3, [pc, #68]	@ (8007bf0 <xPortStartScheduler+0x140>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bae:	f000 f8f9 	bl	8007da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bb2:	4b10      	ldr	r3, [pc, #64]	@ (8007bf4 <xPortStartScheduler+0x144>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8007bf4 <xPortStartScheduler+0x144>)
 8007bb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007bbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bbe:	f7ff ff63 	bl	8007a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bc2:	f7ff fd4d 	bl	8007660 <vTaskSwitchContext>
	prvTaskExitError();
 8007bc6:	f7ff ff17 	bl	80079f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	e000ed00 	.word	0xe000ed00
 8007bd8:	410fc271 	.word	0x410fc271
 8007bdc:	410fc270 	.word	0x410fc270
 8007be0:	e000e400 	.word	0xe000e400
 8007be4:	20000838 	.word	0x20000838
 8007be8:	2000083c 	.word	0x2000083c
 8007bec:	e000ed20 	.word	0xe000ed20
 8007bf0:	20000014 	.word	0x20000014
 8007bf4:	e000ef34 	.word	0xe000ef34

08007bf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	607b      	str	r3, [r7, #4]
}
 8007c10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c12:	4b10      	ldr	r3, [pc, #64]	@ (8007c54 <vPortEnterCritical+0x5c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3301      	adds	r3, #1
 8007c18:	4a0e      	ldr	r2, [pc, #56]	@ (8007c54 <vPortEnterCritical+0x5c>)
 8007c1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c54 <vPortEnterCritical+0x5c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d110      	bne.n	8007c46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c24:	4b0c      	ldr	r3, [pc, #48]	@ (8007c58 <vPortEnterCritical+0x60>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00b      	beq.n	8007c46 <vPortEnterCritical+0x4e>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	603b      	str	r3, [r7, #0]
}
 8007c40:	bf00      	nop
 8007c42:	bf00      	nop
 8007c44:	e7fd      	b.n	8007c42 <vPortEnterCritical+0x4a>
	}
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20000014 	.word	0x20000014
 8007c58:	e000ed04 	.word	0xe000ed04

08007c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c62:	4b12      	ldr	r3, [pc, #72]	@ (8007cac <vPortExitCritical+0x50>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10b      	bne.n	8007c82 <vPortExitCritical+0x26>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	607b      	str	r3, [r7, #4]
}
 8007c7c:	bf00      	nop
 8007c7e:	bf00      	nop
 8007c80:	e7fd      	b.n	8007c7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c82:	4b0a      	ldr	r3, [pc, #40]	@ (8007cac <vPortExitCritical+0x50>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	4a08      	ldr	r2, [pc, #32]	@ (8007cac <vPortExitCritical+0x50>)
 8007c8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c8c:	4b07      	ldr	r3, [pc, #28]	@ (8007cac <vPortExitCritical+0x50>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d105      	bne.n	8007ca0 <vPortExitCritical+0x44>
 8007c94:	2300      	movs	r3, #0
 8007c96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	20000014 	.word	0x20000014

08007cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cb0:	f3ef 8009 	mrs	r0, PSP
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	4b15      	ldr	r3, [pc, #84]	@ (8007d10 <pxCurrentTCBConst>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	f01e 0f10 	tst.w	lr, #16
 8007cc0:	bf08      	it	eq
 8007cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cca:	6010      	str	r0, [r2, #0]
 8007ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007cd4:	f380 8811 	msr	BASEPRI, r0
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f7ff fcbe 	bl	8007660 <vTaskSwitchContext>
 8007ce4:	f04f 0000 	mov.w	r0, #0
 8007ce8:	f380 8811 	msr	BASEPRI, r0
 8007cec:	bc09      	pop	{r0, r3}
 8007cee:	6819      	ldr	r1, [r3, #0]
 8007cf0:	6808      	ldr	r0, [r1, #0]
 8007cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf6:	f01e 0f10 	tst.w	lr, #16
 8007cfa:	bf08      	it	eq
 8007cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d00:	f380 8809 	msr	PSP, r0
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	f3af 8000 	nop.w

08007d10 <pxCurrentTCBConst>:
 8007d10:	2000070c 	.word	0x2000070c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop

08007d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	607b      	str	r3, [r7, #4]
}
 8007d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d32:	f7ff fbdb 	bl	80074ec <xTaskIncrementTick>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d3c:	4b06      	ldr	r3, [pc, #24]	@ (8007d58 <SysTick_Handler+0x40>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f383 8811 	msr	BASEPRI, r3
}
 8007d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d60:	4b0b      	ldr	r3, [pc, #44]	@ (8007d90 <vPortSetupTimerInterrupt+0x34>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d66:	4b0b      	ldr	r3, [pc, #44]	@ (8007d94 <vPortSetupTimerInterrupt+0x38>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d98 <vPortSetupTimerInterrupt+0x3c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a0a      	ldr	r2, [pc, #40]	@ (8007d9c <vPortSetupTimerInterrupt+0x40>)
 8007d72:	fba2 2303 	umull	r2, r3, r2, r3
 8007d76:	099b      	lsrs	r3, r3, #6
 8007d78:	4a09      	ldr	r2, [pc, #36]	@ (8007da0 <vPortSetupTimerInterrupt+0x44>)
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d7e:	4b04      	ldr	r3, [pc, #16]	@ (8007d90 <vPortSetupTimerInterrupt+0x34>)
 8007d80:	2207      	movs	r2, #7
 8007d82:	601a      	str	r2, [r3, #0]
}
 8007d84:	bf00      	nop
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	e000e010 	.word	0xe000e010
 8007d94:	e000e018 	.word	0xe000e018
 8007d98:	20000008 	.word	0x20000008
 8007d9c:	10624dd3 	.word	0x10624dd3
 8007da0:	e000e014 	.word	0xe000e014

08007da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007da4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007db4 <vPortEnableVFP+0x10>
 8007da8:	6801      	ldr	r1, [r0, #0]
 8007daa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007dae:	6001      	str	r1, [r0, #0]
 8007db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007db2:	bf00      	nop
 8007db4:	e000ed88 	.word	0xe000ed88

08007db8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	@ 0x28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007dc4:	f7ff fae6 	bl	8007394 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007dc8:	4b5c      	ldr	r3, [pc, #368]	@ (8007f3c <pvPortMalloc+0x184>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007dd0:	f000 f924 	bl	800801c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007dd4:	4b5a      	ldr	r3, [pc, #360]	@ (8007f40 <pvPortMalloc+0x188>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f040 8095 	bne.w	8007f0c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01e      	beq.n	8007e26 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007de8:	2208      	movs	r2, #8
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4413      	add	r3, r2
 8007dee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d015      	beq.n	8007e26 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f023 0307 	bic.w	r3, r3, #7
 8007e00:	3308      	adds	r3, #8
 8007e02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00b      	beq.n	8007e26 <pvPortMalloc+0x6e>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	617b      	str	r3, [r7, #20]
}
 8007e20:	bf00      	nop
 8007e22:	bf00      	nop
 8007e24:	e7fd      	b.n	8007e22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d06f      	beq.n	8007f0c <pvPortMalloc+0x154>
 8007e2c:	4b45      	ldr	r3, [pc, #276]	@ (8007f44 <pvPortMalloc+0x18c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d86a      	bhi.n	8007f0c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e36:	4b44      	ldr	r3, [pc, #272]	@ (8007f48 <pvPortMalloc+0x190>)
 8007e38:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e3a:	4b43      	ldr	r3, [pc, #268]	@ (8007f48 <pvPortMalloc+0x190>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e40:	e004      	b.n	8007e4c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e44:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d903      	bls.n	8007e5e <pvPortMalloc+0xa6>
 8007e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1f1      	bne.n	8007e42 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e5e:	4b37      	ldr	r3, [pc, #220]	@ (8007f3c <pvPortMalloc+0x184>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d051      	beq.n	8007f0c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	4413      	add	r3, r2
 8007e70:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	1ad2      	subs	r2, r2, r3
 8007e82:	2308      	movs	r3, #8
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d920      	bls.n	8007ecc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4413      	add	r3, r2
 8007e90:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00b      	beq.n	8007eb4 <pvPortMalloc+0xfc>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	613b      	str	r3, [r7, #16]
}
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
 8007eb2:	e7fd      	b.n	8007eb0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	1ad2      	subs	r2, r2, r3
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ec6:	69b8      	ldr	r0, [r7, #24]
 8007ec8:	f000 f90a 	bl	80080e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8007f44 <pvPortMalloc+0x18c>)
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8007f44 <pvPortMalloc+0x18c>)
 8007ed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007eda:	4b1a      	ldr	r3, [pc, #104]	@ (8007f44 <pvPortMalloc+0x18c>)
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	4b1b      	ldr	r3, [pc, #108]	@ (8007f4c <pvPortMalloc+0x194>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d203      	bcs.n	8007eee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ee6:	4b17      	ldr	r3, [pc, #92]	@ (8007f44 <pvPortMalloc+0x18c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a18      	ldr	r2, [pc, #96]	@ (8007f4c <pvPortMalloc+0x194>)
 8007eec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	4b13      	ldr	r3, [pc, #76]	@ (8007f40 <pvPortMalloc+0x188>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efe:	2200      	movs	r2, #0
 8007f00:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f02:	4b13      	ldr	r3, [pc, #76]	@ (8007f50 <pvPortMalloc+0x198>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3301      	adds	r3, #1
 8007f08:	4a11      	ldr	r2, [pc, #68]	@ (8007f50 <pvPortMalloc+0x198>)
 8007f0a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f0c:	f7ff fa50 	bl	80073b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00b      	beq.n	8007f32 <pvPortMalloc+0x17a>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	60fb      	str	r3, [r7, #12]
}
 8007f2c:	bf00      	nop
 8007f2e:	bf00      	nop
 8007f30:	e7fd      	b.n	8007f2e <pvPortMalloc+0x176>
	return pvReturn;
 8007f32:	69fb      	ldr	r3, [r7, #28]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3728      	adds	r7, #40	@ 0x28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20004448 	.word	0x20004448
 8007f40:	2000445c 	.word	0x2000445c
 8007f44:	2000444c 	.word	0x2000444c
 8007f48:	20004440 	.word	0x20004440
 8007f4c:	20004450 	.word	0x20004450
 8007f50:	20004454 	.word	0x20004454

08007f54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d04f      	beq.n	8008006 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f66:	2308      	movs	r3, #8
 8007f68:	425b      	negs	r3, r3
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	4b25      	ldr	r3, [pc, #148]	@ (8008010 <vPortFree+0xbc>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10b      	bne.n	8007f9a <vPortFree+0x46>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60fb      	str	r3, [r7, #12]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <vPortFree+0x66>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	60bb      	str	r3, [r7, #8]
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
 8007fb8:	e7fd      	b.n	8007fb6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	4b14      	ldr	r3, [pc, #80]	@ (8008010 <vPortFree+0xbc>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01e      	beq.n	8008006 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d11a      	bne.n	8008006 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8008010 <vPortFree+0xbc>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	43db      	mvns	r3, r3
 8007fda:	401a      	ands	r2, r3
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fe0:	f7ff f9d8 	bl	8007394 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8008014 <vPortFree+0xc0>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4413      	add	r3, r2
 8007fee:	4a09      	ldr	r2, [pc, #36]	@ (8008014 <vPortFree+0xc0>)
 8007ff0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ff2:	6938      	ldr	r0, [r7, #16]
 8007ff4:	f000 f874 	bl	80080e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ff8:	4b07      	ldr	r3, [pc, #28]	@ (8008018 <vPortFree+0xc4>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	4a06      	ldr	r2, [pc, #24]	@ (8008018 <vPortFree+0xc4>)
 8008000:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008002:	f7ff f9d5 	bl	80073b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008006:	bf00      	nop
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	2000445c 	.word	0x2000445c
 8008014:	2000444c 	.word	0x2000444c
 8008018:	20004458 	.word	0x20004458

0800801c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008022:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008026:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008028:	4b27      	ldr	r3, [pc, #156]	@ (80080c8 <prvHeapInit+0xac>)
 800802a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00c      	beq.n	8008050 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3307      	adds	r3, #7
 800803a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f023 0307 	bic.w	r3, r3, #7
 8008042:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	4a1f      	ldr	r2, [pc, #124]	@ (80080c8 <prvHeapInit+0xac>)
 800804c:	4413      	add	r3, r2
 800804e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008054:	4a1d      	ldr	r2, [pc, #116]	@ (80080cc <prvHeapInit+0xb0>)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800805a:	4b1c      	ldr	r3, [pc, #112]	@ (80080cc <prvHeapInit+0xb0>)
 800805c:	2200      	movs	r2, #0
 800805e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	4413      	add	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008068:	2208      	movs	r2, #8
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	1a9b      	subs	r3, r3, r2
 800806e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f023 0307 	bic.w	r3, r3, #7
 8008076:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4a15      	ldr	r2, [pc, #84]	@ (80080d0 <prvHeapInit+0xb4>)
 800807c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800807e:	4b14      	ldr	r3, [pc, #80]	@ (80080d0 <prvHeapInit+0xb4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2200      	movs	r2, #0
 8008084:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008086:	4b12      	ldr	r3, [pc, #72]	@ (80080d0 <prvHeapInit+0xb4>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	1ad2      	subs	r2, r2, r3
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800809c:	4b0c      	ldr	r3, [pc, #48]	@ (80080d0 <prvHeapInit+0xb4>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	4a0a      	ldr	r2, [pc, #40]	@ (80080d4 <prvHeapInit+0xb8>)
 80080aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	4a09      	ldr	r2, [pc, #36]	@ (80080d8 <prvHeapInit+0xbc>)
 80080b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080b4:	4b09      	ldr	r3, [pc, #36]	@ (80080dc <prvHeapInit+0xc0>)
 80080b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80080ba:	601a      	str	r2, [r3, #0]
}
 80080bc:	bf00      	nop
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	20000840 	.word	0x20000840
 80080cc:	20004440 	.word	0x20004440
 80080d0:	20004448 	.word	0x20004448
 80080d4:	20004450 	.word	0x20004450
 80080d8:	2000444c 	.word	0x2000444c
 80080dc:	2000445c 	.word	0x2000445c

080080e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080e8:	4b28      	ldr	r3, [pc, #160]	@ (800818c <prvInsertBlockIntoFreeList+0xac>)
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	e002      	b.n	80080f4 <prvInsertBlockIntoFreeList+0x14>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d8f7      	bhi.n	80080ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	4413      	add	r3, r2
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	d108      	bne.n	8008122 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	441a      	add	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	441a      	add	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d118      	bne.n	8008168 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4b15      	ldr	r3, [pc, #84]	@ (8008190 <prvInsertBlockIntoFreeList+0xb0>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	d00d      	beq.n	800815e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	441a      	add	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	e008      	b.n	8008170 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800815e:	4b0c      	ldr	r3, [pc, #48]	@ (8008190 <prvInsertBlockIntoFreeList+0xb0>)
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	e003      	b.n	8008170 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	429a      	cmp	r2, r3
 8008176:	d002      	beq.n	800817e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800817e:	bf00      	nop
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	20004440 	.word	0x20004440
 8008190:	20004448 	.word	0x20004448

08008194 <__cvt>:
 8008194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008198:	ec57 6b10 	vmov	r6, r7, d0
 800819c:	2f00      	cmp	r7, #0
 800819e:	460c      	mov	r4, r1
 80081a0:	4619      	mov	r1, r3
 80081a2:	463b      	mov	r3, r7
 80081a4:	bfbb      	ittet	lt
 80081a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80081aa:	461f      	movlt	r7, r3
 80081ac:	2300      	movge	r3, #0
 80081ae:	232d      	movlt	r3, #45	@ 0x2d
 80081b0:	700b      	strb	r3, [r1, #0]
 80081b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80081b8:	4691      	mov	r9, r2
 80081ba:	f023 0820 	bic.w	r8, r3, #32
 80081be:	bfbc      	itt	lt
 80081c0:	4632      	movlt	r2, r6
 80081c2:	4616      	movlt	r6, r2
 80081c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081c8:	d005      	beq.n	80081d6 <__cvt+0x42>
 80081ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80081ce:	d100      	bne.n	80081d2 <__cvt+0x3e>
 80081d0:	3401      	adds	r4, #1
 80081d2:	2102      	movs	r1, #2
 80081d4:	e000      	b.n	80081d8 <__cvt+0x44>
 80081d6:	2103      	movs	r1, #3
 80081d8:	ab03      	add	r3, sp, #12
 80081da:	9301      	str	r3, [sp, #4]
 80081dc:	ab02      	add	r3, sp, #8
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	ec47 6b10 	vmov	d0, r6, r7
 80081e4:	4653      	mov	r3, sl
 80081e6:	4622      	mov	r2, r4
 80081e8:	f001 f8b2 	bl	8009350 <_dtoa_r>
 80081ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80081f0:	4605      	mov	r5, r0
 80081f2:	d119      	bne.n	8008228 <__cvt+0x94>
 80081f4:	f019 0f01 	tst.w	r9, #1
 80081f8:	d00e      	beq.n	8008218 <__cvt+0x84>
 80081fa:	eb00 0904 	add.w	r9, r0, r4
 80081fe:	2200      	movs	r2, #0
 8008200:	2300      	movs	r3, #0
 8008202:	4630      	mov	r0, r6
 8008204:	4639      	mov	r1, r7
 8008206:	f7f8 fc67 	bl	8000ad8 <__aeabi_dcmpeq>
 800820a:	b108      	cbz	r0, 8008210 <__cvt+0x7c>
 800820c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008210:	2230      	movs	r2, #48	@ 0x30
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	454b      	cmp	r3, r9
 8008216:	d31e      	bcc.n	8008256 <__cvt+0xc2>
 8008218:	9b03      	ldr	r3, [sp, #12]
 800821a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800821c:	1b5b      	subs	r3, r3, r5
 800821e:	4628      	mov	r0, r5
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	b004      	add	sp, #16
 8008224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008228:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800822c:	eb00 0904 	add.w	r9, r0, r4
 8008230:	d1e5      	bne.n	80081fe <__cvt+0x6a>
 8008232:	7803      	ldrb	r3, [r0, #0]
 8008234:	2b30      	cmp	r3, #48	@ 0x30
 8008236:	d10a      	bne.n	800824e <__cvt+0xba>
 8008238:	2200      	movs	r2, #0
 800823a:	2300      	movs	r3, #0
 800823c:	4630      	mov	r0, r6
 800823e:	4639      	mov	r1, r7
 8008240:	f7f8 fc4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008244:	b918      	cbnz	r0, 800824e <__cvt+0xba>
 8008246:	f1c4 0401 	rsb	r4, r4, #1
 800824a:	f8ca 4000 	str.w	r4, [sl]
 800824e:	f8da 3000 	ldr.w	r3, [sl]
 8008252:	4499      	add	r9, r3
 8008254:	e7d3      	b.n	80081fe <__cvt+0x6a>
 8008256:	1c59      	adds	r1, r3, #1
 8008258:	9103      	str	r1, [sp, #12]
 800825a:	701a      	strb	r2, [r3, #0]
 800825c:	e7d9      	b.n	8008212 <__cvt+0x7e>

0800825e <__exponent>:
 800825e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008260:	2900      	cmp	r1, #0
 8008262:	bfba      	itte	lt
 8008264:	4249      	neglt	r1, r1
 8008266:	232d      	movlt	r3, #45	@ 0x2d
 8008268:	232b      	movge	r3, #43	@ 0x2b
 800826a:	2909      	cmp	r1, #9
 800826c:	7002      	strb	r2, [r0, #0]
 800826e:	7043      	strb	r3, [r0, #1]
 8008270:	dd29      	ble.n	80082c6 <__exponent+0x68>
 8008272:	f10d 0307 	add.w	r3, sp, #7
 8008276:	461d      	mov	r5, r3
 8008278:	270a      	movs	r7, #10
 800827a:	461a      	mov	r2, r3
 800827c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008280:	fb07 1416 	mls	r4, r7, r6, r1
 8008284:	3430      	adds	r4, #48	@ 0x30
 8008286:	f802 4c01 	strb.w	r4, [r2, #-1]
 800828a:	460c      	mov	r4, r1
 800828c:	2c63      	cmp	r4, #99	@ 0x63
 800828e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008292:	4631      	mov	r1, r6
 8008294:	dcf1      	bgt.n	800827a <__exponent+0x1c>
 8008296:	3130      	adds	r1, #48	@ 0x30
 8008298:	1e94      	subs	r4, r2, #2
 800829a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800829e:	1c41      	adds	r1, r0, #1
 80082a0:	4623      	mov	r3, r4
 80082a2:	42ab      	cmp	r3, r5
 80082a4:	d30a      	bcc.n	80082bc <__exponent+0x5e>
 80082a6:	f10d 0309 	add.w	r3, sp, #9
 80082aa:	1a9b      	subs	r3, r3, r2
 80082ac:	42ac      	cmp	r4, r5
 80082ae:	bf88      	it	hi
 80082b0:	2300      	movhi	r3, #0
 80082b2:	3302      	adds	r3, #2
 80082b4:	4403      	add	r3, r0
 80082b6:	1a18      	subs	r0, r3, r0
 80082b8:	b003      	add	sp, #12
 80082ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80082c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80082c4:	e7ed      	b.n	80082a2 <__exponent+0x44>
 80082c6:	2330      	movs	r3, #48	@ 0x30
 80082c8:	3130      	adds	r1, #48	@ 0x30
 80082ca:	7083      	strb	r3, [r0, #2]
 80082cc:	70c1      	strb	r1, [r0, #3]
 80082ce:	1d03      	adds	r3, r0, #4
 80082d0:	e7f1      	b.n	80082b6 <__exponent+0x58>
	...

080082d4 <_printf_float>:
 80082d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d8:	b08d      	sub	sp, #52	@ 0x34
 80082da:	460c      	mov	r4, r1
 80082dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80082e0:	4616      	mov	r6, r2
 80082e2:	461f      	mov	r7, r3
 80082e4:	4605      	mov	r5, r0
 80082e6:	f000 ff1f 	bl	8009128 <_localeconv_r>
 80082ea:	6803      	ldr	r3, [r0, #0]
 80082ec:	9304      	str	r3, [sp, #16]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7f7 ffc6 	bl	8000280 <strlen>
 80082f4:	2300      	movs	r3, #0
 80082f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082f8:	f8d8 3000 	ldr.w	r3, [r8]
 80082fc:	9005      	str	r0, [sp, #20]
 80082fe:	3307      	adds	r3, #7
 8008300:	f023 0307 	bic.w	r3, r3, #7
 8008304:	f103 0208 	add.w	r2, r3, #8
 8008308:	f894 a018 	ldrb.w	sl, [r4, #24]
 800830c:	f8d4 b000 	ldr.w	fp, [r4]
 8008310:	f8c8 2000 	str.w	r2, [r8]
 8008314:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008318:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800831c:	9307      	str	r3, [sp, #28]
 800831e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008322:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800832a:	4b9c      	ldr	r3, [pc, #624]	@ (800859c <_printf_float+0x2c8>)
 800832c:	f04f 32ff 	mov.w	r2, #4294967295
 8008330:	f7f8 fc04 	bl	8000b3c <__aeabi_dcmpun>
 8008334:	bb70      	cbnz	r0, 8008394 <_printf_float+0xc0>
 8008336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800833a:	4b98      	ldr	r3, [pc, #608]	@ (800859c <_printf_float+0x2c8>)
 800833c:	f04f 32ff 	mov.w	r2, #4294967295
 8008340:	f7f8 fbde 	bl	8000b00 <__aeabi_dcmple>
 8008344:	bb30      	cbnz	r0, 8008394 <_printf_float+0xc0>
 8008346:	2200      	movs	r2, #0
 8008348:	2300      	movs	r3, #0
 800834a:	4640      	mov	r0, r8
 800834c:	4649      	mov	r1, r9
 800834e:	f7f8 fbcd 	bl	8000aec <__aeabi_dcmplt>
 8008352:	b110      	cbz	r0, 800835a <_printf_float+0x86>
 8008354:	232d      	movs	r3, #45	@ 0x2d
 8008356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800835a:	4a91      	ldr	r2, [pc, #580]	@ (80085a0 <_printf_float+0x2cc>)
 800835c:	4b91      	ldr	r3, [pc, #580]	@ (80085a4 <_printf_float+0x2d0>)
 800835e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008362:	bf8c      	ite	hi
 8008364:	4690      	movhi	r8, r2
 8008366:	4698      	movls	r8, r3
 8008368:	2303      	movs	r3, #3
 800836a:	6123      	str	r3, [r4, #16]
 800836c:	f02b 0304 	bic.w	r3, fp, #4
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	f04f 0900 	mov.w	r9, #0
 8008376:	9700      	str	r7, [sp, #0]
 8008378:	4633      	mov	r3, r6
 800837a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800837c:	4621      	mov	r1, r4
 800837e:	4628      	mov	r0, r5
 8008380:	f000 f9d2 	bl	8008728 <_printf_common>
 8008384:	3001      	adds	r0, #1
 8008386:	f040 808d 	bne.w	80084a4 <_printf_float+0x1d0>
 800838a:	f04f 30ff 	mov.w	r0, #4294967295
 800838e:	b00d      	add	sp, #52	@ 0x34
 8008390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008394:	4642      	mov	r2, r8
 8008396:	464b      	mov	r3, r9
 8008398:	4640      	mov	r0, r8
 800839a:	4649      	mov	r1, r9
 800839c:	f7f8 fbce 	bl	8000b3c <__aeabi_dcmpun>
 80083a0:	b140      	cbz	r0, 80083b4 <_printf_float+0xe0>
 80083a2:	464b      	mov	r3, r9
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	bfbc      	itt	lt
 80083a8:	232d      	movlt	r3, #45	@ 0x2d
 80083aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80083ae:	4a7e      	ldr	r2, [pc, #504]	@ (80085a8 <_printf_float+0x2d4>)
 80083b0:	4b7e      	ldr	r3, [pc, #504]	@ (80085ac <_printf_float+0x2d8>)
 80083b2:	e7d4      	b.n	800835e <_printf_float+0x8a>
 80083b4:	6863      	ldr	r3, [r4, #4]
 80083b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80083ba:	9206      	str	r2, [sp, #24]
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	d13b      	bne.n	8008438 <_printf_float+0x164>
 80083c0:	2306      	movs	r3, #6
 80083c2:	6063      	str	r3, [r4, #4]
 80083c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80083c8:	2300      	movs	r3, #0
 80083ca:	6022      	str	r2, [r4, #0]
 80083cc:	9303      	str	r3, [sp, #12]
 80083ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80083d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80083d4:	ab09      	add	r3, sp, #36	@ 0x24
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	6861      	ldr	r1, [r4, #4]
 80083da:	ec49 8b10 	vmov	d0, r8, r9
 80083de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80083e2:	4628      	mov	r0, r5
 80083e4:	f7ff fed6 	bl	8008194 <__cvt>
 80083e8:	9b06      	ldr	r3, [sp, #24]
 80083ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083ec:	2b47      	cmp	r3, #71	@ 0x47
 80083ee:	4680      	mov	r8, r0
 80083f0:	d129      	bne.n	8008446 <_printf_float+0x172>
 80083f2:	1cc8      	adds	r0, r1, #3
 80083f4:	db02      	blt.n	80083fc <_printf_float+0x128>
 80083f6:	6863      	ldr	r3, [r4, #4]
 80083f8:	4299      	cmp	r1, r3
 80083fa:	dd41      	ble.n	8008480 <_printf_float+0x1ac>
 80083fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8008400:	fa5f fa8a 	uxtb.w	sl, sl
 8008404:	3901      	subs	r1, #1
 8008406:	4652      	mov	r2, sl
 8008408:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800840c:	9109      	str	r1, [sp, #36]	@ 0x24
 800840e:	f7ff ff26 	bl	800825e <__exponent>
 8008412:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008414:	1813      	adds	r3, r2, r0
 8008416:	2a01      	cmp	r2, #1
 8008418:	4681      	mov	r9, r0
 800841a:	6123      	str	r3, [r4, #16]
 800841c:	dc02      	bgt.n	8008424 <_printf_float+0x150>
 800841e:	6822      	ldr	r2, [r4, #0]
 8008420:	07d2      	lsls	r2, r2, #31
 8008422:	d501      	bpl.n	8008428 <_printf_float+0x154>
 8008424:	3301      	adds	r3, #1
 8008426:	6123      	str	r3, [r4, #16]
 8008428:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0a2      	beq.n	8008376 <_printf_float+0xa2>
 8008430:	232d      	movs	r3, #45	@ 0x2d
 8008432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008436:	e79e      	b.n	8008376 <_printf_float+0xa2>
 8008438:	9a06      	ldr	r2, [sp, #24]
 800843a:	2a47      	cmp	r2, #71	@ 0x47
 800843c:	d1c2      	bne.n	80083c4 <_printf_float+0xf0>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1c0      	bne.n	80083c4 <_printf_float+0xf0>
 8008442:	2301      	movs	r3, #1
 8008444:	e7bd      	b.n	80083c2 <_printf_float+0xee>
 8008446:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800844a:	d9db      	bls.n	8008404 <_printf_float+0x130>
 800844c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008450:	d118      	bne.n	8008484 <_printf_float+0x1b0>
 8008452:	2900      	cmp	r1, #0
 8008454:	6863      	ldr	r3, [r4, #4]
 8008456:	dd0b      	ble.n	8008470 <_printf_float+0x19c>
 8008458:	6121      	str	r1, [r4, #16]
 800845a:	b913      	cbnz	r3, 8008462 <_printf_float+0x18e>
 800845c:	6822      	ldr	r2, [r4, #0]
 800845e:	07d0      	lsls	r0, r2, #31
 8008460:	d502      	bpl.n	8008468 <_printf_float+0x194>
 8008462:	3301      	adds	r3, #1
 8008464:	440b      	add	r3, r1
 8008466:	6123      	str	r3, [r4, #16]
 8008468:	65a1      	str	r1, [r4, #88]	@ 0x58
 800846a:	f04f 0900 	mov.w	r9, #0
 800846e:	e7db      	b.n	8008428 <_printf_float+0x154>
 8008470:	b913      	cbnz	r3, 8008478 <_printf_float+0x1a4>
 8008472:	6822      	ldr	r2, [r4, #0]
 8008474:	07d2      	lsls	r2, r2, #31
 8008476:	d501      	bpl.n	800847c <_printf_float+0x1a8>
 8008478:	3302      	adds	r3, #2
 800847a:	e7f4      	b.n	8008466 <_printf_float+0x192>
 800847c:	2301      	movs	r3, #1
 800847e:	e7f2      	b.n	8008466 <_printf_float+0x192>
 8008480:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008486:	4299      	cmp	r1, r3
 8008488:	db05      	blt.n	8008496 <_printf_float+0x1c2>
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	6121      	str	r1, [r4, #16]
 800848e:	07d8      	lsls	r0, r3, #31
 8008490:	d5ea      	bpl.n	8008468 <_printf_float+0x194>
 8008492:	1c4b      	adds	r3, r1, #1
 8008494:	e7e7      	b.n	8008466 <_printf_float+0x192>
 8008496:	2900      	cmp	r1, #0
 8008498:	bfd4      	ite	le
 800849a:	f1c1 0202 	rsble	r2, r1, #2
 800849e:	2201      	movgt	r2, #1
 80084a0:	4413      	add	r3, r2
 80084a2:	e7e0      	b.n	8008466 <_printf_float+0x192>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	055a      	lsls	r2, r3, #21
 80084a8:	d407      	bmi.n	80084ba <_printf_float+0x1e6>
 80084aa:	6923      	ldr	r3, [r4, #16]
 80084ac:	4642      	mov	r2, r8
 80084ae:	4631      	mov	r1, r6
 80084b0:	4628      	mov	r0, r5
 80084b2:	47b8      	blx	r7
 80084b4:	3001      	adds	r0, #1
 80084b6:	d12b      	bne.n	8008510 <_printf_float+0x23c>
 80084b8:	e767      	b.n	800838a <_printf_float+0xb6>
 80084ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084be:	f240 80dd 	bls.w	800867c <_printf_float+0x3a8>
 80084c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084c6:	2200      	movs	r2, #0
 80084c8:	2300      	movs	r3, #0
 80084ca:	f7f8 fb05 	bl	8000ad8 <__aeabi_dcmpeq>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d033      	beq.n	800853a <_printf_float+0x266>
 80084d2:	4a37      	ldr	r2, [pc, #220]	@ (80085b0 <_printf_float+0x2dc>)
 80084d4:	2301      	movs	r3, #1
 80084d6:	4631      	mov	r1, r6
 80084d8:	4628      	mov	r0, r5
 80084da:	47b8      	blx	r7
 80084dc:	3001      	adds	r0, #1
 80084de:	f43f af54 	beq.w	800838a <_printf_float+0xb6>
 80084e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80084e6:	4543      	cmp	r3, r8
 80084e8:	db02      	blt.n	80084f0 <_printf_float+0x21c>
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	07d8      	lsls	r0, r3, #31
 80084ee:	d50f      	bpl.n	8008510 <_printf_float+0x23c>
 80084f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084f4:	4631      	mov	r1, r6
 80084f6:	4628      	mov	r0, r5
 80084f8:	47b8      	blx	r7
 80084fa:	3001      	adds	r0, #1
 80084fc:	f43f af45 	beq.w	800838a <_printf_float+0xb6>
 8008500:	f04f 0900 	mov.w	r9, #0
 8008504:	f108 38ff 	add.w	r8, r8, #4294967295
 8008508:	f104 0a1a 	add.w	sl, r4, #26
 800850c:	45c8      	cmp	r8, r9
 800850e:	dc09      	bgt.n	8008524 <_printf_float+0x250>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	079b      	lsls	r3, r3, #30
 8008514:	f100 8103 	bmi.w	800871e <_printf_float+0x44a>
 8008518:	68e0      	ldr	r0, [r4, #12]
 800851a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800851c:	4298      	cmp	r0, r3
 800851e:	bfb8      	it	lt
 8008520:	4618      	movlt	r0, r3
 8008522:	e734      	b.n	800838e <_printf_float+0xba>
 8008524:	2301      	movs	r3, #1
 8008526:	4652      	mov	r2, sl
 8008528:	4631      	mov	r1, r6
 800852a:	4628      	mov	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	f43f af2b 	beq.w	800838a <_printf_float+0xb6>
 8008534:	f109 0901 	add.w	r9, r9, #1
 8008538:	e7e8      	b.n	800850c <_printf_float+0x238>
 800853a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	dc39      	bgt.n	80085b4 <_printf_float+0x2e0>
 8008540:	4a1b      	ldr	r2, [pc, #108]	@ (80085b0 <_printf_float+0x2dc>)
 8008542:	2301      	movs	r3, #1
 8008544:	4631      	mov	r1, r6
 8008546:	4628      	mov	r0, r5
 8008548:	47b8      	blx	r7
 800854a:	3001      	adds	r0, #1
 800854c:	f43f af1d 	beq.w	800838a <_printf_float+0xb6>
 8008550:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008554:	ea59 0303 	orrs.w	r3, r9, r3
 8008558:	d102      	bne.n	8008560 <_printf_float+0x28c>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	07d9      	lsls	r1, r3, #31
 800855e:	d5d7      	bpl.n	8008510 <_printf_float+0x23c>
 8008560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008564:	4631      	mov	r1, r6
 8008566:	4628      	mov	r0, r5
 8008568:	47b8      	blx	r7
 800856a:	3001      	adds	r0, #1
 800856c:	f43f af0d 	beq.w	800838a <_printf_float+0xb6>
 8008570:	f04f 0a00 	mov.w	sl, #0
 8008574:	f104 0b1a 	add.w	fp, r4, #26
 8008578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800857a:	425b      	negs	r3, r3
 800857c:	4553      	cmp	r3, sl
 800857e:	dc01      	bgt.n	8008584 <_printf_float+0x2b0>
 8008580:	464b      	mov	r3, r9
 8008582:	e793      	b.n	80084ac <_printf_float+0x1d8>
 8008584:	2301      	movs	r3, #1
 8008586:	465a      	mov	r2, fp
 8008588:	4631      	mov	r1, r6
 800858a:	4628      	mov	r0, r5
 800858c:	47b8      	blx	r7
 800858e:	3001      	adds	r0, #1
 8008590:	f43f aefb 	beq.w	800838a <_printf_float+0xb6>
 8008594:	f10a 0a01 	add.w	sl, sl, #1
 8008598:	e7ee      	b.n	8008578 <_printf_float+0x2a4>
 800859a:	bf00      	nop
 800859c:	7fefffff 	.word	0x7fefffff
 80085a0:	0800c9f4 	.word	0x0800c9f4
 80085a4:	0800c9f0 	.word	0x0800c9f0
 80085a8:	0800c9fc 	.word	0x0800c9fc
 80085ac:	0800c9f8 	.word	0x0800c9f8
 80085b0:	0800ca00 	.word	0x0800ca00
 80085b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085ba:	4553      	cmp	r3, sl
 80085bc:	bfa8      	it	ge
 80085be:	4653      	movge	r3, sl
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	4699      	mov	r9, r3
 80085c4:	dc36      	bgt.n	8008634 <_printf_float+0x360>
 80085c6:	f04f 0b00 	mov.w	fp, #0
 80085ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085ce:	f104 021a 	add.w	r2, r4, #26
 80085d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085d4:	9306      	str	r3, [sp, #24]
 80085d6:	eba3 0309 	sub.w	r3, r3, r9
 80085da:	455b      	cmp	r3, fp
 80085dc:	dc31      	bgt.n	8008642 <_printf_float+0x36e>
 80085de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e0:	459a      	cmp	sl, r3
 80085e2:	dc3a      	bgt.n	800865a <_printf_float+0x386>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	07da      	lsls	r2, r3, #31
 80085e8:	d437      	bmi.n	800865a <_printf_float+0x386>
 80085ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ec:	ebaa 0903 	sub.w	r9, sl, r3
 80085f0:	9b06      	ldr	r3, [sp, #24]
 80085f2:	ebaa 0303 	sub.w	r3, sl, r3
 80085f6:	4599      	cmp	r9, r3
 80085f8:	bfa8      	it	ge
 80085fa:	4699      	movge	r9, r3
 80085fc:	f1b9 0f00 	cmp.w	r9, #0
 8008600:	dc33      	bgt.n	800866a <_printf_float+0x396>
 8008602:	f04f 0800 	mov.w	r8, #0
 8008606:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800860a:	f104 0b1a 	add.w	fp, r4, #26
 800860e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008610:	ebaa 0303 	sub.w	r3, sl, r3
 8008614:	eba3 0309 	sub.w	r3, r3, r9
 8008618:	4543      	cmp	r3, r8
 800861a:	f77f af79 	ble.w	8008510 <_printf_float+0x23c>
 800861e:	2301      	movs	r3, #1
 8008620:	465a      	mov	r2, fp
 8008622:	4631      	mov	r1, r6
 8008624:	4628      	mov	r0, r5
 8008626:	47b8      	blx	r7
 8008628:	3001      	adds	r0, #1
 800862a:	f43f aeae 	beq.w	800838a <_printf_float+0xb6>
 800862e:	f108 0801 	add.w	r8, r8, #1
 8008632:	e7ec      	b.n	800860e <_printf_float+0x33a>
 8008634:	4642      	mov	r2, r8
 8008636:	4631      	mov	r1, r6
 8008638:	4628      	mov	r0, r5
 800863a:	47b8      	blx	r7
 800863c:	3001      	adds	r0, #1
 800863e:	d1c2      	bne.n	80085c6 <_printf_float+0x2f2>
 8008640:	e6a3      	b.n	800838a <_printf_float+0xb6>
 8008642:	2301      	movs	r3, #1
 8008644:	4631      	mov	r1, r6
 8008646:	4628      	mov	r0, r5
 8008648:	9206      	str	r2, [sp, #24]
 800864a:	47b8      	blx	r7
 800864c:	3001      	adds	r0, #1
 800864e:	f43f ae9c 	beq.w	800838a <_printf_float+0xb6>
 8008652:	9a06      	ldr	r2, [sp, #24]
 8008654:	f10b 0b01 	add.w	fp, fp, #1
 8008658:	e7bb      	b.n	80085d2 <_printf_float+0x2fe>
 800865a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800865e:	4631      	mov	r1, r6
 8008660:	4628      	mov	r0, r5
 8008662:	47b8      	blx	r7
 8008664:	3001      	adds	r0, #1
 8008666:	d1c0      	bne.n	80085ea <_printf_float+0x316>
 8008668:	e68f      	b.n	800838a <_printf_float+0xb6>
 800866a:	9a06      	ldr	r2, [sp, #24]
 800866c:	464b      	mov	r3, r9
 800866e:	4442      	add	r2, r8
 8008670:	4631      	mov	r1, r6
 8008672:	4628      	mov	r0, r5
 8008674:	47b8      	blx	r7
 8008676:	3001      	adds	r0, #1
 8008678:	d1c3      	bne.n	8008602 <_printf_float+0x32e>
 800867a:	e686      	b.n	800838a <_printf_float+0xb6>
 800867c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008680:	f1ba 0f01 	cmp.w	sl, #1
 8008684:	dc01      	bgt.n	800868a <_printf_float+0x3b6>
 8008686:	07db      	lsls	r3, r3, #31
 8008688:	d536      	bpl.n	80086f8 <_printf_float+0x424>
 800868a:	2301      	movs	r3, #1
 800868c:	4642      	mov	r2, r8
 800868e:	4631      	mov	r1, r6
 8008690:	4628      	mov	r0, r5
 8008692:	47b8      	blx	r7
 8008694:	3001      	adds	r0, #1
 8008696:	f43f ae78 	beq.w	800838a <_printf_float+0xb6>
 800869a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800869e:	4631      	mov	r1, r6
 80086a0:	4628      	mov	r0, r5
 80086a2:	47b8      	blx	r7
 80086a4:	3001      	adds	r0, #1
 80086a6:	f43f ae70 	beq.w	800838a <_printf_float+0xb6>
 80086aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086ae:	2200      	movs	r2, #0
 80086b0:	2300      	movs	r3, #0
 80086b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086b6:	f7f8 fa0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80086ba:	b9c0      	cbnz	r0, 80086ee <_printf_float+0x41a>
 80086bc:	4653      	mov	r3, sl
 80086be:	f108 0201 	add.w	r2, r8, #1
 80086c2:	4631      	mov	r1, r6
 80086c4:	4628      	mov	r0, r5
 80086c6:	47b8      	blx	r7
 80086c8:	3001      	adds	r0, #1
 80086ca:	d10c      	bne.n	80086e6 <_printf_float+0x412>
 80086cc:	e65d      	b.n	800838a <_printf_float+0xb6>
 80086ce:	2301      	movs	r3, #1
 80086d0:	465a      	mov	r2, fp
 80086d2:	4631      	mov	r1, r6
 80086d4:	4628      	mov	r0, r5
 80086d6:	47b8      	blx	r7
 80086d8:	3001      	adds	r0, #1
 80086da:	f43f ae56 	beq.w	800838a <_printf_float+0xb6>
 80086de:	f108 0801 	add.w	r8, r8, #1
 80086e2:	45d0      	cmp	r8, sl
 80086e4:	dbf3      	blt.n	80086ce <_printf_float+0x3fa>
 80086e6:	464b      	mov	r3, r9
 80086e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80086ec:	e6df      	b.n	80084ae <_printf_float+0x1da>
 80086ee:	f04f 0800 	mov.w	r8, #0
 80086f2:	f104 0b1a 	add.w	fp, r4, #26
 80086f6:	e7f4      	b.n	80086e2 <_printf_float+0x40e>
 80086f8:	2301      	movs	r3, #1
 80086fa:	4642      	mov	r2, r8
 80086fc:	e7e1      	b.n	80086c2 <_printf_float+0x3ee>
 80086fe:	2301      	movs	r3, #1
 8008700:	464a      	mov	r2, r9
 8008702:	4631      	mov	r1, r6
 8008704:	4628      	mov	r0, r5
 8008706:	47b8      	blx	r7
 8008708:	3001      	adds	r0, #1
 800870a:	f43f ae3e 	beq.w	800838a <_printf_float+0xb6>
 800870e:	f108 0801 	add.w	r8, r8, #1
 8008712:	68e3      	ldr	r3, [r4, #12]
 8008714:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008716:	1a5b      	subs	r3, r3, r1
 8008718:	4543      	cmp	r3, r8
 800871a:	dcf0      	bgt.n	80086fe <_printf_float+0x42a>
 800871c:	e6fc      	b.n	8008518 <_printf_float+0x244>
 800871e:	f04f 0800 	mov.w	r8, #0
 8008722:	f104 0919 	add.w	r9, r4, #25
 8008726:	e7f4      	b.n	8008712 <_printf_float+0x43e>

08008728 <_printf_common>:
 8008728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800872c:	4616      	mov	r6, r2
 800872e:	4698      	mov	r8, r3
 8008730:	688a      	ldr	r2, [r1, #8]
 8008732:	690b      	ldr	r3, [r1, #16]
 8008734:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008738:	4293      	cmp	r3, r2
 800873a:	bfb8      	it	lt
 800873c:	4613      	movlt	r3, r2
 800873e:	6033      	str	r3, [r6, #0]
 8008740:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008744:	4607      	mov	r7, r0
 8008746:	460c      	mov	r4, r1
 8008748:	b10a      	cbz	r2, 800874e <_printf_common+0x26>
 800874a:	3301      	adds	r3, #1
 800874c:	6033      	str	r3, [r6, #0]
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	0699      	lsls	r1, r3, #26
 8008752:	bf42      	ittt	mi
 8008754:	6833      	ldrmi	r3, [r6, #0]
 8008756:	3302      	addmi	r3, #2
 8008758:	6033      	strmi	r3, [r6, #0]
 800875a:	6825      	ldr	r5, [r4, #0]
 800875c:	f015 0506 	ands.w	r5, r5, #6
 8008760:	d106      	bne.n	8008770 <_printf_common+0x48>
 8008762:	f104 0a19 	add.w	sl, r4, #25
 8008766:	68e3      	ldr	r3, [r4, #12]
 8008768:	6832      	ldr	r2, [r6, #0]
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	42ab      	cmp	r3, r5
 800876e:	dc26      	bgt.n	80087be <_printf_common+0x96>
 8008770:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008774:	6822      	ldr	r2, [r4, #0]
 8008776:	3b00      	subs	r3, #0
 8008778:	bf18      	it	ne
 800877a:	2301      	movne	r3, #1
 800877c:	0692      	lsls	r2, r2, #26
 800877e:	d42b      	bmi.n	80087d8 <_printf_common+0xb0>
 8008780:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008784:	4641      	mov	r1, r8
 8008786:	4638      	mov	r0, r7
 8008788:	47c8      	blx	r9
 800878a:	3001      	adds	r0, #1
 800878c:	d01e      	beq.n	80087cc <_printf_common+0xa4>
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	6922      	ldr	r2, [r4, #16]
 8008792:	f003 0306 	and.w	r3, r3, #6
 8008796:	2b04      	cmp	r3, #4
 8008798:	bf02      	ittt	eq
 800879a:	68e5      	ldreq	r5, [r4, #12]
 800879c:	6833      	ldreq	r3, [r6, #0]
 800879e:	1aed      	subeq	r5, r5, r3
 80087a0:	68a3      	ldr	r3, [r4, #8]
 80087a2:	bf0c      	ite	eq
 80087a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087a8:	2500      	movne	r5, #0
 80087aa:	4293      	cmp	r3, r2
 80087ac:	bfc4      	itt	gt
 80087ae:	1a9b      	subgt	r3, r3, r2
 80087b0:	18ed      	addgt	r5, r5, r3
 80087b2:	2600      	movs	r6, #0
 80087b4:	341a      	adds	r4, #26
 80087b6:	42b5      	cmp	r5, r6
 80087b8:	d11a      	bne.n	80087f0 <_printf_common+0xc8>
 80087ba:	2000      	movs	r0, #0
 80087bc:	e008      	b.n	80087d0 <_printf_common+0xa8>
 80087be:	2301      	movs	r3, #1
 80087c0:	4652      	mov	r2, sl
 80087c2:	4641      	mov	r1, r8
 80087c4:	4638      	mov	r0, r7
 80087c6:	47c8      	blx	r9
 80087c8:	3001      	adds	r0, #1
 80087ca:	d103      	bne.n	80087d4 <_printf_common+0xac>
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295
 80087d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d4:	3501      	adds	r5, #1
 80087d6:	e7c6      	b.n	8008766 <_printf_common+0x3e>
 80087d8:	18e1      	adds	r1, r4, r3
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	2030      	movs	r0, #48	@ 0x30
 80087de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087e2:	4422      	add	r2, r4
 80087e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087ec:	3302      	adds	r3, #2
 80087ee:	e7c7      	b.n	8008780 <_printf_common+0x58>
 80087f0:	2301      	movs	r3, #1
 80087f2:	4622      	mov	r2, r4
 80087f4:	4641      	mov	r1, r8
 80087f6:	4638      	mov	r0, r7
 80087f8:	47c8      	blx	r9
 80087fa:	3001      	adds	r0, #1
 80087fc:	d0e6      	beq.n	80087cc <_printf_common+0xa4>
 80087fe:	3601      	adds	r6, #1
 8008800:	e7d9      	b.n	80087b6 <_printf_common+0x8e>
	...

08008804 <_printf_i>:
 8008804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008808:	7e0f      	ldrb	r7, [r1, #24]
 800880a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800880c:	2f78      	cmp	r7, #120	@ 0x78
 800880e:	4691      	mov	r9, r2
 8008810:	4680      	mov	r8, r0
 8008812:	460c      	mov	r4, r1
 8008814:	469a      	mov	sl, r3
 8008816:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800881a:	d807      	bhi.n	800882c <_printf_i+0x28>
 800881c:	2f62      	cmp	r7, #98	@ 0x62
 800881e:	d80a      	bhi.n	8008836 <_printf_i+0x32>
 8008820:	2f00      	cmp	r7, #0
 8008822:	f000 80d1 	beq.w	80089c8 <_printf_i+0x1c4>
 8008826:	2f58      	cmp	r7, #88	@ 0x58
 8008828:	f000 80b8 	beq.w	800899c <_printf_i+0x198>
 800882c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008830:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008834:	e03a      	b.n	80088ac <_printf_i+0xa8>
 8008836:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800883a:	2b15      	cmp	r3, #21
 800883c:	d8f6      	bhi.n	800882c <_printf_i+0x28>
 800883e:	a101      	add	r1, pc, #4	@ (adr r1, 8008844 <_printf_i+0x40>)
 8008840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008844:	0800889d 	.word	0x0800889d
 8008848:	080088b1 	.word	0x080088b1
 800884c:	0800882d 	.word	0x0800882d
 8008850:	0800882d 	.word	0x0800882d
 8008854:	0800882d 	.word	0x0800882d
 8008858:	0800882d 	.word	0x0800882d
 800885c:	080088b1 	.word	0x080088b1
 8008860:	0800882d 	.word	0x0800882d
 8008864:	0800882d 	.word	0x0800882d
 8008868:	0800882d 	.word	0x0800882d
 800886c:	0800882d 	.word	0x0800882d
 8008870:	080089af 	.word	0x080089af
 8008874:	080088db 	.word	0x080088db
 8008878:	08008969 	.word	0x08008969
 800887c:	0800882d 	.word	0x0800882d
 8008880:	0800882d 	.word	0x0800882d
 8008884:	080089d1 	.word	0x080089d1
 8008888:	0800882d 	.word	0x0800882d
 800888c:	080088db 	.word	0x080088db
 8008890:	0800882d 	.word	0x0800882d
 8008894:	0800882d 	.word	0x0800882d
 8008898:	08008971 	.word	0x08008971
 800889c:	6833      	ldr	r3, [r6, #0]
 800889e:	1d1a      	adds	r2, r3, #4
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6032      	str	r2, [r6, #0]
 80088a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088ac:	2301      	movs	r3, #1
 80088ae:	e09c      	b.n	80089ea <_printf_i+0x1e6>
 80088b0:	6833      	ldr	r3, [r6, #0]
 80088b2:	6820      	ldr	r0, [r4, #0]
 80088b4:	1d19      	adds	r1, r3, #4
 80088b6:	6031      	str	r1, [r6, #0]
 80088b8:	0606      	lsls	r6, r0, #24
 80088ba:	d501      	bpl.n	80088c0 <_printf_i+0xbc>
 80088bc:	681d      	ldr	r5, [r3, #0]
 80088be:	e003      	b.n	80088c8 <_printf_i+0xc4>
 80088c0:	0645      	lsls	r5, r0, #25
 80088c2:	d5fb      	bpl.n	80088bc <_printf_i+0xb8>
 80088c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088c8:	2d00      	cmp	r5, #0
 80088ca:	da03      	bge.n	80088d4 <_printf_i+0xd0>
 80088cc:	232d      	movs	r3, #45	@ 0x2d
 80088ce:	426d      	negs	r5, r5
 80088d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088d4:	4858      	ldr	r0, [pc, #352]	@ (8008a38 <_printf_i+0x234>)
 80088d6:	230a      	movs	r3, #10
 80088d8:	e011      	b.n	80088fe <_printf_i+0xfa>
 80088da:	6821      	ldr	r1, [r4, #0]
 80088dc:	6833      	ldr	r3, [r6, #0]
 80088de:	0608      	lsls	r0, r1, #24
 80088e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80088e4:	d402      	bmi.n	80088ec <_printf_i+0xe8>
 80088e6:	0649      	lsls	r1, r1, #25
 80088e8:	bf48      	it	mi
 80088ea:	b2ad      	uxthmi	r5, r5
 80088ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80088ee:	4852      	ldr	r0, [pc, #328]	@ (8008a38 <_printf_i+0x234>)
 80088f0:	6033      	str	r3, [r6, #0]
 80088f2:	bf14      	ite	ne
 80088f4:	230a      	movne	r3, #10
 80088f6:	2308      	moveq	r3, #8
 80088f8:	2100      	movs	r1, #0
 80088fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088fe:	6866      	ldr	r6, [r4, #4]
 8008900:	60a6      	str	r6, [r4, #8]
 8008902:	2e00      	cmp	r6, #0
 8008904:	db05      	blt.n	8008912 <_printf_i+0x10e>
 8008906:	6821      	ldr	r1, [r4, #0]
 8008908:	432e      	orrs	r6, r5
 800890a:	f021 0104 	bic.w	r1, r1, #4
 800890e:	6021      	str	r1, [r4, #0]
 8008910:	d04b      	beq.n	80089aa <_printf_i+0x1a6>
 8008912:	4616      	mov	r6, r2
 8008914:	fbb5 f1f3 	udiv	r1, r5, r3
 8008918:	fb03 5711 	mls	r7, r3, r1, r5
 800891c:	5dc7      	ldrb	r7, [r0, r7]
 800891e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008922:	462f      	mov	r7, r5
 8008924:	42bb      	cmp	r3, r7
 8008926:	460d      	mov	r5, r1
 8008928:	d9f4      	bls.n	8008914 <_printf_i+0x110>
 800892a:	2b08      	cmp	r3, #8
 800892c:	d10b      	bne.n	8008946 <_printf_i+0x142>
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	07df      	lsls	r7, r3, #31
 8008932:	d508      	bpl.n	8008946 <_printf_i+0x142>
 8008934:	6923      	ldr	r3, [r4, #16]
 8008936:	6861      	ldr	r1, [r4, #4]
 8008938:	4299      	cmp	r1, r3
 800893a:	bfde      	ittt	le
 800893c:	2330      	movle	r3, #48	@ 0x30
 800893e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008942:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008946:	1b92      	subs	r2, r2, r6
 8008948:	6122      	str	r2, [r4, #16]
 800894a:	f8cd a000 	str.w	sl, [sp]
 800894e:	464b      	mov	r3, r9
 8008950:	aa03      	add	r2, sp, #12
 8008952:	4621      	mov	r1, r4
 8008954:	4640      	mov	r0, r8
 8008956:	f7ff fee7 	bl	8008728 <_printf_common>
 800895a:	3001      	adds	r0, #1
 800895c:	d14a      	bne.n	80089f4 <_printf_i+0x1f0>
 800895e:	f04f 30ff 	mov.w	r0, #4294967295
 8008962:	b004      	add	sp, #16
 8008964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	f043 0320 	orr.w	r3, r3, #32
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	4832      	ldr	r0, [pc, #200]	@ (8008a3c <_printf_i+0x238>)
 8008972:	2778      	movs	r7, #120	@ 0x78
 8008974:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	6831      	ldr	r1, [r6, #0]
 800897c:	061f      	lsls	r7, r3, #24
 800897e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008982:	d402      	bmi.n	800898a <_printf_i+0x186>
 8008984:	065f      	lsls	r7, r3, #25
 8008986:	bf48      	it	mi
 8008988:	b2ad      	uxthmi	r5, r5
 800898a:	6031      	str	r1, [r6, #0]
 800898c:	07d9      	lsls	r1, r3, #31
 800898e:	bf44      	itt	mi
 8008990:	f043 0320 	orrmi.w	r3, r3, #32
 8008994:	6023      	strmi	r3, [r4, #0]
 8008996:	b11d      	cbz	r5, 80089a0 <_printf_i+0x19c>
 8008998:	2310      	movs	r3, #16
 800899a:	e7ad      	b.n	80088f8 <_printf_i+0xf4>
 800899c:	4826      	ldr	r0, [pc, #152]	@ (8008a38 <_printf_i+0x234>)
 800899e:	e7e9      	b.n	8008974 <_printf_i+0x170>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	f023 0320 	bic.w	r3, r3, #32
 80089a6:	6023      	str	r3, [r4, #0]
 80089a8:	e7f6      	b.n	8008998 <_printf_i+0x194>
 80089aa:	4616      	mov	r6, r2
 80089ac:	e7bd      	b.n	800892a <_printf_i+0x126>
 80089ae:	6833      	ldr	r3, [r6, #0]
 80089b0:	6825      	ldr	r5, [r4, #0]
 80089b2:	6961      	ldr	r1, [r4, #20]
 80089b4:	1d18      	adds	r0, r3, #4
 80089b6:	6030      	str	r0, [r6, #0]
 80089b8:	062e      	lsls	r6, r5, #24
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	d501      	bpl.n	80089c2 <_printf_i+0x1be>
 80089be:	6019      	str	r1, [r3, #0]
 80089c0:	e002      	b.n	80089c8 <_printf_i+0x1c4>
 80089c2:	0668      	lsls	r0, r5, #25
 80089c4:	d5fb      	bpl.n	80089be <_printf_i+0x1ba>
 80089c6:	8019      	strh	r1, [r3, #0]
 80089c8:	2300      	movs	r3, #0
 80089ca:	6123      	str	r3, [r4, #16]
 80089cc:	4616      	mov	r6, r2
 80089ce:	e7bc      	b.n	800894a <_printf_i+0x146>
 80089d0:	6833      	ldr	r3, [r6, #0]
 80089d2:	1d1a      	adds	r2, r3, #4
 80089d4:	6032      	str	r2, [r6, #0]
 80089d6:	681e      	ldr	r6, [r3, #0]
 80089d8:	6862      	ldr	r2, [r4, #4]
 80089da:	2100      	movs	r1, #0
 80089dc:	4630      	mov	r0, r6
 80089de:	f7f7 fbff 	bl	80001e0 <memchr>
 80089e2:	b108      	cbz	r0, 80089e8 <_printf_i+0x1e4>
 80089e4:	1b80      	subs	r0, r0, r6
 80089e6:	6060      	str	r0, [r4, #4]
 80089e8:	6863      	ldr	r3, [r4, #4]
 80089ea:	6123      	str	r3, [r4, #16]
 80089ec:	2300      	movs	r3, #0
 80089ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089f2:	e7aa      	b.n	800894a <_printf_i+0x146>
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	4632      	mov	r2, r6
 80089f8:	4649      	mov	r1, r9
 80089fa:	4640      	mov	r0, r8
 80089fc:	47d0      	blx	sl
 80089fe:	3001      	adds	r0, #1
 8008a00:	d0ad      	beq.n	800895e <_printf_i+0x15a>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	079b      	lsls	r3, r3, #30
 8008a06:	d413      	bmi.n	8008a30 <_printf_i+0x22c>
 8008a08:	68e0      	ldr	r0, [r4, #12]
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	4298      	cmp	r0, r3
 8008a0e:	bfb8      	it	lt
 8008a10:	4618      	movlt	r0, r3
 8008a12:	e7a6      	b.n	8008962 <_printf_i+0x15e>
 8008a14:	2301      	movs	r3, #1
 8008a16:	4632      	mov	r2, r6
 8008a18:	4649      	mov	r1, r9
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	47d0      	blx	sl
 8008a1e:	3001      	adds	r0, #1
 8008a20:	d09d      	beq.n	800895e <_printf_i+0x15a>
 8008a22:	3501      	adds	r5, #1
 8008a24:	68e3      	ldr	r3, [r4, #12]
 8008a26:	9903      	ldr	r1, [sp, #12]
 8008a28:	1a5b      	subs	r3, r3, r1
 8008a2a:	42ab      	cmp	r3, r5
 8008a2c:	dcf2      	bgt.n	8008a14 <_printf_i+0x210>
 8008a2e:	e7eb      	b.n	8008a08 <_printf_i+0x204>
 8008a30:	2500      	movs	r5, #0
 8008a32:	f104 0619 	add.w	r6, r4, #25
 8008a36:	e7f5      	b.n	8008a24 <_printf_i+0x220>
 8008a38:	0800ca02 	.word	0x0800ca02
 8008a3c:	0800ca13 	.word	0x0800ca13

08008a40 <_scanf_float>:
 8008a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a44:	b087      	sub	sp, #28
 8008a46:	4691      	mov	r9, r2
 8008a48:	9303      	str	r3, [sp, #12]
 8008a4a:	688b      	ldr	r3, [r1, #8]
 8008a4c:	1e5a      	subs	r2, r3, #1
 8008a4e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008a52:	bf81      	itttt	hi
 8008a54:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008a58:	eb03 0b05 	addhi.w	fp, r3, r5
 8008a5c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008a60:	608b      	strhi	r3, [r1, #8]
 8008a62:	680b      	ldr	r3, [r1, #0]
 8008a64:	460a      	mov	r2, r1
 8008a66:	f04f 0500 	mov.w	r5, #0
 8008a6a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008a6e:	f842 3b1c 	str.w	r3, [r2], #28
 8008a72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008a76:	4680      	mov	r8, r0
 8008a78:	460c      	mov	r4, r1
 8008a7a:	bf98      	it	ls
 8008a7c:	f04f 0b00 	movls.w	fp, #0
 8008a80:	9201      	str	r2, [sp, #4]
 8008a82:	4616      	mov	r6, r2
 8008a84:	46aa      	mov	sl, r5
 8008a86:	462f      	mov	r7, r5
 8008a88:	9502      	str	r5, [sp, #8]
 8008a8a:	68a2      	ldr	r2, [r4, #8]
 8008a8c:	b15a      	cbz	r2, 8008aa6 <_scanf_float+0x66>
 8008a8e:	f8d9 3000 	ldr.w	r3, [r9]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	2b4e      	cmp	r3, #78	@ 0x4e
 8008a96:	d863      	bhi.n	8008b60 <_scanf_float+0x120>
 8008a98:	2b40      	cmp	r3, #64	@ 0x40
 8008a9a:	d83b      	bhi.n	8008b14 <_scanf_float+0xd4>
 8008a9c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008aa0:	b2c8      	uxtb	r0, r1
 8008aa2:	280e      	cmp	r0, #14
 8008aa4:	d939      	bls.n	8008b1a <_scanf_float+0xda>
 8008aa6:	b11f      	cbz	r7, 8008ab0 <_scanf_float+0x70>
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ab4:	f1ba 0f01 	cmp.w	sl, #1
 8008ab8:	f200 8114 	bhi.w	8008ce4 <_scanf_float+0x2a4>
 8008abc:	9b01      	ldr	r3, [sp, #4]
 8008abe:	429e      	cmp	r6, r3
 8008ac0:	f200 8105 	bhi.w	8008cce <_scanf_float+0x28e>
 8008ac4:	2001      	movs	r0, #1
 8008ac6:	b007      	add	sp, #28
 8008ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008acc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008ad0:	2a0d      	cmp	r2, #13
 8008ad2:	d8e8      	bhi.n	8008aa6 <_scanf_float+0x66>
 8008ad4:	a101      	add	r1, pc, #4	@ (adr r1, 8008adc <_scanf_float+0x9c>)
 8008ad6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ada:	bf00      	nop
 8008adc:	08008c25 	.word	0x08008c25
 8008ae0:	08008aa7 	.word	0x08008aa7
 8008ae4:	08008aa7 	.word	0x08008aa7
 8008ae8:	08008aa7 	.word	0x08008aa7
 8008aec:	08008c81 	.word	0x08008c81
 8008af0:	08008c5b 	.word	0x08008c5b
 8008af4:	08008aa7 	.word	0x08008aa7
 8008af8:	08008aa7 	.word	0x08008aa7
 8008afc:	08008c33 	.word	0x08008c33
 8008b00:	08008aa7 	.word	0x08008aa7
 8008b04:	08008aa7 	.word	0x08008aa7
 8008b08:	08008aa7 	.word	0x08008aa7
 8008b0c:	08008aa7 	.word	0x08008aa7
 8008b10:	08008bef 	.word	0x08008bef
 8008b14:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008b18:	e7da      	b.n	8008ad0 <_scanf_float+0x90>
 8008b1a:	290e      	cmp	r1, #14
 8008b1c:	d8c3      	bhi.n	8008aa6 <_scanf_float+0x66>
 8008b1e:	a001      	add	r0, pc, #4	@ (adr r0, 8008b24 <_scanf_float+0xe4>)
 8008b20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b24:	08008bdf 	.word	0x08008bdf
 8008b28:	08008aa7 	.word	0x08008aa7
 8008b2c:	08008bdf 	.word	0x08008bdf
 8008b30:	08008c6f 	.word	0x08008c6f
 8008b34:	08008aa7 	.word	0x08008aa7
 8008b38:	08008b81 	.word	0x08008b81
 8008b3c:	08008bc5 	.word	0x08008bc5
 8008b40:	08008bc5 	.word	0x08008bc5
 8008b44:	08008bc5 	.word	0x08008bc5
 8008b48:	08008bc5 	.word	0x08008bc5
 8008b4c:	08008bc5 	.word	0x08008bc5
 8008b50:	08008bc5 	.word	0x08008bc5
 8008b54:	08008bc5 	.word	0x08008bc5
 8008b58:	08008bc5 	.word	0x08008bc5
 8008b5c:	08008bc5 	.word	0x08008bc5
 8008b60:	2b6e      	cmp	r3, #110	@ 0x6e
 8008b62:	d809      	bhi.n	8008b78 <_scanf_float+0x138>
 8008b64:	2b60      	cmp	r3, #96	@ 0x60
 8008b66:	d8b1      	bhi.n	8008acc <_scanf_float+0x8c>
 8008b68:	2b54      	cmp	r3, #84	@ 0x54
 8008b6a:	d07b      	beq.n	8008c64 <_scanf_float+0x224>
 8008b6c:	2b59      	cmp	r3, #89	@ 0x59
 8008b6e:	d19a      	bne.n	8008aa6 <_scanf_float+0x66>
 8008b70:	2d07      	cmp	r5, #7
 8008b72:	d198      	bne.n	8008aa6 <_scanf_float+0x66>
 8008b74:	2508      	movs	r5, #8
 8008b76:	e02f      	b.n	8008bd8 <_scanf_float+0x198>
 8008b78:	2b74      	cmp	r3, #116	@ 0x74
 8008b7a:	d073      	beq.n	8008c64 <_scanf_float+0x224>
 8008b7c:	2b79      	cmp	r3, #121	@ 0x79
 8008b7e:	e7f6      	b.n	8008b6e <_scanf_float+0x12e>
 8008b80:	6821      	ldr	r1, [r4, #0]
 8008b82:	05c8      	lsls	r0, r1, #23
 8008b84:	d51e      	bpl.n	8008bc4 <_scanf_float+0x184>
 8008b86:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008b8a:	6021      	str	r1, [r4, #0]
 8008b8c:	3701      	adds	r7, #1
 8008b8e:	f1bb 0f00 	cmp.w	fp, #0
 8008b92:	d003      	beq.n	8008b9c <_scanf_float+0x15c>
 8008b94:	3201      	adds	r2, #1
 8008b96:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b9a:	60a2      	str	r2, [r4, #8]
 8008b9c:	68a3      	ldr	r3, [r4, #8]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	60a3      	str	r3, [r4, #8]
 8008ba2:	6923      	ldr	r3, [r4, #16]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	6123      	str	r3, [r4, #16]
 8008ba8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f8c9 3004 	str.w	r3, [r9, #4]
 8008bb4:	f340 8082 	ble.w	8008cbc <_scanf_float+0x27c>
 8008bb8:	f8d9 3000 	ldr.w	r3, [r9]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	f8c9 3000 	str.w	r3, [r9]
 8008bc2:	e762      	b.n	8008a8a <_scanf_float+0x4a>
 8008bc4:	eb1a 0105 	adds.w	r1, sl, r5
 8008bc8:	f47f af6d 	bne.w	8008aa6 <_scanf_float+0x66>
 8008bcc:	6822      	ldr	r2, [r4, #0]
 8008bce:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008bd2:	6022      	str	r2, [r4, #0]
 8008bd4:	460d      	mov	r5, r1
 8008bd6:	468a      	mov	sl, r1
 8008bd8:	f806 3b01 	strb.w	r3, [r6], #1
 8008bdc:	e7de      	b.n	8008b9c <_scanf_float+0x15c>
 8008bde:	6822      	ldr	r2, [r4, #0]
 8008be0:	0610      	lsls	r0, r2, #24
 8008be2:	f57f af60 	bpl.w	8008aa6 <_scanf_float+0x66>
 8008be6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008bea:	6022      	str	r2, [r4, #0]
 8008bec:	e7f4      	b.n	8008bd8 <_scanf_float+0x198>
 8008bee:	f1ba 0f00 	cmp.w	sl, #0
 8008bf2:	d10c      	bne.n	8008c0e <_scanf_float+0x1ce>
 8008bf4:	b977      	cbnz	r7, 8008c14 <_scanf_float+0x1d4>
 8008bf6:	6822      	ldr	r2, [r4, #0]
 8008bf8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008bfc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c00:	d108      	bne.n	8008c14 <_scanf_float+0x1d4>
 8008c02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c06:	6022      	str	r2, [r4, #0]
 8008c08:	f04f 0a01 	mov.w	sl, #1
 8008c0c:	e7e4      	b.n	8008bd8 <_scanf_float+0x198>
 8008c0e:	f1ba 0f02 	cmp.w	sl, #2
 8008c12:	d050      	beq.n	8008cb6 <_scanf_float+0x276>
 8008c14:	2d01      	cmp	r5, #1
 8008c16:	d002      	beq.n	8008c1e <_scanf_float+0x1de>
 8008c18:	2d04      	cmp	r5, #4
 8008c1a:	f47f af44 	bne.w	8008aa6 <_scanf_float+0x66>
 8008c1e:	3501      	adds	r5, #1
 8008c20:	b2ed      	uxtb	r5, r5
 8008c22:	e7d9      	b.n	8008bd8 <_scanf_float+0x198>
 8008c24:	f1ba 0f01 	cmp.w	sl, #1
 8008c28:	f47f af3d 	bne.w	8008aa6 <_scanf_float+0x66>
 8008c2c:	f04f 0a02 	mov.w	sl, #2
 8008c30:	e7d2      	b.n	8008bd8 <_scanf_float+0x198>
 8008c32:	b975      	cbnz	r5, 8008c52 <_scanf_float+0x212>
 8008c34:	2f00      	cmp	r7, #0
 8008c36:	f47f af37 	bne.w	8008aa8 <_scanf_float+0x68>
 8008c3a:	6822      	ldr	r2, [r4, #0]
 8008c3c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c40:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c44:	f040 8103 	bne.w	8008e4e <_scanf_float+0x40e>
 8008c48:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c4c:	6022      	str	r2, [r4, #0]
 8008c4e:	2501      	movs	r5, #1
 8008c50:	e7c2      	b.n	8008bd8 <_scanf_float+0x198>
 8008c52:	2d03      	cmp	r5, #3
 8008c54:	d0e3      	beq.n	8008c1e <_scanf_float+0x1de>
 8008c56:	2d05      	cmp	r5, #5
 8008c58:	e7df      	b.n	8008c1a <_scanf_float+0x1da>
 8008c5a:	2d02      	cmp	r5, #2
 8008c5c:	f47f af23 	bne.w	8008aa6 <_scanf_float+0x66>
 8008c60:	2503      	movs	r5, #3
 8008c62:	e7b9      	b.n	8008bd8 <_scanf_float+0x198>
 8008c64:	2d06      	cmp	r5, #6
 8008c66:	f47f af1e 	bne.w	8008aa6 <_scanf_float+0x66>
 8008c6a:	2507      	movs	r5, #7
 8008c6c:	e7b4      	b.n	8008bd8 <_scanf_float+0x198>
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	0591      	lsls	r1, r2, #22
 8008c72:	f57f af18 	bpl.w	8008aa6 <_scanf_float+0x66>
 8008c76:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008c7a:	6022      	str	r2, [r4, #0]
 8008c7c:	9702      	str	r7, [sp, #8]
 8008c7e:	e7ab      	b.n	8008bd8 <_scanf_float+0x198>
 8008c80:	6822      	ldr	r2, [r4, #0]
 8008c82:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008c86:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008c8a:	d005      	beq.n	8008c98 <_scanf_float+0x258>
 8008c8c:	0550      	lsls	r0, r2, #21
 8008c8e:	f57f af0a 	bpl.w	8008aa6 <_scanf_float+0x66>
 8008c92:	2f00      	cmp	r7, #0
 8008c94:	f000 80db 	beq.w	8008e4e <_scanf_float+0x40e>
 8008c98:	0591      	lsls	r1, r2, #22
 8008c9a:	bf58      	it	pl
 8008c9c:	9902      	ldrpl	r1, [sp, #8]
 8008c9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008ca2:	bf58      	it	pl
 8008ca4:	1a79      	subpl	r1, r7, r1
 8008ca6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008caa:	bf58      	it	pl
 8008cac:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008cb0:	6022      	str	r2, [r4, #0]
 8008cb2:	2700      	movs	r7, #0
 8008cb4:	e790      	b.n	8008bd8 <_scanf_float+0x198>
 8008cb6:	f04f 0a03 	mov.w	sl, #3
 8008cba:	e78d      	b.n	8008bd8 <_scanf_float+0x198>
 8008cbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	4798      	blx	r3
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f43f aedf 	beq.w	8008a8a <_scanf_float+0x4a>
 8008ccc:	e6eb      	b.n	8008aa6 <_scanf_float+0x66>
 8008cce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cd6:	464a      	mov	r2, r9
 8008cd8:	4640      	mov	r0, r8
 8008cda:	4798      	blx	r3
 8008cdc:	6923      	ldr	r3, [r4, #16]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	6123      	str	r3, [r4, #16]
 8008ce2:	e6eb      	b.n	8008abc <_scanf_float+0x7c>
 8008ce4:	1e6b      	subs	r3, r5, #1
 8008ce6:	2b06      	cmp	r3, #6
 8008ce8:	d824      	bhi.n	8008d34 <_scanf_float+0x2f4>
 8008cea:	2d02      	cmp	r5, #2
 8008cec:	d836      	bhi.n	8008d5c <_scanf_float+0x31c>
 8008cee:	9b01      	ldr	r3, [sp, #4]
 8008cf0:	429e      	cmp	r6, r3
 8008cf2:	f67f aee7 	bls.w	8008ac4 <_scanf_float+0x84>
 8008cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cfe:	464a      	mov	r2, r9
 8008d00:	4640      	mov	r0, r8
 8008d02:	4798      	blx	r3
 8008d04:	6923      	ldr	r3, [r4, #16]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	6123      	str	r3, [r4, #16]
 8008d0a:	e7f0      	b.n	8008cee <_scanf_float+0x2ae>
 8008d0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d10:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008d14:	464a      	mov	r2, r9
 8008d16:	4640      	mov	r0, r8
 8008d18:	4798      	blx	r3
 8008d1a:	6923      	ldr	r3, [r4, #16]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	6123      	str	r3, [r4, #16]
 8008d20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d24:	fa5f fa8a 	uxtb.w	sl, sl
 8008d28:	f1ba 0f02 	cmp.w	sl, #2
 8008d2c:	d1ee      	bne.n	8008d0c <_scanf_float+0x2cc>
 8008d2e:	3d03      	subs	r5, #3
 8008d30:	b2ed      	uxtb	r5, r5
 8008d32:	1b76      	subs	r6, r6, r5
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	05da      	lsls	r2, r3, #23
 8008d38:	d530      	bpl.n	8008d9c <_scanf_float+0x35c>
 8008d3a:	055b      	lsls	r3, r3, #21
 8008d3c:	d511      	bpl.n	8008d62 <_scanf_float+0x322>
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	429e      	cmp	r6, r3
 8008d42:	f67f aebf 	bls.w	8008ac4 <_scanf_float+0x84>
 8008d46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d4e:	464a      	mov	r2, r9
 8008d50:	4640      	mov	r0, r8
 8008d52:	4798      	blx	r3
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	6123      	str	r3, [r4, #16]
 8008d5a:	e7f0      	b.n	8008d3e <_scanf_float+0x2fe>
 8008d5c:	46aa      	mov	sl, r5
 8008d5e:	46b3      	mov	fp, r6
 8008d60:	e7de      	b.n	8008d20 <_scanf_float+0x2e0>
 8008d62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008d66:	6923      	ldr	r3, [r4, #16]
 8008d68:	2965      	cmp	r1, #101	@ 0x65
 8008d6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008d72:	6123      	str	r3, [r4, #16]
 8008d74:	d00c      	beq.n	8008d90 <_scanf_float+0x350>
 8008d76:	2945      	cmp	r1, #69	@ 0x45
 8008d78:	d00a      	beq.n	8008d90 <_scanf_float+0x350>
 8008d7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d7e:	464a      	mov	r2, r9
 8008d80:	4640      	mov	r0, r8
 8008d82:	4798      	blx	r3
 8008d84:	6923      	ldr	r3, [r4, #16]
 8008d86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	1eb5      	subs	r5, r6, #2
 8008d8e:	6123      	str	r3, [r4, #16]
 8008d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d94:	464a      	mov	r2, r9
 8008d96:	4640      	mov	r0, r8
 8008d98:	4798      	blx	r3
 8008d9a:	462e      	mov	r6, r5
 8008d9c:	6822      	ldr	r2, [r4, #0]
 8008d9e:	f012 0210 	ands.w	r2, r2, #16
 8008da2:	d001      	beq.n	8008da8 <_scanf_float+0x368>
 8008da4:	2000      	movs	r0, #0
 8008da6:	e68e      	b.n	8008ac6 <_scanf_float+0x86>
 8008da8:	7032      	strb	r2, [r6, #0]
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008db4:	d125      	bne.n	8008e02 <_scanf_float+0x3c2>
 8008db6:	9b02      	ldr	r3, [sp, #8]
 8008db8:	429f      	cmp	r7, r3
 8008dba:	d00a      	beq.n	8008dd2 <_scanf_float+0x392>
 8008dbc:	1bda      	subs	r2, r3, r7
 8008dbe:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008dc2:	429e      	cmp	r6, r3
 8008dc4:	bf28      	it	cs
 8008dc6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008dca:	4922      	ldr	r1, [pc, #136]	@ (8008e54 <_scanf_float+0x414>)
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f000 f93d 	bl	800904c <siprintf>
 8008dd2:	9901      	ldr	r1, [sp, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	f002 fc36 	bl	800b648 <_strtod_r>
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	6821      	ldr	r1, [r4, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f011 0f02 	tst.w	r1, #2
 8008de6:	ec57 6b10 	vmov	r6, r7, d0
 8008dea:	f103 0204 	add.w	r2, r3, #4
 8008dee:	d015      	beq.n	8008e1c <_scanf_float+0x3dc>
 8008df0:	9903      	ldr	r1, [sp, #12]
 8008df2:	600a      	str	r2, [r1, #0]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	e9c3 6700 	strd	r6, r7, [r3]
 8008dfa:	68e3      	ldr	r3, [r4, #12]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	60e3      	str	r3, [r4, #12]
 8008e00:	e7d0      	b.n	8008da4 <_scanf_float+0x364>
 8008e02:	9b04      	ldr	r3, [sp, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d0e4      	beq.n	8008dd2 <_scanf_float+0x392>
 8008e08:	9905      	ldr	r1, [sp, #20]
 8008e0a:	230a      	movs	r3, #10
 8008e0c:	3101      	adds	r1, #1
 8008e0e:	4640      	mov	r0, r8
 8008e10:	f002 fc9a 	bl	800b748 <_strtol_r>
 8008e14:	9b04      	ldr	r3, [sp, #16]
 8008e16:	9e05      	ldr	r6, [sp, #20]
 8008e18:	1ac2      	subs	r2, r0, r3
 8008e1a:	e7d0      	b.n	8008dbe <_scanf_float+0x37e>
 8008e1c:	f011 0f04 	tst.w	r1, #4
 8008e20:	9903      	ldr	r1, [sp, #12]
 8008e22:	600a      	str	r2, [r1, #0]
 8008e24:	d1e6      	bne.n	8008df4 <_scanf_float+0x3b4>
 8008e26:	681d      	ldr	r5, [r3, #0]
 8008e28:	4632      	mov	r2, r6
 8008e2a:	463b      	mov	r3, r7
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	4639      	mov	r1, r7
 8008e30:	f7f7 fe84 	bl	8000b3c <__aeabi_dcmpun>
 8008e34:	b128      	cbz	r0, 8008e42 <_scanf_float+0x402>
 8008e36:	4808      	ldr	r0, [pc, #32]	@ (8008e58 <_scanf_float+0x418>)
 8008e38:	f000 f9fc 	bl	8009234 <nanf>
 8008e3c:	ed85 0a00 	vstr	s0, [r5]
 8008e40:	e7db      	b.n	8008dfa <_scanf_float+0x3ba>
 8008e42:	4630      	mov	r0, r6
 8008e44:	4639      	mov	r1, r7
 8008e46:	f7f7 fed7 	bl	8000bf8 <__aeabi_d2f>
 8008e4a:	6028      	str	r0, [r5, #0]
 8008e4c:	e7d5      	b.n	8008dfa <_scanf_float+0x3ba>
 8008e4e:	2700      	movs	r7, #0
 8008e50:	e62e      	b.n	8008ab0 <_scanf_float+0x70>
 8008e52:	bf00      	nop
 8008e54:	0800ca24 	.word	0x0800ca24
 8008e58:	0800cb65 	.word	0x0800cb65

08008e5c <std>:
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	b510      	push	{r4, lr}
 8008e60:	4604      	mov	r4, r0
 8008e62:	e9c0 3300 	strd	r3, r3, [r0]
 8008e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e6a:	6083      	str	r3, [r0, #8]
 8008e6c:	8181      	strh	r1, [r0, #12]
 8008e6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e70:	81c2      	strh	r2, [r0, #14]
 8008e72:	6183      	str	r3, [r0, #24]
 8008e74:	4619      	mov	r1, r3
 8008e76:	2208      	movs	r2, #8
 8008e78:	305c      	adds	r0, #92	@ 0x5c
 8008e7a:	f000 f94c 	bl	8009116 <memset>
 8008e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb4 <std+0x58>)
 8008e80:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e82:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb8 <std+0x5c>)
 8008e84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e86:	4b0d      	ldr	r3, [pc, #52]	@ (8008ebc <std+0x60>)
 8008e88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ec0 <std+0x64>)
 8008e8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ec4 <std+0x68>)
 8008e90:	6224      	str	r4, [r4, #32]
 8008e92:	429c      	cmp	r4, r3
 8008e94:	d006      	beq.n	8008ea4 <std+0x48>
 8008e96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e9a:	4294      	cmp	r4, r2
 8008e9c:	d002      	beq.n	8008ea4 <std+0x48>
 8008e9e:	33d0      	adds	r3, #208	@ 0xd0
 8008ea0:	429c      	cmp	r4, r3
 8008ea2:	d105      	bne.n	8008eb0 <std+0x54>
 8008ea4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eac:	f000 b9b0 	b.w	8009210 <__retarget_lock_init_recursive>
 8008eb0:	bd10      	pop	{r4, pc}
 8008eb2:	bf00      	nop
 8008eb4:	08009091 	.word	0x08009091
 8008eb8:	080090b3 	.word	0x080090b3
 8008ebc:	080090eb 	.word	0x080090eb
 8008ec0:	0800910f 	.word	0x0800910f
 8008ec4:	20004460 	.word	0x20004460

08008ec8 <stdio_exit_handler>:
 8008ec8:	4a02      	ldr	r2, [pc, #8]	@ (8008ed4 <stdio_exit_handler+0xc>)
 8008eca:	4903      	ldr	r1, [pc, #12]	@ (8008ed8 <stdio_exit_handler+0x10>)
 8008ecc:	4803      	ldr	r0, [pc, #12]	@ (8008edc <stdio_exit_handler+0x14>)
 8008ece:	f000 b869 	b.w	8008fa4 <_fwalk_sglue>
 8008ed2:	bf00      	nop
 8008ed4:	20000018 	.word	0x20000018
 8008ed8:	0800bb05 	.word	0x0800bb05
 8008edc:	20000028 	.word	0x20000028

08008ee0 <cleanup_stdio>:
 8008ee0:	6841      	ldr	r1, [r0, #4]
 8008ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8008f14 <cleanup_stdio+0x34>)
 8008ee4:	4299      	cmp	r1, r3
 8008ee6:	b510      	push	{r4, lr}
 8008ee8:	4604      	mov	r4, r0
 8008eea:	d001      	beq.n	8008ef0 <cleanup_stdio+0x10>
 8008eec:	f002 fe0a 	bl	800bb04 <_fflush_r>
 8008ef0:	68a1      	ldr	r1, [r4, #8]
 8008ef2:	4b09      	ldr	r3, [pc, #36]	@ (8008f18 <cleanup_stdio+0x38>)
 8008ef4:	4299      	cmp	r1, r3
 8008ef6:	d002      	beq.n	8008efe <cleanup_stdio+0x1e>
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f002 fe03 	bl	800bb04 <_fflush_r>
 8008efe:	68e1      	ldr	r1, [r4, #12]
 8008f00:	4b06      	ldr	r3, [pc, #24]	@ (8008f1c <cleanup_stdio+0x3c>)
 8008f02:	4299      	cmp	r1, r3
 8008f04:	d004      	beq.n	8008f10 <cleanup_stdio+0x30>
 8008f06:	4620      	mov	r0, r4
 8008f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f0c:	f002 bdfa 	b.w	800bb04 <_fflush_r>
 8008f10:	bd10      	pop	{r4, pc}
 8008f12:	bf00      	nop
 8008f14:	20004460 	.word	0x20004460
 8008f18:	200044c8 	.word	0x200044c8
 8008f1c:	20004530 	.word	0x20004530

08008f20 <global_stdio_init.part.0>:
 8008f20:	b510      	push	{r4, lr}
 8008f22:	4b0b      	ldr	r3, [pc, #44]	@ (8008f50 <global_stdio_init.part.0+0x30>)
 8008f24:	4c0b      	ldr	r4, [pc, #44]	@ (8008f54 <global_stdio_init.part.0+0x34>)
 8008f26:	4a0c      	ldr	r2, [pc, #48]	@ (8008f58 <global_stdio_init.part.0+0x38>)
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2104      	movs	r1, #4
 8008f30:	f7ff ff94 	bl	8008e5c <std>
 8008f34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f38:	2201      	movs	r2, #1
 8008f3a:	2109      	movs	r1, #9
 8008f3c:	f7ff ff8e 	bl	8008e5c <std>
 8008f40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f44:	2202      	movs	r2, #2
 8008f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f4a:	2112      	movs	r1, #18
 8008f4c:	f7ff bf86 	b.w	8008e5c <std>
 8008f50:	20004598 	.word	0x20004598
 8008f54:	20004460 	.word	0x20004460
 8008f58:	08008ec9 	.word	0x08008ec9

08008f5c <__sfp_lock_acquire>:
 8008f5c:	4801      	ldr	r0, [pc, #4]	@ (8008f64 <__sfp_lock_acquire+0x8>)
 8008f5e:	f000 b958 	b.w	8009212 <__retarget_lock_acquire_recursive>
 8008f62:	bf00      	nop
 8008f64:	200045a1 	.word	0x200045a1

08008f68 <__sfp_lock_release>:
 8008f68:	4801      	ldr	r0, [pc, #4]	@ (8008f70 <__sfp_lock_release+0x8>)
 8008f6a:	f000 b953 	b.w	8009214 <__retarget_lock_release_recursive>
 8008f6e:	bf00      	nop
 8008f70:	200045a1 	.word	0x200045a1

08008f74 <__sinit>:
 8008f74:	b510      	push	{r4, lr}
 8008f76:	4604      	mov	r4, r0
 8008f78:	f7ff fff0 	bl	8008f5c <__sfp_lock_acquire>
 8008f7c:	6a23      	ldr	r3, [r4, #32]
 8008f7e:	b11b      	cbz	r3, 8008f88 <__sinit+0x14>
 8008f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f84:	f7ff bff0 	b.w	8008f68 <__sfp_lock_release>
 8008f88:	4b04      	ldr	r3, [pc, #16]	@ (8008f9c <__sinit+0x28>)
 8008f8a:	6223      	str	r3, [r4, #32]
 8008f8c:	4b04      	ldr	r3, [pc, #16]	@ (8008fa0 <__sinit+0x2c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1f5      	bne.n	8008f80 <__sinit+0xc>
 8008f94:	f7ff ffc4 	bl	8008f20 <global_stdio_init.part.0>
 8008f98:	e7f2      	b.n	8008f80 <__sinit+0xc>
 8008f9a:	bf00      	nop
 8008f9c:	08008ee1 	.word	0x08008ee1
 8008fa0:	20004598 	.word	0x20004598

08008fa4 <_fwalk_sglue>:
 8008fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa8:	4607      	mov	r7, r0
 8008faa:	4688      	mov	r8, r1
 8008fac:	4614      	mov	r4, r2
 8008fae:	2600      	movs	r6, #0
 8008fb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fb4:	f1b9 0901 	subs.w	r9, r9, #1
 8008fb8:	d505      	bpl.n	8008fc6 <_fwalk_sglue+0x22>
 8008fba:	6824      	ldr	r4, [r4, #0]
 8008fbc:	2c00      	cmp	r4, #0
 8008fbe:	d1f7      	bne.n	8008fb0 <_fwalk_sglue+0xc>
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc6:	89ab      	ldrh	r3, [r5, #12]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d907      	bls.n	8008fdc <_fwalk_sglue+0x38>
 8008fcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	d003      	beq.n	8008fdc <_fwalk_sglue+0x38>
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	47c0      	blx	r8
 8008fda:	4306      	orrs	r6, r0
 8008fdc:	3568      	adds	r5, #104	@ 0x68
 8008fde:	e7e9      	b.n	8008fb4 <_fwalk_sglue+0x10>

08008fe0 <sniprintf>:
 8008fe0:	b40c      	push	{r2, r3}
 8008fe2:	b530      	push	{r4, r5, lr}
 8008fe4:	4b18      	ldr	r3, [pc, #96]	@ (8009048 <sniprintf+0x68>)
 8008fe6:	1e0c      	subs	r4, r1, #0
 8008fe8:	681d      	ldr	r5, [r3, #0]
 8008fea:	b09d      	sub	sp, #116	@ 0x74
 8008fec:	da08      	bge.n	8009000 <sniprintf+0x20>
 8008fee:	238b      	movs	r3, #139	@ 0x8b
 8008ff0:	602b      	str	r3, [r5, #0]
 8008ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff6:	b01d      	add	sp, #116	@ 0x74
 8008ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ffc:	b002      	add	sp, #8
 8008ffe:	4770      	bx	lr
 8009000:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009004:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009008:	f04f 0300 	mov.w	r3, #0
 800900c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800900e:	bf14      	ite	ne
 8009010:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009014:	4623      	moveq	r3, r4
 8009016:	9304      	str	r3, [sp, #16]
 8009018:	9307      	str	r3, [sp, #28]
 800901a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800901e:	9002      	str	r0, [sp, #8]
 8009020:	9006      	str	r0, [sp, #24]
 8009022:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009026:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009028:	ab21      	add	r3, sp, #132	@ 0x84
 800902a:	a902      	add	r1, sp, #8
 800902c:	4628      	mov	r0, r5
 800902e:	9301      	str	r3, [sp, #4]
 8009030:	f002 fbe8 	bl	800b804 <_svfiprintf_r>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	bfbc      	itt	lt
 8009038:	238b      	movlt	r3, #139	@ 0x8b
 800903a:	602b      	strlt	r3, [r5, #0]
 800903c:	2c00      	cmp	r4, #0
 800903e:	d0da      	beq.n	8008ff6 <sniprintf+0x16>
 8009040:	9b02      	ldr	r3, [sp, #8]
 8009042:	2200      	movs	r2, #0
 8009044:	701a      	strb	r2, [r3, #0]
 8009046:	e7d6      	b.n	8008ff6 <sniprintf+0x16>
 8009048:	20000024 	.word	0x20000024

0800904c <siprintf>:
 800904c:	b40e      	push	{r1, r2, r3}
 800904e:	b510      	push	{r4, lr}
 8009050:	b09d      	sub	sp, #116	@ 0x74
 8009052:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009054:	9002      	str	r0, [sp, #8]
 8009056:	9006      	str	r0, [sp, #24]
 8009058:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800905c:	480a      	ldr	r0, [pc, #40]	@ (8009088 <siprintf+0x3c>)
 800905e:	9107      	str	r1, [sp, #28]
 8009060:	9104      	str	r1, [sp, #16]
 8009062:	490a      	ldr	r1, [pc, #40]	@ (800908c <siprintf+0x40>)
 8009064:	f853 2b04 	ldr.w	r2, [r3], #4
 8009068:	9105      	str	r1, [sp, #20]
 800906a:	2400      	movs	r4, #0
 800906c:	a902      	add	r1, sp, #8
 800906e:	6800      	ldr	r0, [r0, #0]
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009074:	f002 fbc6 	bl	800b804 <_svfiprintf_r>
 8009078:	9b02      	ldr	r3, [sp, #8]
 800907a:	701c      	strb	r4, [r3, #0]
 800907c:	b01d      	add	sp, #116	@ 0x74
 800907e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009082:	b003      	add	sp, #12
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	20000024 	.word	0x20000024
 800908c:	ffff0208 	.word	0xffff0208

08009090 <__sread>:
 8009090:	b510      	push	{r4, lr}
 8009092:	460c      	mov	r4, r1
 8009094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009098:	f000 f86c 	bl	8009174 <_read_r>
 800909c:	2800      	cmp	r0, #0
 800909e:	bfab      	itete	ge
 80090a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80090a2:	89a3      	ldrhlt	r3, [r4, #12]
 80090a4:	181b      	addge	r3, r3, r0
 80090a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090aa:	bfac      	ite	ge
 80090ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090ae:	81a3      	strhlt	r3, [r4, #12]
 80090b0:	bd10      	pop	{r4, pc}

080090b2 <__swrite>:
 80090b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b6:	461f      	mov	r7, r3
 80090b8:	898b      	ldrh	r3, [r1, #12]
 80090ba:	05db      	lsls	r3, r3, #23
 80090bc:	4605      	mov	r5, r0
 80090be:	460c      	mov	r4, r1
 80090c0:	4616      	mov	r6, r2
 80090c2:	d505      	bpl.n	80090d0 <__swrite+0x1e>
 80090c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c8:	2302      	movs	r3, #2
 80090ca:	2200      	movs	r2, #0
 80090cc:	f000 f840 	bl	8009150 <_lseek_r>
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090da:	81a3      	strh	r3, [r4, #12]
 80090dc:	4632      	mov	r2, r6
 80090de:	463b      	mov	r3, r7
 80090e0:	4628      	mov	r0, r5
 80090e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090e6:	f000 b857 	b.w	8009198 <_write_r>

080090ea <__sseek>:
 80090ea:	b510      	push	{r4, lr}
 80090ec:	460c      	mov	r4, r1
 80090ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f2:	f000 f82d 	bl	8009150 <_lseek_r>
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	bf15      	itete	ne
 80090fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009102:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009106:	81a3      	strheq	r3, [r4, #12]
 8009108:	bf18      	it	ne
 800910a:	81a3      	strhne	r3, [r4, #12]
 800910c:	bd10      	pop	{r4, pc}

0800910e <__sclose>:
 800910e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009112:	f000 b80d 	b.w	8009130 <_close_r>

08009116 <memset>:
 8009116:	4402      	add	r2, r0
 8009118:	4603      	mov	r3, r0
 800911a:	4293      	cmp	r3, r2
 800911c:	d100      	bne.n	8009120 <memset+0xa>
 800911e:	4770      	bx	lr
 8009120:	f803 1b01 	strb.w	r1, [r3], #1
 8009124:	e7f9      	b.n	800911a <memset+0x4>
	...

08009128 <_localeconv_r>:
 8009128:	4800      	ldr	r0, [pc, #0]	@ (800912c <_localeconv_r+0x4>)
 800912a:	4770      	bx	lr
 800912c:	20000164 	.word	0x20000164

08009130 <_close_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	4d06      	ldr	r5, [pc, #24]	@ (800914c <_close_r+0x1c>)
 8009134:	2300      	movs	r3, #0
 8009136:	4604      	mov	r4, r0
 8009138:	4608      	mov	r0, r1
 800913a:	602b      	str	r3, [r5, #0]
 800913c:	f7f9 fdfa 	bl	8002d34 <_close>
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d102      	bne.n	800914a <_close_r+0x1a>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	b103      	cbz	r3, 800914a <_close_r+0x1a>
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	2000459c 	.word	0x2000459c

08009150 <_lseek_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4d07      	ldr	r5, [pc, #28]	@ (8009170 <_lseek_r+0x20>)
 8009154:	4604      	mov	r4, r0
 8009156:	4608      	mov	r0, r1
 8009158:	4611      	mov	r1, r2
 800915a:	2200      	movs	r2, #0
 800915c:	602a      	str	r2, [r5, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	f7f9 fe0f 	bl	8002d82 <_lseek>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	d102      	bne.n	800916e <_lseek_r+0x1e>
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	b103      	cbz	r3, 800916e <_lseek_r+0x1e>
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	bd38      	pop	{r3, r4, r5, pc}
 8009170:	2000459c 	.word	0x2000459c

08009174 <_read_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4d07      	ldr	r5, [pc, #28]	@ (8009194 <_read_r+0x20>)
 8009178:	4604      	mov	r4, r0
 800917a:	4608      	mov	r0, r1
 800917c:	4611      	mov	r1, r2
 800917e:	2200      	movs	r2, #0
 8009180:	602a      	str	r2, [r5, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	f7f9 fd9d 	bl	8002cc2 <_read>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_read_r+0x1e>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_read_r+0x1e>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	2000459c 	.word	0x2000459c

08009198 <_write_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4d07      	ldr	r5, [pc, #28]	@ (80091b8 <_write_r+0x20>)
 800919c:	4604      	mov	r4, r0
 800919e:	4608      	mov	r0, r1
 80091a0:	4611      	mov	r1, r2
 80091a2:	2200      	movs	r2, #0
 80091a4:	602a      	str	r2, [r5, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	f7f9 fda8 	bl	8002cfc <_write>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d102      	bne.n	80091b6 <_write_r+0x1e>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	b103      	cbz	r3, 80091b6 <_write_r+0x1e>
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	2000459c 	.word	0x2000459c

080091bc <__errno>:
 80091bc:	4b01      	ldr	r3, [pc, #4]	@ (80091c4 <__errno+0x8>)
 80091be:	6818      	ldr	r0, [r3, #0]
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20000024 	.word	0x20000024

080091c8 <__libc_init_array>:
 80091c8:	b570      	push	{r4, r5, r6, lr}
 80091ca:	4d0d      	ldr	r5, [pc, #52]	@ (8009200 <__libc_init_array+0x38>)
 80091cc:	4c0d      	ldr	r4, [pc, #52]	@ (8009204 <__libc_init_array+0x3c>)
 80091ce:	1b64      	subs	r4, r4, r5
 80091d0:	10a4      	asrs	r4, r4, #2
 80091d2:	2600      	movs	r6, #0
 80091d4:	42a6      	cmp	r6, r4
 80091d6:	d109      	bne.n	80091ec <__libc_init_array+0x24>
 80091d8:	4d0b      	ldr	r5, [pc, #44]	@ (8009208 <__libc_init_array+0x40>)
 80091da:	4c0c      	ldr	r4, [pc, #48]	@ (800920c <__libc_init_array+0x44>)
 80091dc:	f003 fb76 	bl	800c8cc <_init>
 80091e0:	1b64      	subs	r4, r4, r5
 80091e2:	10a4      	asrs	r4, r4, #2
 80091e4:	2600      	movs	r6, #0
 80091e6:	42a6      	cmp	r6, r4
 80091e8:	d105      	bne.n	80091f6 <__libc_init_array+0x2e>
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
 80091ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f0:	4798      	blx	r3
 80091f2:	3601      	adds	r6, #1
 80091f4:	e7ee      	b.n	80091d4 <__libc_init_array+0xc>
 80091f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091fa:	4798      	blx	r3
 80091fc:	3601      	adds	r6, #1
 80091fe:	e7f2      	b.n	80091e6 <__libc_init_array+0x1e>
 8009200:	0800ce24 	.word	0x0800ce24
 8009204:	0800ce24 	.word	0x0800ce24
 8009208:	0800ce24 	.word	0x0800ce24
 800920c:	0800ce28 	.word	0x0800ce28

08009210 <__retarget_lock_init_recursive>:
 8009210:	4770      	bx	lr

08009212 <__retarget_lock_acquire_recursive>:
 8009212:	4770      	bx	lr

08009214 <__retarget_lock_release_recursive>:
 8009214:	4770      	bx	lr

08009216 <memcpy>:
 8009216:	440a      	add	r2, r1
 8009218:	4291      	cmp	r1, r2
 800921a:	f100 33ff 	add.w	r3, r0, #4294967295
 800921e:	d100      	bne.n	8009222 <memcpy+0xc>
 8009220:	4770      	bx	lr
 8009222:	b510      	push	{r4, lr}
 8009224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009228:	f803 4f01 	strb.w	r4, [r3, #1]!
 800922c:	4291      	cmp	r1, r2
 800922e:	d1f9      	bne.n	8009224 <memcpy+0xe>
 8009230:	bd10      	pop	{r4, pc}
	...

08009234 <nanf>:
 8009234:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800923c <nanf+0x8>
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	7fc00000 	.word	0x7fc00000

08009240 <quorem>:
 8009240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009244:	6903      	ldr	r3, [r0, #16]
 8009246:	690c      	ldr	r4, [r1, #16]
 8009248:	42a3      	cmp	r3, r4
 800924a:	4607      	mov	r7, r0
 800924c:	db7e      	blt.n	800934c <quorem+0x10c>
 800924e:	3c01      	subs	r4, #1
 8009250:	f101 0814 	add.w	r8, r1, #20
 8009254:	00a3      	lsls	r3, r4, #2
 8009256:	f100 0514 	add.w	r5, r0, #20
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009260:	9301      	str	r3, [sp, #4]
 8009262:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009266:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800926a:	3301      	adds	r3, #1
 800926c:	429a      	cmp	r2, r3
 800926e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009272:	fbb2 f6f3 	udiv	r6, r2, r3
 8009276:	d32e      	bcc.n	80092d6 <quorem+0x96>
 8009278:	f04f 0a00 	mov.w	sl, #0
 800927c:	46c4      	mov	ip, r8
 800927e:	46ae      	mov	lr, r5
 8009280:	46d3      	mov	fp, sl
 8009282:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009286:	b298      	uxth	r0, r3
 8009288:	fb06 a000 	mla	r0, r6, r0, sl
 800928c:	0c02      	lsrs	r2, r0, #16
 800928e:	0c1b      	lsrs	r3, r3, #16
 8009290:	fb06 2303 	mla	r3, r6, r3, r2
 8009294:	f8de 2000 	ldr.w	r2, [lr]
 8009298:	b280      	uxth	r0, r0
 800929a:	b292      	uxth	r2, r2
 800929c:	1a12      	subs	r2, r2, r0
 800929e:	445a      	add	r2, fp
 80092a0:	f8de 0000 	ldr.w	r0, [lr]
 80092a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80092ae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80092b2:	b292      	uxth	r2, r2
 80092b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80092b8:	45e1      	cmp	r9, ip
 80092ba:	f84e 2b04 	str.w	r2, [lr], #4
 80092be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80092c2:	d2de      	bcs.n	8009282 <quorem+0x42>
 80092c4:	9b00      	ldr	r3, [sp, #0]
 80092c6:	58eb      	ldr	r3, [r5, r3]
 80092c8:	b92b      	cbnz	r3, 80092d6 <quorem+0x96>
 80092ca:	9b01      	ldr	r3, [sp, #4]
 80092cc:	3b04      	subs	r3, #4
 80092ce:	429d      	cmp	r5, r3
 80092d0:	461a      	mov	r2, r3
 80092d2:	d32f      	bcc.n	8009334 <quorem+0xf4>
 80092d4:	613c      	str	r4, [r7, #16]
 80092d6:	4638      	mov	r0, r7
 80092d8:	f001 f9c6 	bl	800a668 <__mcmp>
 80092dc:	2800      	cmp	r0, #0
 80092de:	db25      	blt.n	800932c <quorem+0xec>
 80092e0:	4629      	mov	r1, r5
 80092e2:	2000      	movs	r0, #0
 80092e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80092e8:	f8d1 c000 	ldr.w	ip, [r1]
 80092ec:	fa1f fe82 	uxth.w	lr, r2
 80092f0:	fa1f f38c 	uxth.w	r3, ip
 80092f4:	eba3 030e 	sub.w	r3, r3, lr
 80092f8:	4403      	add	r3, r0
 80092fa:	0c12      	lsrs	r2, r2, #16
 80092fc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009300:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009304:	b29b      	uxth	r3, r3
 8009306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800930a:	45c1      	cmp	r9, r8
 800930c:	f841 3b04 	str.w	r3, [r1], #4
 8009310:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009314:	d2e6      	bcs.n	80092e4 <quorem+0xa4>
 8009316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800931a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800931e:	b922      	cbnz	r2, 800932a <quorem+0xea>
 8009320:	3b04      	subs	r3, #4
 8009322:	429d      	cmp	r5, r3
 8009324:	461a      	mov	r2, r3
 8009326:	d30b      	bcc.n	8009340 <quorem+0x100>
 8009328:	613c      	str	r4, [r7, #16]
 800932a:	3601      	adds	r6, #1
 800932c:	4630      	mov	r0, r6
 800932e:	b003      	add	sp, #12
 8009330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009334:	6812      	ldr	r2, [r2, #0]
 8009336:	3b04      	subs	r3, #4
 8009338:	2a00      	cmp	r2, #0
 800933a:	d1cb      	bne.n	80092d4 <quorem+0x94>
 800933c:	3c01      	subs	r4, #1
 800933e:	e7c6      	b.n	80092ce <quorem+0x8e>
 8009340:	6812      	ldr	r2, [r2, #0]
 8009342:	3b04      	subs	r3, #4
 8009344:	2a00      	cmp	r2, #0
 8009346:	d1ef      	bne.n	8009328 <quorem+0xe8>
 8009348:	3c01      	subs	r4, #1
 800934a:	e7ea      	b.n	8009322 <quorem+0xe2>
 800934c:	2000      	movs	r0, #0
 800934e:	e7ee      	b.n	800932e <quorem+0xee>

08009350 <_dtoa_r>:
 8009350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	69c7      	ldr	r7, [r0, #28]
 8009356:	b097      	sub	sp, #92	@ 0x5c
 8009358:	ed8d 0b04 	vstr	d0, [sp, #16]
 800935c:	ec55 4b10 	vmov	r4, r5, d0
 8009360:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009362:	9107      	str	r1, [sp, #28]
 8009364:	4681      	mov	r9, r0
 8009366:	920c      	str	r2, [sp, #48]	@ 0x30
 8009368:	9311      	str	r3, [sp, #68]	@ 0x44
 800936a:	b97f      	cbnz	r7, 800938c <_dtoa_r+0x3c>
 800936c:	2010      	movs	r0, #16
 800936e:	f000 fe09 	bl	8009f84 <malloc>
 8009372:	4602      	mov	r2, r0
 8009374:	f8c9 001c 	str.w	r0, [r9, #28]
 8009378:	b920      	cbnz	r0, 8009384 <_dtoa_r+0x34>
 800937a:	4ba9      	ldr	r3, [pc, #676]	@ (8009620 <_dtoa_r+0x2d0>)
 800937c:	21ef      	movs	r1, #239	@ 0xef
 800937e:	48a9      	ldr	r0, [pc, #676]	@ (8009624 <_dtoa_r+0x2d4>)
 8009380:	f002 fc2e 	bl	800bbe0 <__assert_func>
 8009384:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009388:	6007      	str	r7, [r0, #0]
 800938a:	60c7      	str	r7, [r0, #12]
 800938c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009390:	6819      	ldr	r1, [r3, #0]
 8009392:	b159      	cbz	r1, 80093ac <_dtoa_r+0x5c>
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	604a      	str	r2, [r1, #4]
 8009398:	2301      	movs	r3, #1
 800939a:	4093      	lsls	r3, r2
 800939c:	608b      	str	r3, [r1, #8]
 800939e:	4648      	mov	r0, r9
 80093a0:	f000 fee6 	bl	800a170 <_Bfree>
 80093a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80093a8:	2200      	movs	r2, #0
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	1e2b      	subs	r3, r5, #0
 80093ae:	bfb9      	ittee	lt
 80093b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80093b4:	9305      	strlt	r3, [sp, #20]
 80093b6:	2300      	movge	r3, #0
 80093b8:	6033      	strge	r3, [r6, #0]
 80093ba:	9f05      	ldr	r7, [sp, #20]
 80093bc:	4b9a      	ldr	r3, [pc, #616]	@ (8009628 <_dtoa_r+0x2d8>)
 80093be:	bfbc      	itt	lt
 80093c0:	2201      	movlt	r2, #1
 80093c2:	6032      	strlt	r2, [r6, #0]
 80093c4:	43bb      	bics	r3, r7
 80093c6:	d112      	bne.n	80093ee <_dtoa_r+0x9e>
 80093c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80093ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093d4:	4323      	orrs	r3, r4
 80093d6:	f000 855a 	beq.w	8009e8e <_dtoa_r+0xb3e>
 80093da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093dc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800963c <_dtoa_r+0x2ec>
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 855c 	beq.w	8009e9e <_dtoa_r+0xb4e>
 80093e6:	f10a 0303 	add.w	r3, sl, #3
 80093ea:	f000 bd56 	b.w	8009e9a <_dtoa_r+0xb4a>
 80093ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 80093f2:	2200      	movs	r2, #0
 80093f4:	ec51 0b17 	vmov	r0, r1, d7
 80093f8:	2300      	movs	r3, #0
 80093fa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80093fe:	f7f7 fb6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009402:	4680      	mov	r8, r0
 8009404:	b158      	cbz	r0, 800941e <_dtoa_r+0xce>
 8009406:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009408:	2301      	movs	r3, #1
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800940e:	b113      	cbz	r3, 8009416 <_dtoa_r+0xc6>
 8009410:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009412:	4b86      	ldr	r3, [pc, #536]	@ (800962c <_dtoa_r+0x2dc>)
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009640 <_dtoa_r+0x2f0>
 800941a:	f000 bd40 	b.w	8009e9e <_dtoa_r+0xb4e>
 800941e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009422:	aa14      	add	r2, sp, #80	@ 0x50
 8009424:	a915      	add	r1, sp, #84	@ 0x54
 8009426:	4648      	mov	r0, r9
 8009428:	f001 fa3e 	bl	800a8a8 <__d2b>
 800942c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009430:	9002      	str	r0, [sp, #8]
 8009432:	2e00      	cmp	r6, #0
 8009434:	d078      	beq.n	8009528 <_dtoa_r+0x1d8>
 8009436:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009438:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800943c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009440:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009444:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009448:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800944c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009450:	4619      	mov	r1, r3
 8009452:	2200      	movs	r2, #0
 8009454:	4b76      	ldr	r3, [pc, #472]	@ (8009630 <_dtoa_r+0x2e0>)
 8009456:	f7f6 ff1f 	bl	8000298 <__aeabi_dsub>
 800945a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009608 <_dtoa_r+0x2b8>)
 800945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009460:	f7f7 f8d2 	bl	8000608 <__aeabi_dmul>
 8009464:	a36a      	add	r3, pc, #424	@ (adr r3, 8009610 <_dtoa_r+0x2c0>)
 8009466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946a:	f7f6 ff17 	bl	800029c <__adddf3>
 800946e:	4604      	mov	r4, r0
 8009470:	4630      	mov	r0, r6
 8009472:	460d      	mov	r5, r1
 8009474:	f7f7 f85e 	bl	8000534 <__aeabi_i2d>
 8009478:	a367      	add	r3, pc, #412	@ (adr r3, 8009618 <_dtoa_r+0x2c8>)
 800947a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947e:	f7f7 f8c3 	bl	8000608 <__aeabi_dmul>
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	4620      	mov	r0, r4
 8009488:	4629      	mov	r1, r5
 800948a:	f7f6 ff07 	bl	800029c <__adddf3>
 800948e:	4604      	mov	r4, r0
 8009490:	460d      	mov	r5, r1
 8009492:	f7f7 fb69 	bl	8000b68 <__aeabi_d2iz>
 8009496:	2200      	movs	r2, #0
 8009498:	4607      	mov	r7, r0
 800949a:	2300      	movs	r3, #0
 800949c:	4620      	mov	r0, r4
 800949e:	4629      	mov	r1, r5
 80094a0:	f7f7 fb24 	bl	8000aec <__aeabi_dcmplt>
 80094a4:	b140      	cbz	r0, 80094b8 <_dtoa_r+0x168>
 80094a6:	4638      	mov	r0, r7
 80094a8:	f7f7 f844 	bl	8000534 <__aeabi_i2d>
 80094ac:	4622      	mov	r2, r4
 80094ae:	462b      	mov	r3, r5
 80094b0:	f7f7 fb12 	bl	8000ad8 <__aeabi_dcmpeq>
 80094b4:	b900      	cbnz	r0, 80094b8 <_dtoa_r+0x168>
 80094b6:	3f01      	subs	r7, #1
 80094b8:	2f16      	cmp	r7, #22
 80094ba:	d852      	bhi.n	8009562 <_dtoa_r+0x212>
 80094bc:	4b5d      	ldr	r3, [pc, #372]	@ (8009634 <_dtoa_r+0x2e4>)
 80094be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80094ca:	f7f7 fb0f 	bl	8000aec <__aeabi_dcmplt>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d049      	beq.n	8009566 <_dtoa_r+0x216>
 80094d2:	3f01      	subs	r7, #1
 80094d4:	2300      	movs	r3, #0
 80094d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80094d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094da:	1b9b      	subs	r3, r3, r6
 80094dc:	1e5a      	subs	r2, r3, #1
 80094de:	bf45      	ittet	mi
 80094e0:	f1c3 0301 	rsbmi	r3, r3, #1
 80094e4:	9300      	strmi	r3, [sp, #0]
 80094e6:	2300      	movpl	r3, #0
 80094e8:	2300      	movmi	r3, #0
 80094ea:	9206      	str	r2, [sp, #24]
 80094ec:	bf54      	ite	pl
 80094ee:	9300      	strpl	r3, [sp, #0]
 80094f0:	9306      	strmi	r3, [sp, #24]
 80094f2:	2f00      	cmp	r7, #0
 80094f4:	db39      	blt.n	800956a <_dtoa_r+0x21a>
 80094f6:	9b06      	ldr	r3, [sp, #24]
 80094f8:	970d      	str	r7, [sp, #52]	@ 0x34
 80094fa:	443b      	add	r3, r7
 80094fc:	9306      	str	r3, [sp, #24]
 80094fe:	2300      	movs	r3, #0
 8009500:	9308      	str	r3, [sp, #32]
 8009502:	9b07      	ldr	r3, [sp, #28]
 8009504:	2b09      	cmp	r3, #9
 8009506:	d863      	bhi.n	80095d0 <_dtoa_r+0x280>
 8009508:	2b05      	cmp	r3, #5
 800950a:	bfc4      	itt	gt
 800950c:	3b04      	subgt	r3, #4
 800950e:	9307      	strgt	r3, [sp, #28]
 8009510:	9b07      	ldr	r3, [sp, #28]
 8009512:	f1a3 0302 	sub.w	r3, r3, #2
 8009516:	bfcc      	ite	gt
 8009518:	2400      	movgt	r4, #0
 800951a:	2401      	movle	r4, #1
 800951c:	2b03      	cmp	r3, #3
 800951e:	d863      	bhi.n	80095e8 <_dtoa_r+0x298>
 8009520:	e8df f003 	tbb	[pc, r3]
 8009524:	2b375452 	.word	0x2b375452
 8009528:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800952c:	441e      	add	r6, r3
 800952e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009532:	2b20      	cmp	r3, #32
 8009534:	bfc1      	itttt	gt
 8009536:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800953a:	409f      	lslgt	r7, r3
 800953c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009540:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009544:	bfd6      	itet	le
 8009546:	f1c3 0320 	rsble	r3, r3, #32
 800954a:	ea47 0003 	orrgt.w	r0, r7, r3
 800954e:	fa04 f003 	lslle.w	r0, r4, r3
 8009552:	f7f6 ffdf 	bl	8000514 <__aeabi_ui2d>
 8009556:	2201      	movs	r2, #1
 8009558:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800955c:	3e01      	subs	r6, #1
 800955e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009560:	e776      	b.n	8009450 <_dtoa_r+0x100>
 8009562:	2301      	movs	r3, #1
 8009564:	e7b7      	b.n	80094d6 <_dtoa_r+0x186>
 8009566:	9010      	str	r0, [sp, #64]	@ 0x40
 8009568:	e7b6      	b.n	80094d8 <_dtoa_r+0x188>
 800956a:	9b00      	ldr	r3, [sp, #0]
 800956c:	1bdb      	subs	r3, r3, r7
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	427b      	negs	r3, r7
 8009572:	9308      	str	r3, [sp, #32]
 8009574:	2300      	movs	r3, #0
 8009576:	930d      	str	r3, [sp, #52]	@ 0x34
 8009578:	e7c3      	b.n	8009502 <_dtoa_r+0x1b2>
 800957a:	2301      	movs	r3, #1
 800957c:	9309      	str	r3, [sp, #36]	@ 0x24
 800957e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009580:	eb07 0b03 	add.w	fp, r7, r3
 8009584:	f10b 0301 	add.w	r3, fp, #1
 8009588:	2b01      	cmp	r3, #1
 800958a:	9303      	str	r3, [sp, #12]
 800958c:	bfb8      	it	lt
 800958e:	2301      	movlt	r3, #1
 8009590:	e006      	b.n	80095a0 <_dtoa_r+0x250>
 8009592:	2301      	movs	r3, #1
 8009594:	9309      	str	r3, [sp, #36]	@ 0x24
 8009596:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009598:	2b00      	cmp	r3, #0
 800959a:	dd28      	ble.n	80095ee <_dtoa_r+0x29e>
 800959c:	469b      	mov	fp, r3
 800959e:	9303      	str	r3, [sp, #12]
 80095a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80095a4:	2100      	movs	r1, #0
 80095a6:	2204      	movs	r2, #4
 80095a8:	f102 0514 	add.w	r5, r2, #20
 80095ac:	429d      	cmp	r5, r3
 80095ae:	d926      	bls.n	80095fe <_dtoa_r+0x2ae>
 80095b0:	6041      	str	r1, [r0, #4]
 80095b2:	4648      	mov	r0, r9
 80095b4:	f000 fd9c 	bl	800a0f0 <_Balloc>
 80095b8:	4682      	mov	sl, r0
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d142      	bne.n	8009644 <_dtoa_r+0x2f4>
 80095be:	4b1e      	ldr	r3, [pc, #120]	@ (8009638 <_dtoa_r+0x2e8>)
 80095c0:	4602      	mov	r2, r0
 80095c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80095c6:	e6da      	b.n	800937e <_dtoa_r+0x2e>
 80095c8:	2300      	movs	r3, #0
 80095ca:	e7e3      	b.n	8009594 <_dtoa_r+0x244>
 80095cc:	2300      	movs	r3, #0
 80095ce:	e7d5      	b.n	800957c <_dtoa_r+0x22c>
 80095d0:	2401      	movs	r4, #1
 80095d2:	2300      	movs	r3, #0
 80095d4:	9307      	str	r3, [sp, #28]
 80095d6:	9409      	str	r4, [sp, #36]	@ 0x24
 80095d8:	f04f 3bff 	mov.w	fp, #4294967295
 80095dc:	2200      	movs	r2, #0
 80095de:	f8cd b00c 	str.w	fp, [sp, #12]
 80095e2:	2312      	movs	r3, #18
 80095e4:	920c      	str	r2, [sp, #48]	@ 0x30
 80095e6:	e7db      	b.n	80095a0 <_dtoa_r+0x250>
 80095e8:	2301      	movs	r3, #1
 80095ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ec:	e7f4      	b.n	80095d8 <_dtoa_r+0x288>
 80095ee:	f04f 0b01 	mov.w	fp, #1
 80095f2:	f8cd b00c 	str.w	fp, [sp, #12]
 80095f6:	465b      	mov	r3, fp
 80095f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80095fc:	e7d0      	b.n	80095a0 <_dtoa_r+0x250>
 80095fe:	3101      	adds	r1, #1
 8009600:	0052      	lsls	r2, r2, #1
 8009602:	e7d1      	b.n	80095a8 <_dtoa_r+0x258>
 8009604:	f3af 8000 	nop.w
 8009608:	636f4361 	.word	0x636f4361
 800960c:	3fd287a7 	.word	0x3fd287a7
 8009610:	8b60c8b3 	.word	0x8b60c8b3
 8009614:	3fc68a28 	.word	0x3fc68a28
 8009618:	509f79fb 	.word	0x509f79fb
 800961c:	3fd34413 	.word	0x3fd34413
 8009620:	0800ca36 	.word	0x0800ca36
 8009624:	0800ca4d 	.word	0x0800ca4d
 8009628:	7ff00000 	.word	0x7ff00000
 800962c:	0800ca01 	.word	0x0800ca01
 8009630:	3ff80000 	.word	0x3ff80000
 8009634:	0800cc00 	.word	0x0800cc00
 8009638:	0800caa5 	.word	0x0800caa5
 800963c:	0800ca32 	.word	0x0800ca32
 8009640:	0800ca00 	.word	0x0800ca00
 8009644:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009648:	6018      	str	r0, [r3, #0]
 800964a:	9b03      	ldr	r3, [sp, #12]
 800964c:	2b0e      	cmp	r3, #14
 800964e:	f200 80a1 	bhi.w	8009794 <_dtoa_r+0x444>
 8009652:	2c00      	cmp	r4, #0
 8009654:	f000 809e 	beq.w	8009794 <_dtoa_r+0x444>
 8009658:	2f00      	cmp	r7, #0
 800965a:	dd33      	ble.n	80096c4 <_dtoa_r+0x374>
 800965c:	4b9c      	ldr	r3, [pc, #624]	@ (80098d0 <_dtoa_r+0x580>)
 800965e:	f007 020f 	and.w	r2, r7, #15
 8009662:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009666:	ed93 7b00 	vldr	d7, [r3]
 800966a:	05f8      	lsls	r0, r7, #23
 800966c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009670:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009674:	d516      	bpl.n	80096a4 <_dtoa_r+0x354>
 8009676:	4b97      	ldr	r3, [pc, #604]	@ (80098d4 <_dtoa_r+0x584>)
 8009678:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800967c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009680:	f7f7 f8ec 	bl	800085c <__aeabi_ddiv>
 8009684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009688:	f004 040f 	and.w	r4, r4, #15
 800968c:	2603      	movs	r6, #3
 800968e:	4d91      	ldr	r5, [pc, #580]	@ (80098d4 <_dtoa_r+0x584>)
 8009690:	b954      	cbnz	r4, 80096a8 <_dtoa_r+0x358>
 8009692:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800969a:	f7f7 f8df 	bl	800085c <__aeabi_ddiv>
 800969e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096a2:	e028      	b.n	80096f6 <_dtoa_r+0x3a6>
 80096a4:	2602      	movs	r6, #2
 80096a6:	e7f2      	b.n	800968e <_dtoa_r+0x33e>
 80096a8:	07e1      	lsls	r1, r4, #31
 80096aa:	d508      	bpl.n	80096be <_dtoa_r+0x36e>
 80096ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80096b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096b4:	f7f6 ffa8 	bl	8000608 <__aeabi_dmul>
 80096b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80096bc:	3601      	adds	r6, #1
 80096be:	1064      	asrs	r4, r4, #1
 80096c0:	3508      	adds	r5, #8
 80096c2:	e7e5      	b.n	8009690 <_dtoa_r+0x340>
 80096c4:	f000 80af 	beq.w	8009826 <_dtoa_r+0x4d6>
 80096c8:	427c      	negs	r4, r7
 80096ca:	4b81      	ldr	r3, [pc, #516]	@ (80098d0 <_dtoa_r+0x580>)
 80096cc:	4d81      	ldr	r5, [pc, #516]	@ (80098d4 <_dtoa_r+0x584>)
 80096ce:	f004 020f 	and.w	r2, r4, #15
 80096d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096de:	f7f6 ff93 	bl	8000608 <__aeabi_dmul>
 80096e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096e6:	1124      	asrs	r4, r4, #4
 80096e8:	2300      	movs	r3, #0
 80096ea:	2602      	movs	r6, #2
 80096ec:	2c00      	cmp	r4, #0
 80096ee:	f040 808f 	bne.w	8009810 <_dtoa_r+0x4c0>
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1d3      	bne.n	800969e <_dtoa_r+0x34e>
 80096f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80096f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f000 8094 	beq.w	800982a <_dtoa_r+0x4da>
 8009702:	4b75      	ldr	r3, [pc, #468]	@ (80098d8 <_dtoa_r+0x588>)
 8009704:	2200      	movs	r2, #0
 8009706:	4620      	mov	r0, r4
 8009708:	4629      	mov	r1, r5
 800970a:	f7f7 f9ef 	bl	8000aec <__aeabi_dcmplt>
 800970e:	2800      	cmp	r0, #0
 8009710:	f000 808b 	beq.w	800982a <_dtoa_r+0x4da>
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 8087 	beq.w	800982a <_dtoa_r+0x4da>
 800971c:	f1bb 0f00 	cmp.w	fp, #0
 8009720:	dd34      	ble.n	800978c <_dtoa_r+0x43c>
 8009722:	4620      	mov	r0, r4
 8009724:	4b6d      	ldr	r3, [pc, #436]	@ (80098dc <_dtoa_r+0x58c>)
 8009726:	2200      	movs	r2, #0
 8009728:	4629      	mov	r1, r5
 800972a:	f7f6 ff6d 	bl	8000608 <__aeabi_dmul>
 800972e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009732:	f107 38ff 	add.w	r8, r7, #4294967295
 8009736:	3601      	adds	r6, #1
 8009738:	465c      	mov	r4, fp
 800973a:	4630      	mov	r0, r6
 800973c:	f7f6 fefa 	bl	8000534 <__aeabi_i2d>
 8009740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009744:	f7f6 ff60 	bl	8000608 <__aeabi_dmul>
 8009748:	4b65      	ldr	r3, [pc, #404]	@ (80098e0 <_dtoa_r+0x590>)
 800974a:	2200      	movs	r2, #0
 800974c:	f7f6 fda6 	bl	800029c <__adddf3>
 8009750:	4605      	mov	r5, r0
 8009752:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009756:	2c00      	cmp	r4, #0
 8009758:	d16a      	bne.n	8009830 <_dtoa_r+0x4e0>
 800975a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800975e:	4b61      	ldr	r3, [pc, #388]	@ (80098e4 <_dtoa_r+0x594>)
 8009760:	2200      	movs	r2, #0
 8009762:	f7f6 fd99 	bl	8000298 <__aeabi_dsub>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800976e:	462a      	mov	r2, r5
 8009770:	4633      	mov	r3, r6
 8009772:	f7f7 f9d9 	bl	8000b28 <__aeabi_dcmpgt>
 8009776:	2800      	cmp	r0, #0
 8009778:	f040 8298 	bne.w	8009cac <_dtoa_r+0x95c>
 800977c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009780:	462a      	mov	r2, r5
 8009782:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009786:	f7f7 f9b1 	bl	8000aec <__aeabi_dcmplt>
 800978a:	bb38      	cbnz	r0, 80097dc <_dtoa_r+0x48c>
 800978c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009790:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009794:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009796:	2b00      	cmp	r3, #0
 8009798:	f2c0 8157 	blt.w	8009a4a <_dtoa_r+0x6fa>
 800979c:	2f0e      	cmp	r7, #14
 800979e:	f300 8154 	bgt.w	8009a4a <_dtoa_r+0x6fa>
 80097a2:	4b4b      	ldr	r3, [pc, #300]	@ (80098d0 <_dtoa_r+0x580>)
 80097a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097a8:	ed93 7b00 	vldr	d7, [r3]
 80097ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	ed8d 7b00 	vstr	d7, [sp]
 80097b4:	f280 80e5 	bge.w	8009982 <_dtoa_r+0x632>
 80097b8:	9b03      	ldr	r3, [sp, #12]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f300 80e1 	bgt.w	8009982 <_dtoa_r+0x632>
 80097c0:	d10c      	bne.n	80097dc <_dtoa_r+0x48c>
 80097c2:	4b48      	ldr	r3, [pc, #288]	@ (80098e4 <_dtoa_r+0x594>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	ec51 0b17 	vmov	r0, r1, d7
 80097ca:	f7f6 ff1d 	bl	8000608 <__aeabi_dmul>
 80097ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097d2:	f7f7 f99f 	bl	8000b14 <__aeabi_dcmpge>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	f000 8266 	beq.w	8009ca8 <_dtoa_r+0x958>
 80097dc:	2400      	movs	r4, #0
 80097de:	4625      	mov	r5, r4
 80097e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097e2:	4656      	mov	r6, sl
 80097e4:	ea6f 0803 	mvn.w	r8, r3
 80097e8:	2700      	movs	r7, #0
 80097ea:	4621      	mov	r1, r4
 80097ec:	4648      	mov	r0, r9
 80097ee:	f000 fcbf 	bl	800a170 <_Bfree>
 80097f2:	2d00      	cmp	r5, #0
 80097f4:	f000 80bd 	beq.w	8009972 <_dtoa_r+0x622>
 80097f8:	b12f      	cbz	r7, 8009806 <_dtoa_r+0x4b6>
 80097fa:	42af      	cmp	r7, r5
 80097fc:	d003      	beq.n	8009806 <_dtoa_r+0x4b6>
 80097fe:	4639      	mov	r1, r7
 8009800:	4648      	mov	r0, r9
 8009802:	f000 fcb5 	bl	800a170 <_Bfree>
 8009806:	4629      	mov	r1, r5
 8009808:	4648      	mov	r0, r9
 800980a:	f000 fcb1 	bl	800a170 <_Bfree>
 800980e:	e0b0      	b.n	8009972 <_dtoa_r+0x622>
 8009810:	07e2      	lsls	r2, r4, #31
 8009812:	d505      	bpl.n	8009820 <_dtoa_r+0x4d0>
 8009814:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009818:	f7f6 fef6 	bl	8000608 <__aeabi_dmul>
 800981c:	3601      	adds	r6, #1
 800981e:	2301      	movs	r3, #1
 8009820:	1064      	asrs	r4, r4, #1
 8009822:	3508      	adds	r5, #8
 8009824:	e762      	b.n	80096ec <_dtoa_r+0x39c>
 8009826:	2602      	movs	r6, #2
 8009828:	e765      	b.n	80096f6 <_dtoa_r+0x3a6>
 800982a:	9c03      	ldr	r4, [sp, #12]
 800982c:	46b8      	mov	r8, r7
 800982e:	e784      	b.n	800973a <_dtoa_r+0x3ea>
 8009830:	4b27      	ldr	r3, [pc, #156]	@ (80098d0 <_dtoa_r+0x580>)
 8009832:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009834:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009838:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800983c:	4454      	add	r4, sl
 800983e:	2900      	cmp	r1, #0
 8009840:	d054      	beq.n	80098ec <_dtoa_r+0x59c>
 8009842:	4929      	ldr	r1, [pc, #164]	@ (80098e8 <_dtoa_r+0x598>)
 8009844:	2000      	movs	r0, #0
 8009846:	f7f7 f809 	bl	800085c <__aeabi_ddiv>
 800984a:	4633      	mov	r3, r6
 800984c:	462a      	mov	r2, r5
 800984e:	f7f6 fd23 	bl	8000298 <__aeabi_dsub>
 8009852:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009856:	4656      	mov	r6, sl
 8009858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800985c:	f7f7 f984 	bl	8000b68 <__aeabi_d2iz>
 8009860:	4605      	mov	r5, r0
 8009862:	f7f6 fe67 	bl	8000534 <__aeabi_i2d>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800986e:	f7f6 fd13 	bl	8000298 <__aeabi_dsub>
 8009872:	3530      	adds	r5, #48	@ 0x30
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800987c:	f806 5b01 	strb.w	r5, [r6], #1
 8009880:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009884:	f7f7 f932 	bl	8000aec <__aeabi_dcmplt>
 8009888:	2800      	cmp	r0, #0
 800988a:	d172      	bne.n	8009972 <_dtoa_r+0x622>
 800988c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009890:	4911      	ldr	r1, [pc, #68]	@ (80098d8 <_dtoa_r+0x588>)
 8009892:	2000      	movs	r0, #0
 8009894:	f7f6 fd00 	bl	8000298 <__aeabi_dsub>
 8009898:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800989c:	f7f7 f926 	bl	8000aec <__aeabi_dcmplt>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	f040 80b4 	bne.w	8009a0e <_dtoa_r+0x6be>
 80098a6:	42a6      	cmp	r6, r4
 80098a8:	f43f af70 	beq.w	800978c <_dtoa_r+0x43c>
 80098ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80098b0:	4b0a      	ldr	r3, [pc, #40]	@ (80098dc <_dtoa_r+0x58c>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	f7f6 fea8 	bl	8000608 <__aeabi_dmul>
 80098b8:	4b08      	ldr	r3, [pc, #32]	@ (80098dc <_dtoa_r+0x58c>)
 80098ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098be:	2200      	movs	r2, #0
 80098c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098c4:	f7f6 fea0 	bl	8000608 <__aeabi_dmul>
 80098c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098cc:	e7c4      	b.n	8009858 <_dtoa_r+0x508>
 80098ce:	bf00      	nop
 80098d0:	0800cc00 	.word	0x0800cc00
 80098d4:	0800cbd8 	.word	0x0800cbd8
 80098d8:	3ff00000 	.word	0x3ff00000
 80098dc:	40240000 	.word	0x40240000
 80098e0:	401c0000 	.word	0x401c0000
 80098e4:	40140000 	.word	0x40140000
 80098e8:	3fe00000 	.word	0x3fe00000
 80098ec:	4631      	mov	r1, r6
 80098ee:	4628      	mov	r0, r5
 80098f0:	f7f6 fe8a 	bl	8000608 <__aeabi_dmul>
 80098f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80098fa:	4656      	mov	r6, sl
 80098fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009900:	f7f7 f932 	bl	8000b68 <__aeabi_d2iz>
 8009904:	4605      	mov	r5, r0
 8009906:	f7f6 fe15 	bl	8000534 <__aeabi_i2d>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009912:	f7f6 fcc1 	bl	8000298 <__aeabi_dsub>
 8009916:	3530      	adds	r5, #48	@ 0x30
 8009918:	f806 5b01 	strb.w	r5, [r6], #1
 800991c:	4602      	mov	r2, r0
 800991e:	460b      	mov	r3, r1
 8009920:	42a6      	cmp	r6, r4
 8009922:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009926:	f04f 0200 	mov.w	r2, #0
 800992a:	d124      	bne.n	8009976 <_dtoa_r+0x626>
 800992c:	4baf      	ldr	r3, [pc, #700]	@ (8009bec <_dtoa_r+0x89c>)
 800992e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009932:	f7f6 fcb3 	bl	800029c <__adddf3>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800993e:	f7f7 f8f3 	bl	8000b28 <__aeabi_dcmpgt>
 8009942:	2800      	cmp	r0, #0
 8009944:	d163      	bne.n	8009a0e <_dtoa_r+0x6be>
 8009946:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800994a:	49a8      	ldr	r1, [pc, #672]	@ (8009bec <_dtoa_r+0x89c>)
 800994c:	2000      	movs	r0, #0
 800994e:	f7f6 fca3 	bl	8000298 <__aeabi_dsub>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800995a:	f7f7 f8c7 	bl	8000aec <__aeabi_dcmplt>
 800995e:	2800      	cmp	r0, #0
 8009960:	f43f af14 	beq.w	800978c <_dtoa_r+0x43c>
 8009964:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009966:	1e73      	subs	r3, r6, #1
 8009968:	9313      	str	r3, [sp, #76]	@ 0x4c
 800996a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800996e:	2b30      	cmp	r3, #48	@ 0x30
 8009970:	d0f8      	beq.n	8009964 <_dtoa_r+0x614>
 8009972:	4647      	mov	r7, r8
 8009974:	e03b      	b.n	80099ee <_dtoa_r+0x69e>
 8009976:	4b9e      	ldr	r3, [pc, #632]	@ (8009bf0 <_dtoa_r+0x8a0>)
 8009978:	f7f6 fe46 	bl	8000608 <__aeabi_dmul>
 800997c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009980:	e7bc      	b.n	80098fc <_dtoa_r+0x5ac>
 8009982:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009986:	4656      	mov	r6, sl
 8009988:	e9dd 2300 	ldrd	r2, r3, [sp]
 800998c:	4620      	mov	r0, r4
 800998e:	4629      	mov	r1, r5
 8009990:	f7f6 ff64 	bl	800085c <__aeabi_ddiv>
 8009994:	f7f7 f8e8 	bl	8000b68 <__aeabi_d2iz>
 8009998:	4680      	mov	r8, r0
 800999a:	f7f6 fdcb 	bl	8000534 <__aeabi_i2d>
 800999e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099a2:	f7f6 fe31 	bl	8000608 <__aeabi_dmul>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4620      	mov	r0, r4
 80099ac:	4629      	mov	r1, r5
 80099ae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80099b2:	f7f6 fc71 	bl	8000298 <__aeabi_dsub>
 80099b6:	f806 4b01 	strb.w	r4, [r6], #1
 80099ba:	9d03      	ldr	r5, [sp, #12]
 80099bc:	eba6 040a 	sub.w	r4, r6, sl
 80099c0:	42a5      	cmp	r5, r4
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	d133      	bne.n	8009a30 <_dtoa_r+0x6e0>
 80099c8:	f7f6 fc68 	bl	800029c <__adddf3>
 80099cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099d0:	4604      	mov	r4, r0
 80099d2:	460d      	mov	r5, r1
 80099d4:	f7f7 f8a8 	bl	8000b28 <__aeabi_dcmpgt>
 80099d8:	b9c0      	cbnz	r0, 8009a0c <_dtoa_r+0x6bc>
 80099da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099de:	4620      	mov	r0, r4
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7f7 f879 	bl	8000ad8 <__aeabi_dcmpeq>
 80099e6:	b110      	cbz	r0, 80099ee <_dtoa_r+0x69e>
 80099e8:	f018 0f01 	tst.w	r8, #1
 80099ec:	d10e      	bne.n	8009a0c <_dtoa_r+0x6bc>
 80099ee:	9902      	ldr	r1, [sp, #8]
 80099f0:	4648      	mov	r0, r9
 80099f2:	f000 fbbd 	bl	800a170 <_Bfree>
 80099f6:	2300      	movs	r3, #0
 80099f8:	7033      	strb	r3, [r6, #0]
 80099fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099fc:	3701      	adds	r7, #1
 80099fe:	601f      	str	r7, [r3, #0]
 8009a00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 824b 	beq.w	8009e9e <_dtoa_r+0xb4e>
 8009a08:	601e      	str	r6, [r3, #0]
 8009a0a:	e248      	b.n	8009e9e <_dtoa_r+0xb4e>
 8009a0c:	46b8      	mov	r8, r7
 8009a0e:	4633      	mov	r3, r6
 8009a10:	461e      	mov	r6, r3
 8009a12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a16:	2a39      	cmp	r2, #57	@ 0x39
 8009a18:	d106      	bne.n	8009a28 <_dtoa_r+0x6d8>
 8009a1a:	459a      	cmp	sl, r3
 8009a1c:	d1f8      	bne.n	8009a10 <_dtoa_r+0x6c0>
 8009a1e:	2230      	movs	r2, #48	@ 0x30
 8009a20:	f108 0801 	add.w	r8, r8, #1
 8009a24:	f88a 2000 	strb.w	r2, [sl]
 8009a28:	781a      	ldrb	r2, [r3, #0]
 8009a2a:	3201      	adds	r2, #1
 8009a2c:	701a      	strb	r2, [r3, #0]
 8009a2e:	e7a0      	b.n	8009972 <_dtoa_r+0x622>
 8009a30:	4b6f      	ldr	r3, [pc, #444]	@ (8009bf0 <_dtoa_r+0x8a0>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	f7f6 fde8 	bl	8000608 <__aeabi_dmul>
 8009a38:	2200      	movs	r2, #0
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	460d      	mov	r5, r1
 8009a40:	f7f7 f84a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d09f      	beq.n	8009988 <_dtoa_r+0x638>
 8009a48:	e7d1      	b.n	80099ee <_dtoa_r+0x69e>
 8009a4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a4c:	2a00      	cmp	r2, #0
 8009a4e:	f000 80ea 	beq.w	8009c26 <_dtoa_r+0x8d6>
 8009a52:	9a07      	ldr	r2, [sp, #28]
 8009a54:	2a01      	cmp	r2, #1
 8009a56:	f300 80cd 	bgt.w	8009bf4 <_dtoa_r+0x8a4>
 8009a5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a5c:	2a00      	cmp	r2, #0
 8009a5e:	f000 80c1 	beq.w	8009be4 <_dtoa_r+0x894>
 8009a62:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a66:	9c08      	ldr	r4, [sp, #32]
 8009a68:	9e00      	ldr	r6, [sp, #0]
 8009a6a:	9a00      	ldr	r2, [sp, #0]
 8009a6c:	441a      	add	r2, r3
 8009a6e:	9200      	str	r2, [sp, #0]
 8009a70:	9a06      	ldr	r2, [sp, #24]
 8009a72:	2101      	movs	r1, #1
 8009a74:	441a      	add	r2, r3
 8009a76:	4648      	mov	r0, r9
 8009a78:	9206      	str	r2, [sp, #24]
 8009a7a:	f000 fc77 	bl	800a36c <__i2b>
 8009a7e:	4605      	mov	r5, r0
 8009a80:	b166      	cbz	r6, 8009a9c <_dtoa_r+0x74c>
 8009a82:	9b06      	ldr	r3, [sp, #24]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	dd09      	ble.n	8009a9c <_dtoa_r+0x74c>
 8009a88:	42b3      	cmp	r3, r6
 8009a8a:	9a00      	ldr	r2, [sp, #0]
 8009a8c:	bfa8      	it	ge
 8009a8e:	4633      	movge	r3, r6
 8009a90:	1ad2      	subs	r2, r2, r3
 8009a92:	9200      	str	r2, [sp, #0]
 8009a94:	9a06      	ldr	r2, [sp, #24]
 8009a96:	1af6      	subs	r6, r6, r3
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	9306      	str	r3, [sp, #24]
 8009a9c:	9b08      	ldr	r3, [sp, #32]
 8009a9e:	b30b      	cbz	r3, 8009ae4 <_dtoa_r+0x794>
 8009aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f000 80c6 	beq.w	8009c34 <_dtoa_r+0x8e4>
 8009aa8:	2c00      	cmp	r4, #0
 8009aaa:	f000 80c0 	beq.w	8009c2e <_dtoa_r+0x8de>
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	4648      	mov	r0, r9
 8009ab4:	f000 fd12 	bl	800a4dc <__pow5mult>
 8009ab8:	9a02      	ldr	r2, [sp, #8]
 8009aba:	4601      	mov	r1, r0
 8009abc:	4605      	mov	r5, r0
 8009abe:	4648      	mov	r0, r9
 8009ac0:	f000 fc6a 	bl	800a398 <__multiply>
 8009ac4:	9902      	ldr	r1, [sp, #8]
 8009ac6:	4680      	mov	r8, r0
 8009ac8:	4648      	mov	r0, r9
 8009aca:	f000 fb51 	bl	800a170 <_Bfree>
 8009ace:	9b08      	ldr	r3, [sp, #32]
 8009ad0:	1b1b      	subs	r3, r3, r4
 8009ad2:	9308      	str	r3, [sp, #32]
 8009ad4:	f000 80b1 	beq.w	8009c3a <_dtoa_r+0x8ea>
 8009ad8:	9a08      	ldr	r2, [sp, #32]
 8009ada:	4641      	mov	r1, r8
 8009adc:	4648      	mov	r0, r9
 8009ade:	f000 fcfd 	bl	800a4dc <__pow5mult>
 8009ae2:	9002      	str	r0, [sp, #8]
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	4648      	mov	r0, r9
 8009ae8:	f000 fc40 	bl	800a36c <__i2b>
 8009aec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009aee:	4604      	mov	r4, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 81d8 	beq.w	8009ea6 <_dtoa_r+0xb56>
 8009af6:	461a      	mov	r2, r3
 8009af8:	4601      	mov	r1, r0
 8009afa:	4648      	mov	r0, r9
 8009afc:	f000 fcee 	bl	800a4dc <__pow5mult>
 8009b00:	9b07      	ldr	r3, [sp, #28]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	4604      	mov	r4, r0
 8009b06:	f300 809f 	bgt.w	8009c48 <_dtoa_r+0x8f8>
 8009b0a:	9b04      	ldr	r3, [sp, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f040 8097 	bne.w	8009c40 <_dtoa_r+0x8f0>
 8009b12:	9b05      	ldr	r3, [sp, #20]
 8009b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f040 8093 	bne.w	8009c44 <_dtoa_r+0x8f4>
 8009b1e:	9b05      	ldr	r3, [sp, #20]
 8009b20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b24:	0d1b      	lsrs	r3, r3, #20
 8009b26:	051b      	lsls	r3, r3, #20
 8009b28:	b133      	cbz	r3, 8009b38 <_dtoa_r+0x7e8>
 8009b2a:	9b00      	ldr	r3, [sp, #0]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	9b06      	ldr	r3, [sp, #24]
 8009b32:	3301      	adds	r3, #1
 8009b34:	9306      	str	r3, [sp, #24]
 8009b36:	2301      	movs	r3, #1
 8009b38:	9308      	str	r3, [sp, #32]
 8009b3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 81b8 	beq.w	8009eb2 <_dtoa_r+0xb62>
 8009b42:	6923      	ldr	r3, [r4, #16]
 8009b44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b48:	6918      	ldr	r0, [r3, #16]
 8009b4a:	f000 fbc3 	bl	800a2d4 <__hi0bits>
 8009b4e:	f1c0 0020 	rsb	r0, r0, #32
 8009b52:	9b06      	ldr	r3, [sp, #24]
 8009b54:	4418      	add	r0, r3
 8009b56:	f010 001f 	ands.w	r0, r0, #31
 8009b5a:	f000 8082 	beq.w	8009c62 <_dtoa_r+0x912>
 8009b5e:	f1c0 0320 	rsb	r3, r0, #32
 8009b62:	2b04      	cmp	r3, #4
 8009b64:	dd73      	ble.n	8009c4e <_dtoa_r+0x8fe>
 8009b66:	9b00      	ldr	r3, [sp, #0]
 8009b68:	f1c0 001c 	rsb	r0, r0, #28
 8009b6c:	4403      	add	r3, r0
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	9b06      	ldr	r3, [sp, #24]
 8009b72:	4403      	add	r3, r0
 8009b74:	4406      	add	r6, r0
 8009b76:	9306      	str	r3, [sp, #24]
 8009b78:	9b00      	ldr	r3, [sp, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	dd05      	ble.n	8009b8a <_dtoa_r+0x83a>
 8009b7e:	9902      	ldr	r1, [sp, #8]
 8009b80:	461a      	mov	r2, r3
 8009b82:	4648      	mov	r0, r9
 8009b84:	f000 fd04 	bl	800a590 <__lshift>
 8009b88:	9002      	str	r0, [sp, #8]
 8009b8a:	9b06      	ldr	r3, [sp, #24]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	dd05      	ble.n	8009b9c <_dtoa_r+0x84c>
 8009b90:	4621      	mov	r1, r4
 8009b92:	461a      	mov	r2, r3
 8009b94:	4648      	mov	r0, r9
 8009b96:	f000 fcfb 	bl	800a590 <__lshift>
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d061      	beq.n	8009c66 <_dtoa_r+0x916>
 8009ba2:	9802      	ldr	r0, [sp, #8]
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	f000 fd5f 	bl	800a668 <__mcmp>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	da5b      	bge.n	8009c66 <_dtoa_r+0x916>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	9902      	ldr	r1, [sp, #8]
 8009bb2:	220a      	movs	r2, #10
 8009bb4:	4648      	mov	r0, r9
 8009bb6:	f000 fafd 	bl	800a1b4 <__multadd>
 8009bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bbc:	9002      	str	r0, [sp, #8]
 8009bbe:	f107 38ff 	add.w	r8, r7, #4294967295
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 8177 	beq.w	8009eb6 <_dtoa_r+0xb66>
 8009bc8:	4629      	mov	r1, r5
 8009bca:	2300      	movs	r3, #0
 8009bcc:	220a      	movs	r2, #10
 8009bce:	4648      	mov	r0, r9
 8009bd0:	f000 faf0 	bl	800a1b4 <__multadd>
 8009bd4:	f1bb 0f00 	cmp.w	fp, #0
 8009bd8:	4605      	mov	r5, r0
 8009bda:	dc6f      	bgt.n	8009cbc <_dtoa_r+0x96c>
 8009bdc:	9b07      	ldr	r3, [sp, #28]
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	dc49      	bgt.n	8009c76 <_dtoa_r+0x926>
 8009be2:	e06b      	b.n	8009cbc <_dtoa_r+0x96c>
 8009be4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009be6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009bea:	e73c      	b.n	8009a66 <_dtoa_r+0x716>
 8009bec:	3fe00000 	.word	0x3fe00000
 8009bf0:	40240000 	.word	0x40240000
 8009bf4:	9b03      	ldr	r3, [sp, #12]
 8009bf6:	1e5c      	subs	r4, r3, #1
 8009bf8:	9b08      	ldr	r3, [sp, #32]
 8009bfa:	42a3      	cmp	r3, r4
 8009bfc:	db09      	blt.n	8009c12 <_dtoa_r+0x8c2>
 8009bfe:	1b1c      	subs	r4, r3, r4
 8009c00:	9b03      	ldr	r3, [sp, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f6bf af30 	bge.w	8009a68 <_dtoa_r+0x718>
 8009c08:	9b00      	ldr	r3, [sp, #0]
 8009c0a:	9a03      	ldr	r2, [sp, #12]
 8009c0c:	1a9e      	subs	r6, r3, r2
 8009c0e:	2300      	movs	r3, #0
 8009c10:	e72b      	b.n	8009a6a <_dtoa_r+0x71a>
 8009c12:	9b08      	ldr	r3, [sp, #32]
 8009c14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c16:	9408      	str	r4, [sp, #32]
 8009c18:	1ae3      	subs	r3, r4, r3
 8009c1a:	441a      	add	r2, r3
 8009c1c:	9e00      	ldr	r6, [sp, #0]
 8009c1e:	9b03      	ldr	r3, [sp, #12]
 8009c20:	920d      	str	r2, [sp, #52]	@ 0x34
 8009c22:	2400      	movs	r4, #0
 8009c24:	e721      	b.n	8009a6a <_dtoa_r+0x71a>
 8009c26:	9c08      	ldr	r4, [sp, #32]
 8009c28:	9e00      	ldr	r6, [sp, #0]
 8009c2a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009c2c:	e728      	b.n	8009a80 <_dtoa_r+0x730>
 8009c2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009c32:	e751      	b.n	8009ad8 <_dtoa_r+0x788>
 8009c34:	9a08      	ldr	r2, [sp, #32]
 8009c36:	9902      	ldr	r1, [sp, #8]
 8009c38:	e750      	b.n	8009adc <_dtoa_r+0x78c>
 8009c3a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009c3e:	e751      	b.n	8009ae4 <_dtoa_r+0x794>
 8009c40:	2300      	movs	r3, #0
 8009c42:	e779      	b.n	8009b38 <_dtoa_r+0x7e8>
 8009c44:	9b04      	ldr	r3, [sp, #16]
 8009c46:	e777      	b.n	8009b38 <_dtoa_r+0x7e8>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	9308      	str	r3, [sp, #32]
 8009c4c:	e779      	b.n	8009b42 <_dtoa_r+0x7f2>
 8009c4e:	d093      	beq.n	8009b78 <_dtoa_r+0x828>
 8009c50:	9a00      	ldr	r2, [sp, #0]
 8009c52:	331c      	adds	r3, #28
 8009c54:	441a      	add	r2, r3
 8009c56:	9200      	str	r2, [sp, #0]
 8009c58:	9a06      	ldr	r2, [sp, #24]
 8009c5a:	441a      	add	r2, r3
 8009c5c:	441e      	add	r6, r3
 8009c5e:	9206      	str	r2, [sp, #24]
 8009c60:	e78a      	b.n	8009b78 <_dtoa_r+0x828>
 8009c62:	4603      	mov	r3, r0
 8009c64:	e7f4      	b.n	8009c50 <_dtoa_r+0x900>
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	46b8      	mov	r8, r7
 8009c6c:	dc20      	bgt.n	8009cb0 <_dtoa_r+0x960>
 8009c6e:	469b      	mov	fp, r3
 8009c70:	9b07      	ldr	r3, [sp, #28]
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	dd1e      	ble.n	8009cb4 <_dtoa_r+0x964>
 8009c76:	f1bb 0f00 	cmp.w	fp, #0
 8009c7a:	f47f adb1 	bne.w	80097e0 <_dtoa_r+0x490>
 8009c7e:	4621      	mov	r1, r4
 8009c80:	465b      	mov	r3, fp
 8009c82:	2205      	movs	r2, #5
 8009c84:	4648      	mov	r0, r9
 8009c86:	f000 fa95 	bl	800a1b4 <__multadd>
 8009c8a:	4601      	mov	r1, r0
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	9802      	ldr	r0, [sp, #8]
 8009c90:	f000 fcea 	bl	800a668 <__mcmp>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	f77f ada3 	ble.w	80097e0 <_dtoa_r+0x490>
 8009c9a:	4656      	mov	r6, sl
 8009c9c:	2331      	movs	r3, #49	@ 0x31
 8009c9e:	f806 3b01 	strb.w	r3, [r6], #1
 8009ca2:	f108 0801 	add.w	r8, r8, #1
 8009ca6:	e59f      	b.n	80097e8 <_dtoa_r+0x498>
 8009ca8:	9c03      	ldr	r4, [sp, #12]
 8009caa:	46b8      	mov	r8, r7
 8009cac:	4625      	mov	r5, r4
 8009cae:	e7f4      	b.n	8009c9a <_dtoa_r+0x94a>
 8009cb0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 8101 	beq.w	8009ebe <_dtoa_r+0xb6e>
 8009cbc:	2e00      	cmp	r6, #0
 8009cbe:	dd05      	ble.n	8009ccc <_dtoa_r+0x97c>
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4632      	mov	r2, r6
 8009cc4:	4648      	mov	r0, r9
 8009cc6:	f000 fc63 	bl	800a590 <__lshift>
 8009cca:	4605      	mov	r5, r0
 8009ccc:	9b08      	ldr	r3, [sp, #32]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d05c      	beq.n	8009d8c <_dtoa_r+0xa3c>
 8009cd2:	6869      	ldr	r1, [r5, #4]
 8009cd4:	4648      	mov	r0, r9
 8009cd6:	f000 fa0b 	bl	800a0f0 <_Balloc>
 8009cda:	4606      	mov	r6, r0
 8009cdc:	b928      	cbnz	r0, 8009cea <_dtoa_r+0x99a>
 8009cde:	4b82      	ldr	r3, [pc, #520]	@ (8009ee8 <_dtoa_r+0xb98>)
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ce6:	f7ff bb4a 	b.w	800937e <_dtoa_r+0x2e>
 8009cea:	692a      	ldr	r2, [r5, #16]
 8009cec:	3202      	adds	r2, #2
 8009cee:	0092      	lsls	r2, r2, #2
 8009cf0:	f105 010c 	add.w	r1, r5, #12
 8009cf4:	300c      	adds	r0, #12
 8009cf6:	f7ff fa8e 	bl	8009216 <memcpy>
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	4648      	mov	r0, r9
 8009d00:	f000 fc46 	bl	800a590 <__lshift>
 8009d04:	f10a 0301 	add.w	r3, sl, #1
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	eb0a 030b 	add.w	r3, sl, fp
 8009d0e:	9308      	str	r3, [sp, #32]
 8009d10:	9b04      	ldr	r3, [sp, #16]
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	462f      	mov	r7, r5
 8009d18:	9306      	str	r3, [sp, #24]
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	9b00      	ldr	r3, [sp, #0]
 8009d1e:	9802      	ldr	r0, [sp, #8]
 8009d20:	4621      	mov	r1, r4
 8009d22:	f103 3bff 	add.w	fp, r3, #4294967295
 8009d26:	f7ff fa8b 	bl	8009240 <quorem>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	3330      	adds	r3, #48	@ 0x30
 8009d2e:	9003      	str	r0, [sp, #12]
 8009d30:	4639      	mov	r1, r7
 8009d32:	9802      	ldr	r0, [sp, #8]
 8009d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d36:	f000 fc97 	bl	800a668 <__mcmp>
 8009d3a:	462a      	mov	r2, r5
 8009d3c:	9004      	str	r0, [sp, #16]
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4648      	mov	r0, r9
 8009d42:	f000 fcad 	bl	800a6a0 <__mdiff>
 8009d46:	68c2      	ldr	r2, [r0, #12]
 8009d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	bb02      	cbnz	r2, 8009d90 <_dtoa_r+0xa40>
 8009d4e:	4601      	mov	r1, r0
 8009d50:	9802      	ldr	r0, [sp, #8]
 8009d52:	f000 fc89 	bl	800a668 <__mcmp>
 8009d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d58:	4602      	mov	r2, r0
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4648      	mov	r0, r9
 8009d5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d62:	f000 fa05 	bl	800a170 <_Bfree>
 8009d66:	9b07      	ldr	r3, [sp, #28]
 8009d68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d6a:	9e00      	ldr	r6, [sp, #0]
 8009d6c:	ea42 0103 	orr.w	r1, r2, r3
 8009d70:	9b06      	ldr	r3, [sp, #24]
 8009d72:	4319      	orrs	r1, r3
 8009d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d76:	d10d      	bne.n	8009d94 <_dtoa_r+0xa44>
 8009d78:	2b39      	cmp	r3, #57	@ 0x39
 8009d7a:	d027      	beq.n	8009dcc <_dtoa_r+0xa7c>
 8009d7c:	9a04      	ldr	r2, [sp, #16]
 8009d7e:	2a00      	cmp	r2, #0
 8009d80:	dd01      	ble.n	8009d86 <_dtoa_r+0xa36>
 8009d82:	9b03      	ldr	r3, [sp, #12]
 8009d84:	3331      	adds	r3, #49	@ 0x31
 8009d86:	f88b 3000 	strb.w	r3, [fp]
 8009d8a:	e52e      	b.n	80097ea <_dtoa_r+0x49a>
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	e7b9      	b.n	8009d04 <_dtoa_r+0x9b4>
 8009d90:	2201      	movs	r2, #1
 8009d92:	e7e2      	b.n	8009d5a <_dtoa_r+0xa0a>
 8009d94:	9904      	ldr	r1, [sp, #16]
 8009d96:	2900      	cmp	r1, #0
 8009d98:	db04      	blt.n	8009da4 <_dtoa_r+0xa54>
 8009d9a:	9807      	ldr	r0, [sp, #28]
 8009d9c:	4301      	orrs	r1, r0
 8009d9e:	9806      	ldr	r0, [sp, #24]
 8009da0:	4301      	orrs	r1, r0
 8009da2:	d120      	bne.n	8009de6 <_dtoa_r+0xa96>
 8009da4:	2a00      	cmp	r2, #0
 8009da6:	ddee      	ble.n	8009d86 <_dtoa_r+0xa36>
 8009da8:	9902      	ldr	r1, [sp, #8]
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	2201      	movs	r2, #1
 8009dae:	4648      	mov	r0, r9
 8009db0:	f000 fbee 	bl	800a590 <__lshift>
 8009db4:	4621      	mov	r1, r4
 8009db6:	9002      	str	r0, [sp, #8]
 8009db8:	f000 fc56 	bl	800a668 <__mcmp>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	9b00      	ldr	r3, [sp, #0]
 8009dc0:	dc02      	bgt.n	8009dc8 <_dtoa_r+0xa78>
 8009dc2:	d1e0      	bne.n	8009d86 <_dtoa_r+0xa36>
 8009dc4:	07da      	lsls	r2, r3, #31
 8009dc6:	d5de      	bpl.n	8009d86 <_dtoa_r+0xa36>
 8009dc8:	2b39      	cmp	r3, #57	@ 0x39
 8009dca:	d1da      	bne.n	8009d82 <_dtoa_r+0xa32>
 8009dcc:	2339      	movs	r3, #57	@ 0x39
 8009dce:	f88b 3000 	strb.w	r3, [fp]
 8009dd2:	4633      	mov	r3, r6
 8009dd4:	461e      	mov	r6, r3
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ddc:	2a39      	cmp	r2, #57	@ 0x39
 8009dde:	d04e      	beq.n	8009e7e <_dtoa_r+0xb2e>
 8009de0:	3201      	adds	r2, #1
 8009de2:	701a      	strb	r2, [r3, #0]
 8009de4:	e501      	b.n	80097ea <_dtoa_r+0x49a>
 8009de6:	2a00      	cmp	r2, #0
 8009de8:	dd03      	ble.n	8009df2 <_dtoa_r+0xaa2>
 8009dea:	2b39      	cmp	r3, #57	@ 0x39
 8009dec:	d0ee      	beq.n	8009dcc <_dtoa_r+0xa7c>
 8009dee:	3301      	adds	r3, #1
 8009df0:	e7c9      	b.n	8009d86 <_dtoa_r+0xa36>
 8009df2:	9a00      	ldr	r2, [sp, #0]
 8009df4:	9908      	ldr	r1, [sp, #32]
 8009df6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009dfa:	428a      	cmp	r2, r1
 8009dfc:	d028      	beq.n	8009e50 <_dtoa_r+0xb00>
 8009dfe:	9902      	ldr	r1, [sp, #8]
 8009e00:	2300      	movs	r3, #0
 8009e02:	220a      	movs	r2, #10
 8009e04:	4648      	mov	r0, r9
 8009e06:	f000 f9d5 	bl	800a1b4 <__multadd>
 8009e0a:	42af      	cmp	r7, r5
 8009e0c:	9002      	str	r0, [sp, #8]
 8009e0e:	f04f 0300 	mov.w	r3, #0
 8009e12:	f04f 020a 	mov.w	r2, #10
 8009e16:	4639      	mov	r1, r7
 8009e18:	4648      	mov	r0, r9
 8009e1a:	d107      	bne.n	8009e2c <_dtoa_r+0xadc>
 8009e1c:	f000 f9ca 	bl	800a1b4 <__multadd>
 8009e20:	4607      	mov	r7, r0
 8009e22:	4605      	mov	r5, r0
 8009e24:	9b00      	ldr	r3, [sp, #0]
 8009e26:	3301      	adds	r3, #1
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	e777      	b.n	8009d1c <_dtoa_r+0x9cc>
 8009e2c:	f000 f9c2 	bl	800a1b4 <__multadd>
 8009e30:	4629      	mov	r1, r5
 8009e32:	4607      	mov	r7, r0
 8009e34:	2300      	movs	r3, #0
 8009e36:	220a      	movs	r2, #10
 8009e38:	4648      	mov	r0, r9
 8009e3a:	f000 f9bb 	bl	800a1b4 <__multadd>
 8009e3e:	4605      	mov	r5, r0
 8009e40:	e7f0      	b.n	8009e24 <_dtoa_r+0xad4>
 8009e42:	f1bb 0f00 	cmp.w	fp, #0
 8009e46:	bfcc      	ite	gt
 8009e48:	465e      	movgt	r6, fp
 8009e4a:	2601      	movle	r6, #1
 8009e4c:	4456      	add	r6, sl
 8009e4e:	2700      	movs	r7, #0
 8009e50:	9902      	ldr	r1, [sp, #8]
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	2201      	movs	r2, #1
 8009e56:	4648      	mov	r0, r9
 8009e58:	f000 fb9a 	bl	800a590 <__lshift>
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	9002      	str	r0, [sp, #8]
 8009e60:	f000 fc02 	bl	800a668 <__mcmp>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	dcb4      	bgt.n	8009dd2 <_dtoa_r+0xa82>
 8009e68:	d102      	bne.n	8009e70 <_dtoa_r+0xb20>
 8009e6a:	9b00      	ldr	r3, [sp, #0]
 8009e6c:	07db      	lsls	r3, r3, #31
 8009e6e:	d4b0      	bmi.n	8009dd2 <_dtoa_r+0xa82>
 8009e70:	4633      	mov	r3, r6
 8009e72:	461e      	mov	r6, r3
 8009e74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e78:	2a30      	cmp	r2, #48	@ 0x30
 8009e7a:	d0fa      	beq.n	8009e72 <_dtoa_r+0xb22>
 8009e7c:	e4b5      	b.n	80097ea <_dtoa_r+0x49a>
 8009e7e:	459a      	cmp	sl, r3
 8009e80:	d1a8      	bne.n	8009dd4 <_dtoa_r+0xa84>
 8009e82:	2331      	movs	r3, #49	@ 0x31
 8009e84:	f108 0801 	add.w	r8, r8, #1
 8009e88:	f88a 3000 	strb.w	r3, [sl]
 8009e8c:	e4ad      	b.n	80097ea <_dtoa_r+0x49a>
 8009e8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e90:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009eec <_dtoa_r+0xb9c>
 8009e94:	b11b      	cbz	r3, 8009e9e <_dtoa_r+0xb4e>
 8009e96:	f10a 0308 	add.w	r3, sl, #8
 8009e9a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	4650      	mov	r0, sl
 8009ea0:	b017      	add	sp, #92	@ 0x5c
 8009ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea6:	9b07      	ldr	r3, [sp, #28]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	f77f ae2e 	ble.w	8009b0a <_dtoa_r+0x7ba>
 8009eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009eb0:	9308      	str	r3, [sp, #32]
 8009eb2:	2001      	movs	r0, #1
 8009eb4:	e64d      	b.n	8009b52 <_dtoa_r+0x802>
 8009eb6:	f1bb 0f00 	cmp.w	fp, #0
 8009eba:	f77f aed9 	ble.w	8009c70 <_dtoa_r+0x920>
 8009ebe:	4656      	mov	r6, sl
 8009ec0:	9802      	ldr	r0, [sp, #8]
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	f7ff f9bc 	bl	8009240 <quorem>
 8009ec8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009ecc:	f806 3b01 	strb.w	r3, [r6], #1
 8009ed0:	eba6 020a 	sub.w	r2, r6, sl
 8009ed4:	4593      	cmp	fp, r2
 8009ed6:	ddb4      	ble.n	8009e42 <_dtoa_r+0xaf2>
 8009ed8:	9902      	ldr	r1, [sp, #8]
 8009eda:	2300      	movs	r3, #0
 8009edc:	220a      	movs	r2, #10
 8009ede:	4648      	mov	r0, r9
 8009ee0:	f000 f968 	bl	800a1b4 <__multadd>
 8009ee4:	9002      	str	r0, [sp, #8]
 8009ee6:	e7eb      	b.n	8009ec0 <_dtoa_r+0xb70>
 8009ee8:	0800caa5 	.word	0x0800caa5
 8009eec:	0800ca29 	.word	0x0800ca29

08009ef0 <_free_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	2900      	cmp	r1, #0
 8009ef6:	d041      	beq.n	8009f7c <_free_r+0x8c>
 8009ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009efc:	1f0c      	subs	r4, r1, #4
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	bfb8      	it	lt
 8009f02:	18e4      	addlt	r4, r4, r3
 8009f04:	f000 f8e8 	bl	800a0d8 <__malloc_lock>
 8009f08:	4a1d      	ldr	r2, [pc, #116]	@ (8009f80 <_free_r+0x90>)
 8009f0a:	6813      	ldr	r3, [r2, #0]
 8009f0c:	b933      	cbnz	r3, 8009f1c <_free_r+0x2c>
 8009f0e:	6063      	str	r3, [r4, #4]
 8009f10:	6014      	str	r4, [r2, #0]
 8009f12:	4628      	mov	r0, r5
 8009f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f18:	f000 b8e4 	b.w	800a0e4 <__malloc_unlock>
 8009f1c:	42a3      	cmp	r3, r4
 8009f1e:	d908      	bls.n	8009f32 <_free_r+0x42>
 8009f20:	6820      	ldr	r0, [r4, #0]
 8009f22:	1821      	adds	r1, r4, r0
 8009f24:	428b      	cmp	r3, r1
 8009f26:	bf01      	itttt	eq
 8009f28:	6819      	ldreq	r1, [r3, #0]
 8009f2a:	685b      	ldreq	r3, [r3, #4]
 8009f2c:	1809      	addeq	r1, r1, r0
 8009f2e:	6021      	streq	r1, [r4, #0]
 8009f30:	e7ed      	b.n	8009f0e <_free_r+0x1e>
 8009f32:	461a      	mov	r2, r3
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	b10b      	cbz	r3, 8009f3c <_free_r+0x4c>
 8009f38:	42a3      	cmp	r3, r4
 8009f3a:	d9fa      	bls.n	8009f32 <_free_r+0x42>
 8009f3c:	6811      	ldr	r1, [r2, #0]
 8009f3e:	1850      	adds	r0, r2, r1
 8009f40:	42a0      	cmp	r0, r4
 8009f42:	d10b      	bne.n	8009f5c <_free_r+0x6c>
 8009f44:	6820      	ldr	r0, [r4, #0]
 8009f46:	4401      	add	r1, r0
 8009f48:	1850      	adds	r0, r2, r1
 8009f4a:	4283      	cmp	r3, r0
 8009f4c:	6011      	str	r1, [r2, #0]
 8009f4e:	d1e0      	bne.n	8009f12 <_free_r+0x22>
 8009f50:	6818      	ldr	r0, [r3, #0]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	6053      	str	r3, [r2, #4]
 8009f56:	4408      	add	r0, r1
 8009f58:	6010      	str	r0, [r2, #0]
 8009f5a:	e7da      	b.n	8009f12 <_free_r+0x22>
 8009f5c:	d902      	bls.n	8009f64 <_free_r+0x74>
 8009f5e:	230c      	movs	r3, #12
 8009f60:	602b      	str	r3, [r5, #0]
 8009f62:	e7d6      	b.n	8009f12 <_free_r+0x22>
 8009f64:	6820      	ldr	r0, [r4, #0]
 8009f66:	1821      	adds	r1, r4, r0
 8009f68:	428b      	cmp	r3, r1
 8009f6a:	bf04      	itt	eq
 8009f6c:	6819      	ldreq	r1, [r3, #0]
 8009f6e:	685b      	ldreq	r3, [r3, #4]
 8009f70:	6063      	str	r3, [r4, #4]
 8009f72:	bf04      	itt	eq
 8009f74:	1809      	addeq	r1, r1, r0
 8009f76:	6021      	streq	r1, [r4, #0]
 8009f78:	6054      	str	r4, [r2, #4]
 8009f7a:	e7ca      	b.n	8009f12 <_free_r+0x22>
 8009f7c:	bd38      	pop	{r3, r4, r5, pc}
 8009f7e:	bf00      	nop
 8009f80:	200045a8 	.word	0x200045a8

08009f84 <malloc>:
 8009f84:	4b02      	ldr	r3, [pc, #8]	@ (8009f90 <malloc+0xc>)
 8009f86:	4601      	mov	r1, r0
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	f000 b825 	b.w	8009fd8 <_malloc_r>
 8009f8e:	bf00      	nop
 8009f90:	20000024 	.word	0x20000024

08009f94 <sbrk_aligned>:
 8009f94:	b570      	push	{r4, r5, r6, lr}
 8009f96:	4e0f      	ldr	r6, [pc, #60]	@ (8009fd4 <sbrk_aligned+0x40>)
 8009f98:	460c      	mov	r4, r1
 8009f9a:	6831      	ldr	r1, [r6, #0]
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	b911      	cbnz	r1, 8009fa6 <sbrk_aligned+0x12>
 8009fa0:	f001 fe04 	bl	800bbac <_sbrk_r>
 8009fa4:	6030      	str	r0, [r6, #0]
 8009fa6:	4621      	mov	r1, r4
 8009fa8:	4628      	mov	r0, r5
 8009faa:	f001 fdff 	bl	800bbac <_sbrk_r>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	d103      	bne.n	8009fba <sbrk_aligned+0x26>
 8009fb2:	f04f 34ff 	mov.w	r4, #4294967295
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	bd70      	pop	{r4, r5, r6, pc}
 8009fba:	1cc4      	adds	r4, r0, #3
 8009fbc:	f024 0403 	bic.w	r4, r4, #3
 8009fc0:	42a0      	cmp	r0, r4
 8009fc2:	d0f8      	beq.n	8009fb6 <sbrk_aligned+0x22>
 8009fc4:	1a21      	subs	r1, r4, r0
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	f001 fdf0 	bl	800bbac <_sbrk_r>
 8009fcc:	3001      	adds	r0, #1
 8009fce:	d1f2      	bne.n	8009fb6 <sbrk_aligned+0x22>
 8009fd0:	e7ef      	b.n	8009fb2 <sbrk_aligned+0x1e>
 8009fd2:	bf00      	nop
 8009fd4:	200045a4 	.word	0x200045a4

08009fd8 <_malloc_r>:
 8009fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fdc:	1ccd      	adds	r5, r1, #3
 8009fde:	f025 0503 	bic.w	r5, r5, #3
 8009fe2:	3508      	adds	r5, #8
 8009fe4:	2d0c      	cmp	r5, #12
 8009fe6:	bf38      	it	cc
 8009fe8:	250c      	movcc	r5, #12
 8009fea:	2d00      	cmp	r5, #0
 8009fec:	4606      	mov	r6, r0
 8009fee:	db01      	blt.n	8009ff4 <_malloc_r+0x1c>
 8009ff0:	42a9      	cmp	r1, r5
 8009ff2:	d904      	bls.n	8009ffe <_malloc_r+0x26>
 8009ff4:	230c      	movs	r3, #12
 8009ff6:	6033      	str	r3, [r6, #0]
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ffe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0d4 <_malloc_r+0xfc>
 800a002:	f000 f869 	bl	800a0d8 <__malloc_lock>
 800a006:	f8d8 3000 	ldr.w	r3, [r8]
 800a00a:	461c      	mov	r4, r3
 800a00c:	bb44      	cbnz	r4, 800a060 <_malloc_r+0x88>
 800a00e:	4629      	mov	r1, r5
 800a010:	4630      	mov	r0, r6
 800a012:	f7ff ffbf 	bl	8009f94 <sbrk_aligned>
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	4604      	mov	r4, r0
 800a01a:	d158      	bne.n	800a0ce <_malloc_r+0xf6>
 800a01c:	f8d8 4000 	ldr.w	r4, [r8]
 800a020:	4627      	mov	r7, r4
 800a022:	2f00      	cmp	r7, #0
 800a024:	d143      	bne.n	800a0ae <_malloc_r+0xd6>
 800a026:	2c00      	cmp	r4, #0
 800a028:	d04b      	beq.n	800a0c2 <_malloc_r+0xea>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	4639      	mov	r1, r7
 800a02e:	4630      	mov	r0, r6
 800a030:	eb04 0903 	add.w	r9, r4, r3
 800a034:	f001 fdba 	bl	800bbac <_sbrk_r>
 800a038:	4581      	cmp	r9, r0
 800a03a:	d142      	bne.n	800a0c2 <_malloc_r+0xea>
 800a03c:	6821      	ldr	r1, [r4, #0]
 800a03e:	1a6d      	subs	r5, r5, r1
 800a040:	4629      	mov	r1, r5
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff ffa6 	bl	8009f94 <sbrk_aligned>
 800a048:	3001      	adds	r0, #1
 800a04a:	d03a      	beq.n	800a0c2 <_malloc_r+0xea>
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	442b      	add	r3, r5
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	f8d8 3000 	ldr.w	r3, [r8]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	bb62      	cbnz	r2, 800a0b4 <_malloc_r+0xdc>
 800a05a:	f8c8 7000 	str.w	r7, [r8]
 800a05e:	e00f      	b.n	800a080 <_malloc_r+0xa8>
 800a060:	6822      	ldr	r2, [r4, #0]
 800a062:	1b52      	subs	r2, r2, r5
 800a064:	d420      	bmi.n	800a0a8 <_malloc_r+0xd0>
 800a066:	2a0b      	cmp	r2, #11
 800a068:	d917      	bls.n	800a09a <_malloc_r+0xc2>
 800a06a:	1961      	adds	r1, r4, r5
 800a06c:	42a3      	cmp	r3, r4
 800a06e:	6025      	str	r5, [r4, #0]
 800a070:	bf18      	it	ne
 800a072:	6059      	strne	r1, [r3, #4]
 800a074:	6863      	ldr	r3, [r4, #4]
 800a076:	bf08      	it	eq
 800a078:	f8c8 1000 	streq.w	r1, [r8]
 800a07c:	5162      	str	r2, [r4, r5]
 800a07e:	604b      	str	r3, [r1, #4]
 800a080:	4630      	mov	r0, r6
 800a082:	f000 f82f 	bl	800a0e4 <__malloc_unlock>
 800a086:	f104 000b 	add.w	r0, r4, #11
 800a08a:	1d23      	adds	r3, r4, #4
 800a08c:	f020 0007 	bic.w	r0, r0, #7
 800a090:	1ac2      	subs	r2, r0, r3
 800a092:	bf1c      	itt	ne
 800a094:	1a1b      	subne	r3, r3, r0
 800a096:	50a3      	strne	r3, [r4, r2]
 800a098:	e7af      	b.n	8009ffa <_malloc_r+0x22>
 800a09a:	6862      	ldr	r2, [r4, #4]
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	bf0c      	ite	eq
 800a0a0:	f8c8 2000 	streq.w	r2, [r8]
 800a0a4:	605a      	strne	r2, [r3, #4]
 800a0a6:	e7eb      	b.n	800a080 <_malloc_r+0xa8>
 800a0a8:	4623      	mov	r3, r4
 800a0aa:	6864      	ldr	r4, [r4, #4]
 800a0ac:	e7ae      	b.n	800a00c <_malloc_r+0x34>
 800a0ae:	463c      	mov	r4, r7
 800a0b0:	687f      	ldr	r7, [r7, #4]
 800a0b2:	e7b6      	b.n	800a022 <_malloc_r+0x4a>
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	42a3      	cmp	r3, r4
 800a0ba:	d1fb      	bne.n	800a0b4 <_malloc_r+0xdc>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	6053      	str	r3, [r2, #4]
 800a0c0:	e7de      	b.n	800a080 <_malloc_r+0xa8>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	6033      	str	r3, [r6, #0]
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f000 f80c 	bl	800a0e4 <__malloc_unlock>
 800a0cc:	e794      	b.n	8009ff8 <_malloc_r+0x20>
 800a0ce:	6005      	str	r5, [r0, #0]
 800a0d0:	e7d6      	b.n	800a080 <_malloc_r+0xa8>
 800a0d2:	bf00      	nop
 800a0d4:	200045a8 	.word	0x200045a8

0800a0d8 <__malloc_lock>:
 800a0d8:	4801      	ldr	r0, [pc, #4]	@ (800a0e0 <__malloc_lock+0x8>)
 800a0da:	f7ff b89a 	b.w	8009212 <__retarget_lock_acquire_recursive>
 800a0de:	bf00      	nop
 800a0e0:	200045a0 	.word	0x200045a0

0800a0e4 <__malloc_unlock>:
 800a0e4:	4801      	ldr	r0, [pc, #4]	@ (800a0ec <__malloc_unlock+0x8>)
 800a0e6:	f7ff b895 	b.w	8009214 <__retarget_lock_release_recursive>
 800a0ea:	bf00      	nop
 800a0ec:	200045a0 	.word	0x200045a0

0800a0f0 <_Balloc>:
 800a0f0:	b570      	push	{r4, r5, r6, lr}
 800a0f2:	69c6      	ldr	r6, [r0, #28]
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	460d      	mov	r5, r1
 800a0f8:	b976      	cbnz	r6, 800a118 <_Balloc+0x28>
 800a0fa:	2010      	movs	r0, #16
 800a0fc:	f7ff ff42 	bl	8009f84 <malloc>
 800a100:	4602      	mov	r2, r0
 800a102:	61e0      	str	r0, [r4, #28]
 800a104:	b920      	cbnz	r0, 800a110 <_Balloc+0x20>
 800a106:	4b18      	ldr	r3, [pc, #96]	@ (800a168 <_Balloc+0x78>)
 800a108:	4818      	ldr	r0, [pc, #96]	@ (800a16c <_Balloc+0x7c>)
 800a10a:	216b      	movs	r1, #107	@ 0x6b
 800a10c:	f001 fd68 	bl	800bbe0 <__assert_func>
 800a110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a114:	6006      	str	r6, [r0, #0]
 800a116:	60c6      	str	r6, [r0, #12]
 800a118:	69e6      	ldr	r6, [r4, #28]
 800a11a:	68f3      	ldr	r3, [r6, #12]
 800a11c:	b183      	cbz	r3, 800a140 <_Balloc+0x50>
 800a11e:	69e3      	ldr	r3, [r4, #28]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a126:	b9b8      	cbnz	r0, 800a158 <_Balloc+0x68>
 800a128:	2101      	movs	r1, #1
 800a12a:	fa01 f605 	lsl.w	r6, r1, r5
 800a12e:	1d72      	adds	r2, r6, #5
 800a130:	0092      	lsls	r2, r2, #2
 800a132:	4620      	mov	r0, r4
 800a134:	f001 fd72 	bl	800bc1c <_calloc_r>
 800a138:	b160      	cbz	r0, 800a154 <_Balloc+0x64>
 800a13a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a13e:	e00e      	b.n	800a15e <_Balloc+0x6e>
 800a140:	2221      	movs	r2, #33	@ 0x21
 800a142:	2104      	movs	r1, #4
 800a144:	4620      	mov	r0, r4
 800a146:	f001 fd69 	bl	800bc1c <_calloc_r>
 800a14a:	69e3      	ldr	r3, [r4, #28]
 800a14c:	60f0      	str	r0, [r6, #12]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1e4      	bne.n	800a11e <_Balloc+0x2e>
 800a154:	2000      	movs	r0, #0
 800a156:	bd70      	pop	{r4, r5, r6, pc}
 800a158:	6802      	ldr	r2, [r0, #0]
 800a15a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a15e:	2300      	movs	r3, #0
 800a160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a164:	e7f7      	b.n	800a156 <_Balloc+0x66>
 800a166:	bf00      	nop
 800a168:	0800ca36 	.word	0x0800ca36
 800a16c:	0800cab6 	.word	0x0800cab6

0800a170 <_Bfree>:
 800a170:	b570      	push	{r4, r5, r6, lr}
 800a172:	69c6      	ldr	r6, [r0, #28]
 800a174:	4605      	mov	r5, r0
 800a176:	460c      	mov	r4, r1
 800a178:	b976      	cbnz	r6, 800a198 <_Bfree+0x28>
 800a17a:	2010      	movs	r0, #16
 800a17c:	f7ff ff02 	bl	8009f84 <malloc>
 800a180:	4602      	mov	r2, r0
 800a182:	61e8      	str	r0, [r5, #28]
 800a184:	b920      	cbnz	r0, 800a190 <_Bfree+0x20>
 800a186:	4b09      	ldr	r3, [pc, #36]	@ (800a1ac <_Bfree+0x3c>)
 800a188:	4809      	ldr	r0, [pc, #36]	@ (800a1b0 <_Bfree+0x40>)
 800a18a:	218f      	movs	r1, #143	@ 0x8f
 800a18c:	f001 fd28 	bl	800bbe0 <__assert_func>
 800a190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a194:	6006      	str	r6, [r0, #0]
 800a196:	60c6      	str	r6, [r0, #12]
 800a198:	b13c      	cbz	r4, 800a1aa <_Bfree+0x3a>
 800a19a:	69eb      	ldr	r3, [r5, #28]
 800a19c:	6862      	ldr	r2, [r4, #4]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1a4:	6021      	str	r1, [r4, #0]
 800a1a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
 800a1ac:	0800ca36 	.word	0x0800ca36
 800a1b0:	0800cab6 	.word	0x0800cab6

0800a1b4 <__multadd>:
 800a1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b8:	690d      	ldr	r5, [r1, #16]
 800a1ba:	4607      	mov	r7, r0
 800a1bc:	460c      	mov	r4, r1
 800a1be:	461e      	mov	r6, r3
 800a1c0:	f101 0c14 	add.w	ip, r1, #20
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	f8dc 3000 	ldr.w	r3, [ip]
 800a1ca:	b299      	uxth	r1, r3
 800a1cc:	fb02 6101 	mla	r1, r2, r1, r6
 800a1d0:	0c1e      	lsrs	r6, r3, #16
 800a1d2:	0c0b      	lsrs	r3, r1, #16
 800a1d4:	fb02 3306 	mla	r3, r2, r6, r3
 800a1d8:	b289      	uxth	r1, r1
 800a1da:	3001      	adds	r0, #1
 800a1dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1e0:	4285      	cmp	r5, r0
 800a1e2:	f84c 1b04 	str.w	r1, [ip], #4
 800a1e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1ea:	dcec      	bgt.n	800a1c6 <__multadd+0x12>
 800a1ec:	b30e      	cbz	r6, 800a232 <__multadd+0x7e>
 800a1ee:	68a3      	ldr	r3, [r4, #8]
 800a1f0:	42ab      	cmp	r3, r5
 800a1f2:	dc19      	bgt.n	800a228 <__multadd+0x74>
 800a1f4:	6861      	ldr	r1, [r4, #4]
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	3101      	adds	r1, #1
 800a1fa:	f7ff ff79 	bl	800a0f0 <_Balloc>
 800a1fe:	4680      	mov	r8, r0
 800a200:	b928      	cbnz	r0, 800a20e <__multadd+0x5a>
 800a202:	4602      	mov	r2, r0
 800a204:	4b0c      	ldr	r3, [pc, #48]	@ (800a238 <__multadd+0x84>)
 800a206:	480d      	ldr	r0, [pc, #52]	@ (800a23c <__multadd+0x88>)
 800a208:	21ba      	movs	r1, #186	@ 0xba
 800a20a:	f001 fce9 	bl	800bbe0 <__assert_func>
 800a20e:	6922      	ldr	r2, [r4, #16]
 800a210:	3202      	adds	r2, #2
 800a212:	f104 010c 	add.w	r1, r4, #12
 800a216:	0092      	lsls	r2, r2, #2
 800a218:	300c      	adds	r0, #12
 800a21a:	f7fe fffc 	bl	8009216 <memcpy>
 800a21e:	4621      	mov	r1, r4
 800a220:	4638      	mov	r0, r7
 800a222:	f7ff ffa5 	bl	800a170 <_Bfree>
 800a226:	4644      	mov	r4, r8
 800a228:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a22c:	3501      	adds	r5, #1
 800a22e:	615e      	str	r6, [r3, #20]
 800a230:	6125      	str	r5, [r4, #16]
 800a232:	4620      	mov	r0, r4
 800a234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a238:	0800caa5 	.word	0x0800caa5
 800a23c:	0800cab6 	.word	0x0800cab6

0800a240 <__s2b>:
 800a240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a244:	460c      	mov	r4, r1
 800a246:	4615      	mov	r5, r2
 800a248:	461f      	mov	r7, r3
 800a24a:	2209      	movs	r2, #9
 800a24c:	3308      	adds	r3, #8
 800a24e:	4606      	mov	r6, r0
 800a250:	fb93 f3f2 	sdiv	r3, r3, r2
 800a254:	2100      	movs	r1, #0
 800a256:	2201      	movs	r2, #1
 800a258:	429a      	cmp	r2, r3
 800a25a:	db09      	blt.n	800a270 <__s2b+0x30>
 800a25c:	4630      	mov	r0, r6
 800a25e:	f7ff ff47 	bl	800a0f0 <_Balloc>
 800a262:	b940      	cbnz	r0, 800a276 <__s2b+0x36>
 800a264:	4602      	mov	r2, r0
 800a266:	4b19      	ldr	r3, [pc, #100]	@ (800a2cc <__s2b+0x8c>)
 800a268:	4819      	ldr	r0, [pc, #100]	@ (800a2d0 <__s2b+0x90>)
 800a26a:	21d3      	movs	r1, #211	@ 0xd3
 800a26c:	f001 fcb8 	bl	800bbe0 <__assert_func>
 800a270:	0052      	lsls	r2, r2, #1
 800a272:	3101      	adds	r1, #1
 800a274:	e7f0      	b.n	800a258 <__s2b+0x18>
 800a276:	9b08      	ldr	r3, [sp, #32]
 800a278:	6143      	str	r3, [r0, #20]
 800a27a:	2d09      	cmp	r5, #9
 800a27c:	f04f 0301 	mov.w	r3, #1
 800a280:	6103      	str	r3, [r0, #16]
 800a282:	dd16      	ble.n	800a2b2 <__s2b+0x72>
 800a284:	f104 0909 	add.w	r9, r4, #9
 800a288:	46c8      	mov	r8, r9
 800a28a:	442c      	add	r4, r5
 800a28c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a290:	4601      	mov	r1, r0
 800a292:	3b30      	subs	r3, #48	@ 0x30
 800a294:	220a      	movs	r2, #10
 800a296:	4630      	mov	r0, r6
 800a298:	f7ff ff8c 	bl	800a1b4 <__multadd>
 800a29c:	45a0      	cmp	r8, r4
 800a29e:	d1f5      	bne.n	800a28c <__s2b+0x4c>
 800a2a0:	f1a5 0408 	sub.w	r4, r5, #8
 800a2a4:	444c      	add	r4, r9
 800a2a6:	1b2d      	subs	r5, r5, r4
 800a2a8:	1963      	adds	r3, r4, r5
 800a2aa:	42bb      	cmp	r3, r7
 800a2ac:	db04      	blt.n	800a2b8 <__s2b+0x78>
 800a2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b2:	340a      	adds	r4, #10
 800a2b4:	2509      	movs	r5, #9
 800a2b6:	e7f6      	b.n	800a2a6 <__s2b+0x66>
 800a2b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a2bc:	4601      	mov	r1, r0
 800a2be:	3b30      	subs	r3, #48	@ 0x30
 800a2c0:	220a      	movs	r2, #10
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	f7ff ff76 	bl	800a1b4 <__multadd>
 800a2c8:	e7ee      	b.n	800a2a8 <__s2b+0x68>
 800a2ca:	bf00      	nop
 800a2cc:	0800caa5 	.word	0x0800caa5
 800a2d0:	0800cab6 	.word	0x0800cab6

0800a2d4 <__hi0bits>:
 800a2d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2d8:	4603      	mov	r3, r0
 800a2da:	bf36      	itet	cc
 800a2dc:	0403      	lslcc	r3, r0, #16
 800a2de:	2000      	movcs	r0, #0
 800a2e0:	2010      	movcc	r0, #16
 800a2e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2e6:	bf3c      	itt	cc
 800a2e8:	021b      	lslcc	r3, r3, #8
 800a2ea:	3008      	addcc	r0, #8
 800a2ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2f0:	bf3c      	itt	cc
 800a2f2:	011b      	lslcc	r3, r3, #4
 800a2f4:	3004      	addcc	r0, #4
 800a2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2fa:	bf3c      	itt	cc
 800a2fc:	009b      	lslcc	r3, r3, #2
 800a2fe:	3002      	addcc	r0, #2
 800a300:	2b00      	cmp	r3, #0
 800a302:	db05      	blt.n	800a310 <__hi0bits+0x3c>
 800a304:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a308:	f100 0001 	add.w	r0, r0, #1
 800a30c:	bf08      	it	eq
 800a30e:	2020      	moveq	r0, #32
 800a310:	4770      	bx	lr

0800a312 <__lo0bits>:
 800a312:	6803      	ldr	r3, [r0, #0]
 800a314:	4602      	mov	r2, r0
 800a316:	f013 0007 	ands.w	r0, r3, #7
 800a31a:	d00b      	beq.n	800a334 <__lo0bits+0x22>
 800a31c:	07d9      	lsls	r1, r3, #31
 800a31e:	d421      	bmi.n	800a364 <__lo0bits+0x52>
 800a320:	0798      	lsls	r0, r3, #30
 800a322:	bf49      	itett	mi
 800a324:	085b      	lsrmi	r3, r3, #1
 800a326:	089b      	lsrpl	r3, r3, #2
 800a328:	2001      	movmi	r0, #1
 800a32a:	6013      	strmi	r3, [r2, #0]
 800a32c:	bf5c      	itt	pl
 800a32e:	6013      	strpl	r3, [r2, #0]
 800a330:	2002      	movpl	r0, #2
 800a332:	4770      	bx	lr
 800a334:	b299      	uxth	r1, r3
 800a336:	b909      	cbnz	r1, 800a33c <__lo0bits+0x2a>
 800a338:	0c1b      	lsrs	r3, r3, #16
 800a33a:	2010      	movs	r0, #16
 800a33c:	b2d9      	uxtb	r1, r3
 800a33e:	b909      	cbnz	r1, 800a344 <__lo0bits+0x32>
 800a340:	3008      	adds	r0, #8
 800a342:	0a1b      	lsrs	r3, r3, #8
 800a344:	0719      	lsls	r1, r3, #28
 800a346:	bf04      	itt	eq
 800a348:	091b      	lsreq	r3, r3, #4
 800a34a:	3004      	addeq	r0, #4
 800a34c:	0799      	lsls	r1, r3, #30
 800a34e:	bf04      	itt	eq
 800a350:	089b      	lsreq	r3, r3, #2
 800a352:	3002      	addeq	r0, #2
 800a354:	07d9      	lsls	r1, r3, #31
 800a356:	d403      	bmi.n	800a360 <__lo0bits+0x4e>
 800a358:	085b      	lsrs	r3, r3, #1
 800a35a:	f100 0001 	add.w	r0, r0, #1
 800a35e:	d003      	beq.n	800a368 <__lo0bits+0x56>
 800a360:	6013      	str	r3, [r2, #0]
 800a362:	4770      	bx	lr
 800a364:	2000      	movs	r0, #0
 800a366:	4770      	bx	lr
 800a368:	2020      	movs	r0, #32
 800a36a:	4770      	bx	lr

0800a36c <__i2b>:
 800a36c:	b510      	push	{r4, lr}
 800a36e:	460c      	mov	r4, r1
 800a370:	2101      	movs	r1, #1
 800a372:	f7ff febd 	bl	800a0f0 <_Balloc>
 800a376:	4602      	mov	r2, r0
 800a378:	b928      	cbnz	r0, 800a386 <__i2b+0x1a>
 800a37a:	4b05      	ldr	r3, [pc, #20]	@ (800a390 <__i2b+0x24>)
 800a37c:	4805      	ldr	r0, [pc, #20]	@ (800a394 <__i2b+0x28>)
 800a37e:	f240 1145 	movw	r1, #325	@ 0x145
 800a382:	f001 fc2d 	bl	800bbe0 <__assert_func>
 800a386:	2301      	movs	r3, #1
 800a388:	6144      	str	r4, [r0, #20]
 800a38a:	6103      	str	r3, [r0, #16]
 800a38c:	bd10      	pop	{r4, pc}
 800a38e:	bf00      	nop
 800a390:	0800caa5 	.word	0x0800caa5
 800a394:	0800cab6 	.word	0x0800cab6

0800a398 <__multiply>:
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	4617      	mov	r7, r2
 800a39e:	690a      	ldr	r2, [r1, #16]
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	bfa8      	it	ge
 800a3a6:	463b      	movge	r3, r7
 800a3a8:	4689      	mov	r9, r1
 800a3aa:	bfa4      	itt	ge
 800a3ac:	460f      	movge	r7, r1
 800a3ae:	4699      	movge	r9, r3
 800a3b0:	693d      	ldr	r5, [r7, #16]
 800a3b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	6879      	ldr	r1, [r7, #4]
 800a3ba:	eb05 060a 	add.w	r6, r5, sl
 800a3be:	42b3      	cmp	r3, r6
 800a3c0:	b085      	sub	sp, #20
 800a3c2:	bfb8      	it	lt
 800a3c4:	3101      	addlt	r1, #1
 800a3c6:	f7ff fe93 	bl	800a0f0 <_Balloc>
 800a3ca:	b930      	cbnz	r0, 800a3da <__multiply+0x42>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	4b41      	ldr	r3, [pc, #260]	@ (800a4d4 <__multiply+0x13c>)
 800a3d0:	4841      	ldr	r0, [pc, #260]	@ (800a4d8 <__multiply+0x140>)
 800a3d2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3d6:	f001 fc03 	bl	800bbe0 <__assert_func>
 800a3da:	f100 0414 	add.w	r4, r0, #20
 800a3de:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a3e2:	4623      	mov	r3, r4
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4573      	cmp	r3, lr
 800a3e8:	d320      	bcc.n	800a42c <__multiply+0x94>
 800a3ea:	f107 0814 	add.w	r8, r7, #20
 800a3ee:	f109 0114 	add.w	r1, r9, #20
 800a3f2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a3f6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a3fa:	9302      	str	r3, [sp, #8]
 800a3fc:	1beb      	subs	r3, r5, r7
 800a3fe:	3b15      	subs	r3, #21
 800a400:	f023 0303 	bic.w	r3, r3, #3
 800a404:	3304      	adds	r3, #4
 800a406:	3715      	adds	r7, #21
 800a408:	42bd      	cmp	r5, r7
 800a40a:	bf38      	it	cc
 800a40c:	2304      	movcc	r3, #4
 800a40e:	9301      	str	r3, [sp, #4]
 800a410:	9b02      	ldr	r3, [sp, #8]
 800a412:	9103      	str	r1, [sp, #12]
 800a414:	428b      	cmp	r3, r1
 800a416:	d80c      	bhi.n	800a432 <__multiply+0x9a>
 800a418:	2e00      	cmp	r6, #0
 800a41a:	dd03      	ble.n	800a424 <__multiply+0x8c>
 800a41c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a420:	2b00      	cmp	r3, #0
 800a422:	d055      	beq.n	800a4d0 <__multiply+0x138>
 800a424:	6106      	str	r6, [r0, #16]
 800a426:	b005      	add	sp, #20
 800a428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42c:	f843 2b04 	str.w	r2, [r3], #4
 800a430:	e7d9      	b.n	800a3e6 <__multiply+0x4e>
 800a432:	f8b1 a000 	ldrh.w	sl, [r1]
 800a436:	f1ba 0f00 	cmp.w	sl, #0
 800a43a:	d01f      	beq.n	800a47c <__multiply+0xe4>
 800a43c:	46c4      	mov	ip, r8
 800a43e:	46a1      	mov	r9, r4
 800a440:	2700      	movs	r7, #0
 800a442:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a446:	f8d9 3000 	ldr.w	r3, [r9]
 800a44a:	fa1f fb82 	uxth.w	fp, r2
 800a44e:	b29b      	uxth	r3, r3
 800a450:	fb0a 330b 	mla	r3, sl, fp, r3
 800a454:	443b      	add	r3, r7
 800a456:	f8d9 7000 	ldr.w	r7, [r9]
 800a45a:	0c12      	lsrs	r2, r2, #16
 800a45c:	0c3f      	lsrs	r7, r7, #16
 800a45e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a462:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a466:	b29b      	uxth	r3, r3
 800a468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a46c:	4565      	cmp	r5, ip
 800a46e:	f849 3b04 	str.w	r3, [r9], #4
 800a472:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a476:	d8e4      	bhi.n	800a442 <__multiply+0xaa>
 800a478:	9b01      	ldr	r3, [sp, #4]
 800a47a:	50e7      	str	r7, [r4, r3]
 800a47c:	9b03      	ldr	r3, [sp, #12]
 800a47e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a482:	3104      	adds	r1, #4
 800a484:	f1b9 0f00 	cmp.w	r9, #0
 800a488:	d020      	beq.n	800a4cc <__multiply+0x134>
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	4647      	mov	r7, r8
 800a48e:	46a4      	mov	ip, r4
 800a490:	f04f 0a00 	mov.w	sl, #0
 800a494:	f8b7 b000 	ldrh.w	fp, [r7]
 800a498:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a49c:	fb09 220b 	mla	r2, r9, fp, r2
 800a4a0:	4452      	add	r2, sl
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4a8:	f84c 3b04 	str.w	r3, [ip], #4
 800a4ac:	f857 3b04 	ldr.w	r3, [r7], #4
 800a4b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4b4:	f8bc 3000 	ldrh.w	r3, [ip]
 800a4b8:	fb09 330a 	mla	r3, r9, sl, r3
 800a4bc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a4c0:	42bd      	cmp	r5, r7
 800a4c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4c6:	d8e5      	bhi.n	800a494 <__multiply+0xfc>
 800a4c8:	9a01      	ldr	r2, [sp, #4]
 800a4ca:	50a3      	str	r3, [r4, r2]
 800a4cc:	3404      	adds	r4, #4
 800a4ce:	e79f      	b.n	800a410 <__multiply+0x78>
 800a4d0:	3e01      	subs	r6, #1
 800a4d2:	e7a1      	b.n	800a418 <__multiply+0x80>
 800a4d4:	0800caa5 	.word	0x0800caa5
 800a4d8:	0800cab6 	.word	0x0800cab6

0800a4dc <__pow5mult>:
 800a4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e0:	4615      	mov	r5, r2
 800a4e2:	f012 0203 	ands.w	r2, r2, #3
 800a4e6:	4607      	mov	r7, r0
 800a4e8:	460e      	mov	r6, r1
 800a4ea:	d007      	beq.n	800a4fc <__pow5mult+0x20>
 800a4ec:	4c25      	ldr	r4, [pc, #148]	@ (800a584 <__pow5mult+0xa8>)
 800a4ee:	3a01      	subs	r2, #1
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4f6:	f7ff fe5d 	bl	800a1b4 <__multadd>
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	10ad      	asrs	r5, r5, #2
 800a4fe:	d03d      	beq.n	800a57c <__pow5mult+0xa0>
 800a500:	69fc      	ldr	r4, [r7, #28]
 800a502:	b97c      	cbnz	r4, 800a524 <__pow5mult+0x48>
 800a504:	2010      	movs	r0, #16
 800a506:	f7ff fd3d 	bl	8009f84 <malloc>
 800a50a:	4602      	mov	r2, r0
 800a50c:	61f8      	str	r0, [r7, #28]
 800a50e:	b928      	cbnz	r0, 800a51c <__pow5mult+0x40>
 800a510:	4b1d      	ldr	r3, [pc, #116]	@ (800a588 <__pow5mult+0xac>)
 800a512:	481e      	ldr	r0, [pc, #120]	@ (800a58c <__pow5mult+0xb0>)
 800a514:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a518:	f001 fb62 	bl	800bbe0 <__assert_func>
 800a51c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a520:	6004      	str	r4, [r0, #0]
 800a522:	60c4      	str	r4, [r0, #12]
 800a524:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a528:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a52c:	b94c      	cbnz	r4, 800a542 <__pow5mult+0x66>
 800a52e:	f240 2171 	movw	r1, #625	@ 0x271
 800a532:	4638      	mov	r0, r7
 800a534:	f7ff ff1a 	bl	800a36c <__i2b>
 800a538:	2300      	movs	r3, #0
 800a53a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a53e:	4604      	mov	r4, r0
 800a540:	6003      	str	r3, [r0, #0]
 800a542:	f04f 0900 	mov.w	r9, #0
 800a546:	07eb      	lsls	r3, r5, #31
 800a548:	d50a      	bpl.n	800a560 <__pow5mult+0x84>
 800a54a:	4631      	mov	r1, r6
 800a54c:	4622      	mov	r2, r4
 800a54e:	4638      	mov	r0, r7
 800a550:	f7ff ff22 	bl	800a398 <__multiply>
 800a554:	4631      	mov	r1, r6
 800a556:	4680      	mov	r8, r0
 800a558:	4638      	mov	r0, r7
 800a55a:	f7ff fe09 	bl	800a170 <_Bfree>
 800a55e:	4646      	mov	r6, r8
 800a560:	106d      	asrs	r5, r5, #1
 800a562:	d00b      	beq.n	800a57c <__pow5mult+0xa0>
 800a564:	6820      	ldr	r0, [r4, #0]
 800a566:	b938      	cbnz	r0, 800a578 <__pow5mult+0x9c>
 800a568:	4622      	mov	r2, r4
 800a56a:	4621      	mov	r1, r4
 800a56c:	4638      	mov	r0, r7
 800a56e:	f7ff ff13 	bl	800a398 <__multiply>
 800a572:	6020      	str	r0, [r4, #0]
 800a574:	f8c0 9000 	str.w	r9, [r0]
 800a578:	4604      	mov	r4, r0
 800a57a:	e7e4      	b.n	800a546 <__pow5mult+0x6a>
 800a57c:	4630      	mov	r0, r6
 800a57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a582:	bf00      	nop
 800a584:	0800cbc8 	.word	0x0800cbc8
 800a588:	0800ca36 	.word	0x0800ca36
 800a58c:	0800cab6 	.word	0x0800cab6

0800a590 <__lshift>:
 800a590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a594:	460c      	mov	r4, r1
 800a596:	6849      	ldr	r1, [r1, #4]
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a59e:	68a3      	ldr	r3, [r4, #8]
 800a5a0:	4607      	mov	r7, r0
 800a5a2:	4691      	mov	r9, r2
 800a5a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5a8:	f108 0601 	add.w	r6, r8, #1
 800a5ac:	42b3      	cmp	r3, r6
 800a5ae:	db0b      	blt.n	800a5c8 <__lshift+0x38>
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	f7ff fd9d 	bl	800a0f0 <_Balloc>
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	b948      	cbnz	r0, 800a5ce <__lshift+0x3e>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	4b28      	ldr	r3, [pc, #160]	@ (800a660 <__lshift+0xd0>)
 800a5be:	4829      	ldr	r0, [pc, #164]	@ (800a664 <__lshift+0xd4>)
 800a5c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5c4:	f001 fb0c 	bl	800bbe0 <__assert_func>
 800a5c8:	3101      	adds	r1, #1
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	e7ee      	b.n	800a5ac <__lshift+0x1c>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f100 0114 	add.w	r1, r0, #20
 800a5d4:	f100 0210 	add.w	r2, r0, #16
 800a5d8:	4618      	mov	r0, r3
 800a5da:	4553      	cmp	r3, sl
 800a5dc:	db33      	blt.n	800a646 <__lshift+0xb6>
 800a5de:	6920      	ldr	r0, [r4, #16]
 800a5e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5e4:	f104 0314 	add.w	r3, r4, #20
 800a5e8:	f019 091f 	ands.w	r9, r9, #31
 800a5ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5f4:	d02b      	beq.n	800a64e <__lshift+0xbe>
 800a5f6:	f1c9 0e20 	rsb	lr, r9, #32
 800a5fa:	468a      	mov	sl, r1
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	6818      	ldr	r0, [r3, #0]
 800a600:	fa00 f009 	lsl.w	r0, r0, r9
 800a604:	4310      	orrs	r0, r2
 800a606:	f84a 0b04 	str.w	r0, [sl], #4
 800a60a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a60e:	459c      	cmp	ip, r3
 800a610:	fa22 f20e 	lsr.w	r2, r2, lr
 800a614:	d8f3      	bhi.n	800a5fe <__lshift+0x6e>
 800a616:	ebac 0304 	sub.w	r3, ip, r4
 800a61a:	3b15      	subs	r3, #21
 800a61c:	f023 0303 	bic.w	r3, r3, #3
 800a620:	3304      	adds	r3, #4
 800a622:	f104 0015 	add.w	r0, r4, #21
 800a626:	4560      	cmp	r0, ip
 800a628:	bf88      	it	hi
 800a62a:	2304      	movhi	r3, #4
 800a62c:	50ca      	str	r2, [r1, r3]
 800a62e:	b10a      	cbz	r2, 800a634 <__lshift+0xa4>
 800a630:	f108 0602 	add.w	r6, r8, #2
 800a634:	3e01      	subs	r6, #1
 800a636:	4638      	mov	r0, r7
 800a638:	612e      	str	r6, [r5, #16]
 800a63a:	4621      	mov	r1, r4
 800a63c:	f7ff fd98 	bl	800a170 <_Bfree>
 800a640:	4628      	mov	r0, r5
 800a642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a646:	f842 0f04 	str.w	r0, [r2, #4]!
 800a64a:	3301      	adds	r3, #1
 800a64c:	e7c5      	b.n	800a5da <__lshift+0x4a>
 800a64e:	3904      	subs	r1, #4
 800a650:	f853 2b04 	ldr.w	r2, [r3], #4
 800a654:	f841 2f04 	str.w	r2, [r1, #4]!
 800a658:	459c      	cmp	ip, r3
 800a65a:	d8f9      	bhi.n	800a650 <__lshift+0xc0>
 800a65c:	e7ea      	b.n	800a634 <__lshift+0xa4>
 800a65e:	bf00      	nop
 800a660:	0800caa5 	.word	0x0800caa5
 800a664:	0800cab6 	.word	0x0800cab6

0800a668 <__mcmp>:
 800a668:	690a      	ldr	r2, [r1, #16]
 800a66a:	4603      	mov	r3, r0
 800a66c:	6900      	ldr	r0, [r0, #16]
 800a66e:	1a80      	subs	r0, r0, r2
 800a670:	b530      	push	{r4, r5, lr}
 800a672:	d10e      	bne.n	800a692 <__mcmp+0x2a>
 800a674:	3314      	adds	r3, #20
 800a676:	3114      	adds	r1, #20
 800a678:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a67c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a680:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a684:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a688:	4295      	cmp	r5, r2
 800a68a:	d003      	beq.n	800a694 <__mcmp+0x2c>
 800a68c:	d205      	bcs.n	800a69a <__mcmp+0x32>
 800a68e:	f04f 30ff 	mov.w	r0, #4294967295
 800a692:	bd30      	pop	{r4, r5, pc}
 800a694:	42a3      	cmp	r3, r4
 800a696:	d3f3      	bcc.n	800a680 <__mcmp+0x18>
 800a698:	e7fb      	b.n	800a692 <__mcmp+0x2a>
 800a69a:	2001      	movs	r0, #1
 800a69c:	e7f9      	b.n	800a692 <__mcmp+0x2a>
	...

0800a6a0 <__mdiff>:
 800a6a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	4689      	mov	r9, r1
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	4648      	mov	r0, r9
 800a6ac:	4614      	mov	r4, r2
 800a6ae:	f7ff ffdb 	bl	800a668 <__mcmp>
 800a6b2:	1e05      	subs	r5, r0, #0
 800a6b4:	d112      	bne.n	800a6dc <__mdiff+0x3c>
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f7ff fd19 	bl	800a0f0 <_Balloc>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	b928      	cbnz	r0, 800a6ce <__mdiff+0x2e>
 800a6c2:	4b3f      	ldr	r3, [pc, #252]	@ (800a7c0 <__mdiff+0x120>)
 800a6c4:	f240 2137 	movw	r1, #567	@ 0x237
 800a6c8:	483e      	ldr	r0, [pc, #248]	@ (800a7c4 <__mdiff+0x124>)
 800a6ca:	f001 fa89 	bl	800bbe0 <__assert_func>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	b003      	add	sp, #12
 800a6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6dc:	bfbc      	itt	lt
 800a6de:	464b      	movlt	r3, r9
 800a6e0:	46a1      	movlt	r9, r4
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6e8:	bfba      	itte	lt
 800a6ea:	461c      	movlt	r4, r3
 800a6ec:	2501      	movlt	r5, #1
 800a6ee:	2500      	movge	r5, #0
 800a6f0:	f7ff fcfe 	bl	800a0f0 <_Balloc>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	b918      	cbnz	r0, 800a700 <__mdiff+0x60>
 800a6f8:	4b31      	ldr	r3, [pc, #196]	@ (800a7c0 <__mdiff+0x120>)
 800a6fa:	f240 2145 	movw	r1, #581	@ 0x245
 800a6fe:	e7e3      	b.n	800a6c8 <__mdiff+0x28>
 800a700:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a704:	6926      	ldr	r6, [r4, #16]
 800a706:	60c5      	str	r5, [r0, #12]
 800a708:	f109 0310 	add.w	r3, r9, #16
 800a70c:	f109 0514 	add.w	r5, r9, #20
 800a710:	f104 0e14 	add.w	lr, r4, #20
 800a714:	f100 0b14 	add.w	fp, r0, #20
 800a718:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a71c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	46d9      	mov	r9, fp
 800a724:	f04f 0c00 	mov.w	ip, #0
 800a728:	9b01      	ldr	r3, [sp, #4]
 800a72a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a72e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a732:	9301      	str	r3, [sp, #4]
 800a734:	fa1f f38a 	uxth.w	r3, sl
 800a738:	4619      	mov	r1, r3
 800a73a:	b283      	uxth	r3, r0
 800a73c:	1acb      	subs	r3, r1, r3
 800a73e:	0c00      	lsrs	r0, r0, #16
 800a740:	4463      	add	r3, ip
 800a742:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a746:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a750:	4576      	cmp	r6, lr
 800a752:	f849 3b04 	str.w	r3, [r9], #4
 800a756:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a75a:	d8e5      	bhi.n	800a728 <__mdiff+0x88>
 800a75c:	1b33      	subs	r3, r6, r4
 800a75e:	3b15      	subs	r3, #21
 800a760:	f023 0303 	bic.w	r3, r3, #3
 800a764:	3415      	adds	r4, #21
 800a766:	3304      	adds	r3, #4
 800a768:	42a6      	cmp	r6, r4
 800a76a:	bf38      	it	cc
 800a76c:	2304      	movcc	r3, #4
 800a76e:	441d      	add	r5, r3
 800a770:	445b      	add	r3, fp
 800a772:	461e      	mov	r6, r3
 800a774:	462c      	mov	r4, r5
 800a776:	4544      	cmp	r4, r8
 800a778:	d30e      	bcc.n	800a798 <__mdiff+0xf8>
 800a77a:	f108 0103 	add.w	r1, r8, #3
 800a77e:	1b49      	subs	r1, r1, r5
 800a780:	f021 0103 	bic.w	r1, r1, #3
 800a784:	3d03      	subs	r5, #3
 800a786:	45a8      	cmp	r8, r5
 800a788:	bf38      	it	cc
 800a78a:	2100      	movcc	r1, #0
 800a78c:	440b      	add	r3, r1
 800a78e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a792:	b191      	cbz	r1, 800a7ba <__mdiff+0x11a>
 800a794:	6117      	str	r7, [r2, #16]
 800a796:	e79d      	b.n	800a6d4 <__mdiff+0x34>
 800a798:	f854 1b04 	ldr.w	r1, [r4], #4
 800a79c:	46e6      	mov	lr, ip
 800a79e:	0c08      	lsrs	r0, r1, #16
 800a7a0:	fa1c fc81 	uxtah	ip, ip, r1
 800a7a4:	4471      	add	r1, lr
 800a7a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7aa:	b289      	uxth	r1, r1
 800a7ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7b0:	f846 1b04 	str.w	r1, [r6], #4
 800a7b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7b8:	e7dd      	b.n	800a776 <__mdiff+0xd6>
 800a7ba:	3f01      	subs	r7, #1
 800a7bc:	e7e7      	b.n	800a78e <__mdiff+0xee>
 800a7be:	bf00      	nop
 800a7c0:	0800caa5 	.word	0x0800caa5
 800a7c4:	0800cab6 	.word	0x0800cab6

0800a7c8 <__ulp>:
 800a7c8:	b082      	sub	sp, #8
 800a7ca:	ed8d 0b00 	vstr	d0, [sp]
 800a7ce:	9a01      	ldr	r2, [sp, #4]
 800a7d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a810 <__ulp+0x48>)
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	dc08      	bgt.n	800a7ee <__ulp+0x26>
 800a7dc:	425b      	negs	r3, r3
 800a7de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a7e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a7e6:	da04      	bge.n	800a7f2 <__ulp+0x2a>
 800a7e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a7ec:	4113      	asrs	r3, r2
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	e008      	b.n	800a804 <__ulp+0x3c>
 800a7f2:	f1a2 0314 	sub.w	r3, r2, #20
 800a7f6:	2b1e      	cmp	r3, #30
 800a7f8:	bfda      	itte	le
 800a7fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a7fe:	40da      	lsrle	r2, r3
 800a800:	2201      	movgt	r2, #1
 800a802:	2300      	movs	r3, #0
 800a804:	4619      	mov	r1, r3
 800a806:	4610      	mov	r0, r2
 800a808:	ec41 0b10 	vmov	d0, r0, r1
 800a80c:	b002      	add	sp, #8
 800a80e:	4770      	bx	lr
 800a810:	7ff00000 	.word	0x7ff00000

0800a814 <__b2d>:
 800a814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a818:	6906      	ldr	r6, [r0, #16]
 800a81a:	f100 0814 	add.w	r8, r0, #20
 800a81e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a822:	1f37      	subs	r7, r6, #4
 800a824:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a828:	4610      	mov	r0, r2
 800a82a:	f7ff fd53 	bl	800a2d4 <__hi0bits>
 800a82e:	f1c0 0320 	rsb	r3, r0, #32
 800a832:	280a      	cmp	r0, #10
 800a834:	600b      	str	r3, [r1, #0]
 800a836:	491b      	ldr	r1, [pc, #108]	@ (800a8a4 <__b2d+0x90>)
 800a838:	dc15      	bgt.n	800a866 <__b2d+0x52>
 800a83a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a83e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a842:	45b8      	cmp	r8, r7
 800a844:	ea43 0501 	orr.w	r5, r3, r1
 800a848:	bf34      	ite	cc
 800a84a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a84e:	2300      	movcs	r3, #0
 800a850:	3015      	adds	r0, #21
 800a852:	fa02 f000 	lsl.w	r0, r2, r0
 800a856:	fa23 f30c 	lsr.w	r3, r3, ip
 800a85a:	4303      	orrs	r3, r0
 800a85c:	461c      	mov	r4, r3
 800a85e:	ec45 4b10 	vmov	d0, r4, r5
 800a862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a866:	45b8      	cmp	r8, r7
 800a868:	bf3a      	itte	cc
 800a86a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a86e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a872:	2300      	movcs	r3, #0
 800a874:	380b      	subs	r0, #11
 800a876:	d012      	beq.n	800a89e <__b2d+0x8a>
 800a878:	f1c0 0120 	rsb	r1, r0, #32
 800a87c:	fa23 f401 	lsr.w	r4, r3, r1
 800a880:	4082      	lsls	r2, r0
 800a882:	4322      	orrs	r2, r4
 800a884:	4547      	cmp	r7, r8
 800a886:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a88a:	bf8c      	ite	hi
 800a88c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a890:	2200      	movls	r2, #0
 800a892:	4083      	lsls	r3, r0
 800a894:	40ca      	lsrs	r2, r1
 800a896:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a89a:	4313      	orrs	r3, r2
 800a89c:	e7de      	b.n	800a85c <__b2d+0x48>
 800a89e:	ea42 0501 	orr.w	r5, r2, r1
 800a8a2:	e7db      	b.n	800a85c <__b2d+0x48>
 800a8a4:	3ff00000 	.word	0x3ff00000

0800a8a8 <__d2b>:
 800a8a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8ac:	460f      	mov	r7, r1
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	ec59 8b10 	vmov	r8, r9, d0
 800a8b4:	4616      	mov	r6, r2
 800a8b6:	f7ff fc1b 	bl	800a0f0 <_Balloc>
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	b930      	cbnz	r0, 800a8cc <__d2b+0x24>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	4b23      	ldr	r3, [pc, #140]	@ (800a950 <__d2b+0xa8>)
 800a8c2:	4824      	ldr	r0, [pc, #144]	@ (800a954 <__d2b+0xac>)
 800a8c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a8c8:	f001 f98a 	bl	800bbe0 <__assert_func>
 800a8cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8d4:	b10d      	cbz	r5, 800a8da <__d2b+0x32>
 800a8d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8da:	9301      	str	r3, [sp, #4]
 800a8dc:	f1b8 0300 	subs.w	r3, r8, #0
 800a8e0:	d023      	beq.n	800a92a <__d2b+0x82>
 800a8e2:	4668      	mov	r0, sp
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	f7ff fd14 	bl	800a312 <__lo0bits>
 800a8ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8ee:	b1d0      	cbz	r0, 800a926 <__d2b+0x7e>
 800a8f0:	f1c0 0320 	rsb	r3, r0, #32
 800a8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	40c2      	lsrs	r2, r0
 800a8fc:	6163      	str	r3, [r4, #20]
 800a8fe:	9201      	str	r2, [sp, #4]
 800a900:	9b01      	ldr	r3, [sp, #4]
 800a902:	61a3      	str	r3, [r4, #24]
 800a904:	2b00      	cmp	r3, #0
 800a906:	bf0c      	ite	eq
 800a908:	2201      	moveq	r2, #1
 800a90a:	2202      	movne	r2, #2
 800a90c:	6122      	str	r2, [r4, #16]
 800a90e:	b1a5      	cbz	r5, 800a93a <__d2b+0x92>
 800a910:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a914:	4405      	add	r5, r0
 800a916:	603d      	str	r5, [r7, #0]
 800a918:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a91c:	6030      	str	r0, [r6, #0]
 800a91e:	4620      	mov	r0, r4
 800a920:	b003      	add	sp, #12
 800a922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a926:	6161      	str	r1, [r4, #20]
 800a928:	e7ea      	b.n	800a900 <__d2b+0x58>
 800a92a:	a801      	add	r0, sp, #4
 800a92c:	f7ff fcf1 	bl	800a312 <__lo0bits>
 800a930:	9b01      	ldr	r3, [sp, #4]
 800a932:	6163      	str	r3, [r4, #20]
 800a934:	3020      	adds	r0, #32
 800a936:	2201      	movs	r2, #1
 800a938:	e7e8      	b.n	800a90c <__d2b+0x64>
 800a93a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a93e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a942:	6038      	str	r0, [r7, #0]
 800a944:	6918      	ldr	r0, [r3, #16]
 800a946:	f7ff fcc5 	bl	800a2d4 <__hi0bits>
 800a94a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a94e:	e7e5      	b.n	800a91c <__d2b+0x74>
 800a950:	0800caa5 	.word	0x0800caa5
 800a954:	0800cab6 	.word	0x0800cab6

0800a958 <__ratio>:
 800a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95c:	b085      	sub	sp, #20
 800a95e:	e9cd 1000 	strd	r1, r0, [sp]
 800a962:	a902      	add	r1, sp, #8
 800a964:	f7ff ff56 	bl	800a814 <__b2d>
 800a968:	9800      	ldr	r0, [sp, #0]
 800a96a:	a903      	add	r1, sp, #12
 800a96c:	ec55 4b10 	vmov	r4, r5, d0
 800a970:	f7ff ff50 	bl	800a814 <__b2d>
 800a974:	9b01      	ldr	r3, [sp, #4]
 800a976:	6919      	ldr	r1, [r3, #16]
 800a978:	9b00      	ldr	r3, [sp, #0]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	1ac9      	subs	r1, r1, r3
 800a97e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a982:	1a9b      	subs	r3, r3, r2
 800a984:	ec5b ab10 	vmov	sl, fp, d0
 800a988:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	bfce      	itee	gt
 800a990:	462a      	movgt	r2, r5
 800a992:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a996:	465a      	movle	r2, fp
 800a998:	462f      	mov	r7, r5
 800a99a:	46d9      	mov	r9, fp
 800a99c:	bfcc      	ite	gt
 800a99e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a9a2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a9a6:	464b      	mov	r3, r9
 800a9a8:	4652      	mov	r2, sl
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	4639      	mov	r1, r7
 800a9ae:	f7f5 ff55 	bl	800085c <__aeabi_ddiv>
 800a9b2:	ec41 0b10 	vmov	d0, r0, r1
 800a9b6:	b005      	add	sp, #20
 800a9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9bc <__copybits>:
 800a9bc:	3901      	subs	r1, #1
 800a9be:	b570      	push	{r4, r5, r6, lr}
 800a9c0:	1149      	asrs	r1, r1, #5
 800a9c2:	6914      	ldr	r4, [r2, #16]
 800a9c4:	3101      	adds	r1, #1
 800a9c6:	f102 0314 	add.w	r3, r2, #20
 800a9ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9d2:	1f05      	subs	r5, r0, #4
 800a9d4:	42a3      	cmp	r3, r4
 800a9d6:	d30c      	bcc.n	800a9f2 <__copybits+0x36>
 800a9d8:	1aa3      	subs	r3, r4, r2
 800a9da:	3b11      	subs	r3, #17
 800a9dc:	f023 0303 	bic.w	r3, r3, #3
 800a9e0:	3211      	adds	r2, #17
 800a9e2:	42a2      	cmp	r2, r4
 800a9e4:	bf88      	it	hi
 800a9e6:	2300      	movhi	r3, #0
 800a9e8:	4418      	add	r0, r3
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	4288      	cmp	r0, r1
 800a9ee:	d305      	bcc.n	800a9fc <__copybits+0x40>
 800a9f0:	bd70      	pop	{r4, r5, r6, pc}
 800a9f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a9f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9fa:	e7eb      	b.n	800a9d4 <__copybits+0x18>
 800a9fc:	f840 3b04 	str.w	r3, [r0], #4
 800aa00:	e7f4      	b.n	800a9ec <__copybits+0x30>

0800aa02 <__any_on>:
 800aa02:	f100 0214 	add.w	r2, r0, #20
 800aa06:	6900      	ldr	r0, [r0, #16]
 800aa08:	114b      	asrs	r3, r1, #5
 800aa0a:	4298      	cmp	r0, r3
 800aa0c:	b510      	push	{r4, lr}
 800aa0e:	db11      	blt.n	800aa34 <__any_on+0x32>
 800aa10:	dd0a      	ble.n	800aa28 <__any_on+0x26>
 800aa12:	f011 011f 	ands.w	r1, r1, #31
 800aa16:	d007      	beq.n	800aa28 <__any_on+0x26>
 800aa18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa1c:	fa24 f001 	lsr.w	r0, r4, r1
 800aa20:	fa00 f101 	lsl.w	r1, r0, r1
 800aa24:	428c      	cmp	r4, r1
 800aa26:	d10b      	bne.n	800aa40 <__any_on+0x3e>
 800aa28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d803      	bhi.n	800aa38 <__any_on+0x36>
 800aa30:	2000      	movs	r0, #0
 800aa32:	bd10      	pop	{r4, pc}
 800aa34:	4603      	mov	r3, r0
 800aa36:	e7f7      	b.n	800aa28 <__any_on+0x26>
 800aa38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa3c:	2900      	cmp	r1, #0
 800aa3e:	d0f5      	beq.n	800aa2c <__any_on+0x2a>
 800aa40:	2001      	movs	r0, #1
 800aa42:	e7f6      	b.n	800aa32 <__any_on+0x30>

0800aa44 <sulp>:
 800aa44:	b570      	push	{r4, r5, r6, lr}
 800aa46:	4604      	mov	r4, r0
 800aa48:	460d      	mov	r5, r1
 800aa4a:	ec45 4b10 	vmov	d0, r4, r5
 800aa4e:	4616      	mov	r6, r2
 800aa50:	f7ff feba 	bl	800a7c8 <__ulp>
 800aa54:	ec51 0b10 	vmov	r0, r1, d0
 800aa58:	b17e      	cbz	r6, 800aa7a <sulp+0x36>
 800aa5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aa5e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	dd09      	ble.n	800aa7a <sulp+0x36>
 800aa66:	051b      	lsls	r3, r3, #20
 800aa68:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aa6c:	2400      	movs	r4, #0
 800aa6e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aa72:	4622      	mov	r2, r4
 800aa74:	462b      	mov	r3, r5
 800aa76:	f7f5 fdc7 	bl	8000608 <__aeabi_dmul>
 800aa7a:	ec41 0b10 	vmov	d0, r0, r1
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}

0800aa80 <_strtod_l>:
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	b09f      	sub	sp, #124	@ 0x7c
 800aa86:	460c      	mov	r4, r1
 800aa88:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	921a      	str	r2, [sp, #104]	@ 0x68
 800aa8e:	9005      	str	r0, [sp, #20]
 800aa90:	f04f 0a00 	mov.w	sl, #0
 800aa94:	f04f 0b00 	mov.w	fp, #0
 800aa98:	460a      	mov	r2, r1
 800aa9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa9c:	7811      	ldrb	r1, [r2, #0]
 800aa9e:	292b      	cmp	r1, #43	@ 0x2b
 800aaa0:	d04a      	beq.n	800ab38 <_strtod_l+0xb8>
 800aaa2:	d838      	bhi.n	800ab16 <_strtod_l+0x96>
 800aaa4:	290d      	cmp	r1, #13
 800aaa6:	d832      	bhi.n	800ab0e <_strtod_l+0x8e>
 800aaa8:	2908      	cmp	r1, #8
 800aaaa:	d832      	bhi.n	800ab12 <_strtod_l+0x92>
 800aaac:	2900      	cmp	r1, #0
 800aaae:	d03b      	beq.n	800ab28 <_strtod_l+0xa8>
 800aab0:	2200      	movs	r2, #0
 800aab2:	920e      	str	r2, [sp, #56]	@ 0x38
 800aab4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aab6:	782a      	ldrb	r2, [r5, #0]
 800aab8:	2a30      	cmp	r2, #48	@ 0x30
 800aaba:	f040 80b2 	bne.w	800ac22 <_strtod_l+0x1a2>
 800aabe:	786a      	ldrb	r2, [r5, #1]
 800aac0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aac4:	2a58      	cmp	r2, #88	@ 0x58
 800aac6:	d16e      	bne.n	800aba6 <_strtod_l+0x126>
 800aac8:	9302      	str	r3, [sp, #8]
 800aaca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aacc:	9301      	str	r3, [sp, #4]
 800aace:	ab1a      	add	r3, sp, #104	@ 0x68
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	4a8f      	ldr	r2, [pc, #572]	@ (800ad10 <_strtod_l+0x290>)
 800aad4:	9805      	ldr	r0, [sp, #20]
 800aad6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aad8:	a919      	add	r1, sp, #100	@ 0x64
 800aada:	f001 f91b 	bl	800bd14 <__gethex>
 800aade:	f010 060f 	ands.w	r6, r0, #15
 800aae2:	4604      	mov	r4, r0
 800aae4:	d005      	beq.n	800aaf2 <_strtod_l+0x72>
 800aae6:	2e06      	cmp	r6, #6
 800aae8:	d128      	bne.n	800ab3c <_strtod_l+0xbc>
 800aaea:	3501      	adds	r5, #1
 800aaec:	2300      	movs	r3, #0
 800aaee:	9519      	str	r5, [sp, #100]	@ 0x64
 800aaf0:	930e      	str	r3, [sp, #56]	@ 0x38
 800aaf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f040 858e 	bne.w	800b616 <_strtod_l+0xb96>
 800aafa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aafc:	b1cb      	cbz	r3, 800ab32 <_strtod_l+0xb2>
 800aafe:	4652      	mov	r2, sl
 800ab00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ab04:	ec43 2b10 	vmov	d0, r2, r3
 800ab08:	b01f      	add	sp, #124	@ 0x7c
 800ab0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0e:	2920      	cmp	r1, #32
 800ab10:	d1ce      	bne.n	800aab0 <_strtod_l+0x30>
 800ab12:	3201      	adds	r2, #1
 800ab14:	e7c1      	b.n	800aa9a <_strtod_l+0x1a>
 800ab16:	292d      	cmp	r1, #45	@ 0x2d
 800ab18:	d1ca      	bne.n	800aab0 <_strtod_l+0x30>
 800ab1a:	2101      	movs	r1, #1
 800ab1c:	910e      	str	r1, [sp, #56]	@ 0x38
 800ab1e:	1c51      	adds	r1, r2, #1
 800ab20:	9119      	str	r1, [sp, #100]	@ 0x64
 800ab22:	7852      	ldrb	r2, [r2, #1]
 800ab24:	2a00      	cmp	r2, #0
 800ab26:	d1c5      	bne.n	800aab4 <_strtod_l+0x34>
 800ab28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab2a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f040 8570 	bne.w	800b612 <_strtod_l+0xb92>
 800ab32:	4652      	mov	r2, sl
 800ab34:	465b      	mov	r3, fp
 800ab36:	e7e5      	b.n	800ab04 <_strtod_l+0x84>
 800ab38:	2100      	movs	r1, #0
 800ab3a:	e7ef      	b.n	800ab1c <_strtod_l+0x9c>
 800ab3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab3e:	b13a      	cbz	r2, 800ab50 <_strtod_l+0xd0>
 800ab40:	2135      	movs	r1, #53	@ 0x35
 800ab42:	a81c      	add	r0, sp, #112	@ 0x70
 800ab44:	f7ff ff3a 	bl	800a9bc <__copybits>
 800ab48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab4a:	9805      	ldr	r0, [sp, #20]
 800ab4c:	f7ff fb10 	bl	800a170 <_Bfree>
 800ab50:	3e01      	subs	r6, #1
 800ab52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ab54:	2e04      	cmp	r6, #4
 800ab56:	d806      	bhi.n	800ab66 <_strtod_l+0xe6>
 800ab58:	e8df f006 	tbb	[pc, r6]
 800ab5c:	201d0314 	.word	0x201d0314
 800ab60:	14          	.byte	0x14
 800ab61:	00          	.byte	0x00
 800ab62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ab66:	05e1      	lsls	r1, r4, #23
 800ab68:	bf48      	it	mi
 800ab6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ab6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab72:	0d1b      	lsrs	r3, r3, #20
 800ab74:	051b      	lsls	r3, r3, #20
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1bb      	bne.n	800aaf2 <_strtod_l+0x72>
 800ab7a:	f7fe fb1f 	bl	80091bc <__errno>
 800ab7e:	2322      	movs	r3, #34	@ 0x22
 800ab80:	6003      	str	r3, [r0, #0]
 800ab82:	e7b6      	b.n	800aaf2 <_strtod_l+0x72>
 800ab84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ab88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ab8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ab90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ab94:	e7e7      	b.n	800ab66 <_strtod_l+0xe6>
 800ab96:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ad18 <_strtod_l+0x298>
 800ab9a:	e7e4      	b.n	800ab66 <_strtod_l+0xe6>
 800ab9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aba0:	f04f 3aff 	mov.w	sl, #4294967295
 800aba4:	e7df      	b.n	800ab66 <_strtod_l+0xe6>
 800aba6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aba8:	1c5a      	adds	r2, r3, #1
 800abaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800abac:	785b      	ldrb	r3, [r3, #1]
 800abae:	2b30      	cmp	r3, #48	@ 0x30
 800abb0:	d0f9      	beq.n	800aba6 <_strtod_l+0x126>
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d09d      	beq.n	800aaf2 <_strtod_l+0x72>
 800abb6:	2301      	movs	r3, #1
 800abb8:	2700      	movs	r7, #0
 800abba:	9308      	str	r3, [sp, #32]
 800abbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abbe:	930c      	str	r3, [sp, #48]	@ 0x30
 800abc0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800abc2:	46b9      	mov	r9, r7
 800abc4:	220a      	movs	r2, #10
 800abc6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800abc8:	7805      	ldrb	r5, [r0, #0]
 800abca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800abce:	b2d9      	uxtb	r1, r3
 800abd0:	2909      	cmp	r1, #9
 800abd2:	d928      	bls.n	800ac26 <_strtod_l+0x1a6>
 800abd4:	494f      	ldr	r1, [pc, #316]	@ (800ad14 <_strtod_l+0x294>)
 800abd6:	2201      	movs	r2, #1
 800abd8:	f000 ffd6 	bl	800bb88 <strncmp>
 800abdc:	2800      	cmp	r0, #0
 800abde:	d032      	beq.n	800ac46 <_strtod_l+0x1c6>
 800abe0:	2000      	movs	r0, #0
 800abe2:	462a      	mov	r2, r5
 800abe4:	900a      	str	r0, [sp, #40]	@ 0x28
 800abe6:	464d      	mov	r5, r9
 800abe8:	4603      	mov	r3, r0
 800abea:	2a65      	cmp	r2, #101	@ 0x65
 800abec:	d001      	beq.n	800abf2 <_strtod_l+0x172>
 800abee:	2a45      	cmp	r2, #69	@ 0x45
 800abf0:	d114      	bne.n	800ac1c <_strtod_l+0x19c>
 800abf2:	b91d      	cbnz	r5, 800abfc <_strtod_l+0x17c>
 800abf4:	9a08      	ldr	r2, [sp, #32]
 800abf6:	4302      	orrs	r2, r0
 800abf8:	d096      	beq.n	800ab28 <_strtod_l+0xa8>
 800abfa:	2500      	movs	r5, #0
 800abfc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800abfe:	1c62      	adds	r2, r4, #1
 800ac00:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac02:	7862      	ldrb	r2, [r4, #1]
 800ac04:	2a2b      	cmp	r2, #43	@ 0x2b
 800ac06:	d07a      	beq.n	800acfe <_strtod_l+0x27e>
 800ac08:	2a2d      	cmp	r2, #45	@ 0x2d
 800ac0a:	d07e      	beq.n	800ad0a <_strtod_l+0x28a>
 800ac0c:	f04f 0c00 	mov.w	ip, #0
 800ac10:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ac14:	2909      	cmp	r1, #9
 800ac16:	f240 8085 	bls.w	800ad24 <_strtod_l+0x2a4>
 800ac1a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac1c:	f04f 0800 	mov.w	r8, #0
 800ac20:	e0a5      	b.n	800ad6e <_strtod_l+0x2ee>
 800ac22:	2300      	movs	r3, #0
 800ac24:	e7c8      	b.n	800abb8 <_strtod_l+0x138>
 800ac26:	f1b9 0f08 	cmp.w	r9, #8
 800ac2a:	bfd8      	it	le
 800ac2c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ac2e:	f100 0001 	add.w	r0, r0, #1
 800ac32:	bfda      	itte	le
 800ac34:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac38:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ac3a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ac3e:	f109 0901 	add.w	r9, r9, #1
 800ac42:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac44:	e7bf      	b.n	800abc6 <_strtod_l+0x146>
 800ac46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac48:	1c5a      	adds	r2, r3, #1
 800ac4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac4c:	785a      	ldrb	r2, [r3, #1]
 800ac4e:	f1b9 0f00 	cmp.w	r9, #0
 800ac52:	d03b      	beq.n	800accc <_strtod_l+0x24c>
 800ac54:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac56:	464d      	mov	r5, r9
 800ac58:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ac5c:	2b09      	cmp	r3, #9
 800ac5e:	d912      	bls.n	800ac86 <_strtod_l+0x206>
 800ac60:	2301      	movs	r3, #1
 800ac62:	e7c2      	b.n	800abea <_strtod_l+0x16a>
 800ac64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac66:	1c5a      	adds	r2, r3, #1
 800ac68:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac6a:	785a      	ldrb	r2, [r3, #1]
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	2a30      	cmp	r2, #48	@ 0x30
 800ac70:	d0f8      	beq.n	800ac64 <_strtod_l+0x1e4>
 800ac72:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ac76:	2b08      	cmp	r3, #8
 800ac78:	f200 84d2 	bhi.w	800b620 <_strtod_l+0xba0>
 800ac7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac7e:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac80:	2000      	movs	r0, #0
 800ac82:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac84:	4605      	mov	r5, r0
 800ac86:	3a30      	subs	r2, #48	@ 0x30
 800ac88:	f100 0301 	add.w	r3, r0, #1
 800ac8c:	d018      	beq.n	800acc0 <_strtod_l+0x240>
 800ac8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac90:	4419      	add	r1, r3
 800ac92:	910a      	str	r1, [sp, #40]	@ 0x28
 800ac94:	462e      	mov	r6, r5
 800ac96:	f04f 0e0a 	mov.w	lr, #10
 800ac9a:	1c71      	adds	r1, r6, #1
 800ac9c:	eba1 0c05 	sub.w	ip, r1, r5
 800aca0:	4563      	cmp	r3, ip
 800aca2:	dc15      	bgt.n	800acd0 <_strtod_l+0x250>
 800aca4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800aca8:	182b      	adds	r3, r5, r0
 800acaa:	2b08      	cmp	r3, #8
 800acac:	f105 0501 	add.w	r5, r5, #1
 800acb0:	4405      	add	r5, r0
 800acb2:	dc1a      	bgt.n	800acea <_strtod_l+0x26a>
 800acb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acb6:	230a      	movs	r3, #10
 800acb8:	fb03 2301 	mla	r3, r3, r1, r2
 800acbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acbe:	2300      	movs	r3, #0
 800acc0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acc2:	1c51      	adds	r1, r2, #1
 800acc4:	9119      	str	r1, [sp, #100]	@ 0x64
 800acc6:	7852      	ldrb	r2, [r2, #1]
 800acc8:	4618      	mov	r0, r3
 800acca:	e7c5      	b.n	800ac58 <_strtod_l+0x1d8>
 800accc:	4648      	mov	r0, r9
 800acce:	e7ce      	b.n	800ac6e <_strtod_l+0x1ee>
 800acd0:	2e08      	cmp	r6, #8
 800acd2:	dc05      	bgt.n	800ace0 <_strtod_l+0x260>
 800acd4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800acd6:	fb0e f606 	mul.w	r6, lr, r6
 800acda:	960b      	str	r6, [sp, #44]	@ 0x2c
 800acdc:	460e      	mov	r6, r1
 800acde:	e7dc      	b.n	800ac9a <_strtod_l+0x21a>
 800ace0:	2910      	cmp	r1, #16
 800ace2:	bfd8      	it	le
 800ace4:	fb0e f707 	mulle.w	r7, lr, r7
 800ace8:	e7f8      	b.n	800acdc <_strtod_l+0x25c>
 800acea:	2b0f      	cmp	r3, #15
 800acec:	bfdc      	itt	le
 800acee:	230a      	movle	r3, #10
 800acf0:	fb03 2707 	mlale	r7, r3, r7, r2
 800acf4:	e7e3      	b.n	800acbe <_strtod_l+0x23e>
 800acf6:	2300      	movs	r3, #0
 800acf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800acfa:	2301      	movs	r3, #1
 800acfc:	e77a      	b.n	800abf4 <_strtod_l+0x174>
 800acfe:	f04f 0c00 	mov.w	ip, #0
 800ad02:	1ca2      	adds	r2, r4, #2
 800ad04:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad06:	78a2      	ldrb	r2, [r4, #2]
 800ad08:	e782      	b.n	800ac10 <_strtod_l+0x190>
 800ad0a:	f04f 0c01 	mov.w	ip, #1
 800ad0e:	e7f8      	b.n	800ad02 <_strtod_l+0x282>
 800ad10:	0800ccdc 	.word	0x0800ccdc
 800ad14:	0800cb0f 	.word	0x0800cb0f
 800ad18:	7ff00000 	.word	0x7ff00000
 800ad1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad1e:	1c51      	adds	r1, r2, #1
 800ad20:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad22:	7852      	ldrb	r2, [r2, #1]
 800ad24:	2a30      	cmp	r2, #48	@ 0x30
 800ad26:	d0f9      	beq.n	800ad1c <_strtod_l+0x29c>
 800ad28:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ad2c:	2908      	cmp	r1, #8
 800ad2e:	f63f af75 	bhi.w	800ac1c <_strtod_l+0x19c>
 800ad32:	3a30      	subs	r2, #48	@ 0x30
 800ad34:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad38:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ad3a:	f04f 080a 	mov.w	r8, #10
 800ad3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad40:	1c56      	adds	r6, r2, #1
 800ad42:	9619      	str	r6, [sp, #100]	@ 0x64
 800ad44:	7852      	ldrb	r2, [r2, #1]
 800ad46:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ad4a:	f1be 0f09 	cmp.w	lr, #9
 800ad4e:	d939      	bls.n	800adc4 <_strtod_l+0x344>
 800ad50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ad52:	1a76      	subs	r6, r6, r1
 800ad54:	2e08      	cmp	r6, #8
 800ad56:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ad5a:	dc03      	bgt.n	800ad64 <_strtod_l+0x2e4>
 800ad5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad5e:	4588      	cmp	r8, r1
 800ad60:	bfa8      	it	ge
 800ad62:	4688      	movge	r8, r1
 800ad64:	f1bc 0f00 	cmp.w	ip, #0
 800ad68:	d001      	beq.n	800ad6e <_strtod_l+0x2ee>
 800ad6a:	f1c8 0800 	rsb	r8, r8, #0
 800ad6e:	2d00      	cmp	r5, #0
 800ad70:	d14e      	bne.n	800ae10 <_strtod_l+0x390>
 800ad72:	9908      	ldr	r1, [sp, #32]
 800ad74:	4308      	orrs	r0, r1
 800ad76:	f47f aebc 	bne.w	800aaf2 <_strtod_l+0x72>
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f47f aed4 	bne.w	800ab28 <_strtod_l+0xa8>
 800ad80:	2a69      	cmp	r2, #105	@ 0x69
 800ad82:	d028      	beq.n	800add6 <_strtod_l+0x356>
 800ad84:	dc25      	bgt.n	800add2 <_strtod_l+0x352>
 800ad86:	2a49      	cmp	r2, #73	@ 0x49
 800ad88:	d025      	beq.n	800add6 <_strtod_l+0x356>
 800ad8a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ad8c:	f47f aecc 	bne.w	800ab28 <_strtod_l+0xa8>
 800ad90:	499a      	ldr	r1, [pc, #616]	@ (800affc <_strtod_l+0x57c>)
 800ad92:	a819      	add	r0, sp, #100	@ 0x64
 800ad94:	f001 f9e0 	bl	800c158 <__match>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	f43f aec5 	beq.w	800ab28 <_strtod_l+0xa8>
 800ad9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	2b28      	cmp	r3, #40	@ 0x28
 800ada4:	d12e      	bne.n	800ae04 <_strtod_l+0x384>
 800ada6:	4996      	ldr	r1, [pc, #600]	@ (800b000 <_strtod_l+0x580>)
 800ada8:	aa1c      	add	r2, sp, #112	@ 0x70
 800adaa:	a819      	add	r0, sp, #100	@ 0x64
 800adac:	f001 f9e8 	bl	800c180 <__hexnan>
 800adb0:	2805      	cmp	r0, #5
 800adb2:	d127      	bne.n	800ae04 <_strtod_l+0x384>
 800adb4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800adb6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800adba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800adbe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800adc2:	e696      	b.n	800aaf2 <_strtod_l+0x72>
 800adc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adc6:	fb08 2101 	mla	r1, r8, r1, r2
 800adca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800adce:	9209      	str	r2, [sp, #36]	@ 0x24
 800add0:	e7b5      	b.n	800ad3e <_strtod_l+0x2be>
 800add2:	2a6e      	cmp	r2, #110	@ 0x6e
 800add4:	e7da      	b.n	800ad8c <_strtod_l+0x30c>
 800add6:	498b      	ldr	r1, [pc, #556]	@ (800b004 <_strtod_l+0x584>)
 800add8:	a819      	add	r0, sp, #100	@ 0x64
 800adda:	f001 f9bd 	bl	800c158 <__match>
 800adde:	2800      	cmp	r0, #0
 800ade0:	f43f aea2 	beq.w	800ab28 <_strtod_l+0xa8>
 800ade4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ade6:	4988      	ldr	r1, [pc, #544]	@ (800b008 <_strtod_l+0x588>)
 800ade8:	3b01      	subs	r3, #1
 800adea:	a819      	add	r0, sp, #100	@ 0x64
 800adec:	9319      	str	r3, [sp, #100]	@ 0x64
 800adee:	f001 f9b3 	bl	800c158 <__match>
 800adf2:	b910      	cbnz	r0, 800adfa <_strtod_l+0x37a>
 800adf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adf6:	3301      	adds	r3, #1
 800adf8:	9319      	str	r3, [sp, #100]	@ 0x64
 800adfa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b018 <_strtod_l+0x598>
 800adfe:	f04f 0a00 	mov.w	sl, #0
 800ae02:	e676      	b.n	800aaf2 <_strtod_l+0x72>
 800ae04:	4881      	ldr	r0, [pc, #516]	@ (800b00c <_strtod_l+0x58c>)
 800ae06:	f000 fee3 	bl	800bbd0 <nan>
 800ae0a:	ec5b ab10 	vmov	sl, fp, d0
 800ae0e:	e670      	b.n	800aaf2 <_strtod_l+0x72>
 800ae10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae12:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ae14:	eba8 0303 	sub.w	r3, r8, r3
 800ae18:	f1b9 0f00 	cmp.w	r9, #0
 800ae1c:	bf08      	it	eq
 800ae1e:	46a9      	moveq	r9, r5
 800ae20:	2d10      	cmp	r5, #16
 800ae22:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae24:	462c      	mov	r4, r5
 800ae26:	bfa8      	it	ge
 800ae28:	2410      	movge	r4, #16
 800ae2a:	f7f5 fb73 	bl	8000514 <__aeabi_ui2d>
 800ae2e:	2d09      	cmp	r5, #9
 800ae30:	4682      	mov	sl, r0
 800ae32:	468b      	mov	fp, r1
 800ae34:	dc13      	bgt.n	800ae5e <_strtod_l+0x3de>
 800ae36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f43f ae5a 	beq.w	800aaf2 <_strtod_l+0x72>
 800ae3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae40:	dd78      	ble.n	800af34 <_strtod_l+0x4b4>
 800ae42:	2b16      	cmp	r3, #22
 800ae44:	dc5f      	bgt.n	800af06 <_strtod_l+0x486>
 800ae46:	4972      	ldr	r1, [pc, #456]	@ (800b010 <_strtod_l+0x590>)
 800ae48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae50:	4652      	mov	r2, sl
 800ae52:	465b      	mov	r3, fp
 800ae54:	f7f5 fbd8 	bl	8000608 <__aeabi_dmul>
 800ae58:	4682      	mov	sl, r0
 800ae5a:	468b      	mov	fp, r1
 800ae5c:	e649      	b.n	800aaf2 <_strtod_l+0x72>
 800ae5e:	4b6c      	ldr	r3, [pc, #432]	@ (800b010 <_strtod_l+0x590>)
 800ae60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ae68:	f7f5 fbce 	bl	8000608 <__aeabi_dmul>
 800ae6c:	4682      	mov	sl, r0
 800ae6e:	4638      	mov	r0, r7
 800ae70:	468b      	mov	fp, r1
 800ae72:	f7f5 fb4f 	bl	8000514 <__aeabi_ui2d>
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	4650      	mov	r0, sl
 800ae7c:	4659      	mov	r1, fp
 800ae7e:	f7f5 fa0d 	bl	800029c <__adddf3>
 800ae82:	2d0f      	cmp	r5, #15
 800ae84:	4682      	mov	sl, r0
 800ae86:	468b      	mov	fp, r1
 800ae88:	ddd5      	ble.n	800ae36 <_strtod_l+0x3b6>
 800ae8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae8c:	1b2c      	subs	r4, r5, r4
 800ae8e:	441c      	add	r4, r3
 800ae90:	2c00      	cmp	r4, #0
 800ae92:	f340 8093 	ble.w	800afbc <_strtod_l+0x53c>
 800ae96:	f014 030f 	ands.w	r3, r4, #15
 800ae9a:	d00a      	beq.n	800aeb2 <_strtod_l+0x432>
 800ae9c:	495c      	ldr	r1, [pc, #368]	@ (800b010 <_strtod_l+0x590>)
 800ae9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aea2:	4652      	mov	r2, sl
 800aea4:	465b      	mov	r3, fp
 800aea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeaa:	f7f5 fbad 	bl	8000608 <__aeabi_dmul>
 800aeae:	4682      	mov	sl, r0
 800aeb0:	468b      	mov	fp, r1
 800aeb2:	f034 040f 	bics.w	r4, r4, #15
 800aeb6:	d073      	beq.n	800afa0 <_strtod_l+0x520>
 800aeb8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aebc:	dd49      	ble.n	800af52 <_strtod_l+0x4d2>
 800aebe:	2400      	movs	r4, #0
 800aec0:	46a0      	mov	r8, r4
 800aec2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aec4:	46a1      	mov	r9, r4
 800aec6:	9a05      	ldr	r2, [sp, #20]
 800aec8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b018 <_strtod_l+0x598>
 800aecc:	2322      	movs	r3, #34	@ 0x22
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	f04f 0a00 	mov.w	sl, #0
 800aed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f43f ae0b 	beq.w	800aaf2 <_strtod_l+0x72>
 800aedc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aede:	9805      	ldr	r0, [sp, #20]
 800aee0:	f7ff f946 	bl	800a170 <_Bfree>
 800aee4:	9805      	ldr	r0, [sp, #20]
 800aee6:	4649      	mov	r1, r9
 800aee8:	f7ff f942 	bl	800a170 <_Bfree>
 800aeec:	9805      	ldr	r0, [sp, #20]
 800aeee:	4641      	mov	r1, r8
 800aef0:	f7ff f93e 	bl	800a170 <_Bfree>
 800aef4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aef6:	9805      	ldr	r0, [sp, #20]
 800aef8:	f7ff f93a 	bl	800a170 <_Bfree>
 800aefc:	9805      	ldr	r0, [sp, #20]
 800aefe:	4621      	mov	r1, r4
 800af00:	f7ff f936 	bl	800a170 <_Bfree>
 800af04:	e5f5      	b.n	800aaf2 <_strtod_l+0x72>
 800af06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800af0c:	4293      	cmp	r3, r2
 800af0e:	dbbc      	blt.n	800ae8a <_strtod_l+0x40a>
 800af10:	4c3f      	ldr	r4, [pc, #252]	@ (800b010 <_strtod_l+0x590>)
 800af12:	f1c5 050f 	rsb	r5, r5, #15
 800af16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800af1a:	4652      	mov	r2, sl
 800af1c:	465b      	mov	r3, fp
 800af1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af22:	f7f5 fb71 	bl	8000608 <__aeabi_dmul>
 800af26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af28:	1b5d      	subs	r5, r3, r5
 800af2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800af2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af32:	e78f      	b.n	800ae54 <_strtod_l+0x3d4>
 800af34:	3316      	adds	r3, #22
 800af36:	dba8      	blt.n	800ae8a <_strtod_l+0x40a>
 800af38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af3a:	eba3 0808 	sub.w	r8, r3, r8
 800af3e:	4b34      	ldr	r3, [pc, #208]	@ (800b010 <_strtod_l+0x590>)
 800af40:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800af44:	e9d8 2300 	ldrd	r2, r3, [r8]
 800af48:	4650      	mov	r0, sl
 800af4a:	4659      	mov	r1, fp
 800af4c:	f7f5 fc86 	bl	800085c <__aeabi_ddiv>
 800af50:	e782      	b.n	800ae58 <_strtod_l+0x3d8>
 800af52:	2300      	movs	r3, #0
 800af54:	4f2f      	ldr	r7, [pc, #188]	@ (800b014 <_strtod_l+0x594>)
 800af56:	1124      	asrs	r4, r4, #4
 800af58:	4650      	mov	r0, sl
 800af5a:	4659      	mov	r1, fp
 800af5c:	461e      	mov	r6, r3
 800af5e:	2c01      	cmp	r4, #1
 800af60:	dc21      	bgt.n	800afa6 <_strtod_l+0x526>
 800af62:	b10b      	cbz	r3, 800af68 <_strtod_l+0x4e8>
 800af64:	4682      	mov	sl, r0
 800af66:	468b      	mov	fp, r1
 800af68:	492a      	ldr	r1, [pc, #168]	@ (800b014 <_strtod_l+0x594>)
 800af6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800af6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800af72:	4652      	mov	r2, sl
 800af74:	465b      	mov	r3, fp
 800af76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af7a:	f7f5 fb45 	bl	8000608 <__aeabi_dmul>
 800af7e:	4b26      	ldr	r3, [pc, #152]	@ (800b018 <_strtod_l+0x598>)
 800af80:	460a      	mov	r2, r1
 800af82:	400b      	ands	r3, r1
 800af84:	4925      	ldr	r1, [pc, #148]	@ (800b01c <_strtod_l+0x59c>)
 800af86:	428b      	cmp	r3, r1
 800af88:	4682      	mov	sl, r0
 800af8a:	d898      	bhi.n	800aebe <_strtod_l+0x43e>
 800af8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800af90:	428b      	cmp	r3, r1
 800af92:	bf86      	itte	hi
 800af94:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b020 <_strtod_l+0x5a0>
 800af98:	f04f 3aff 	movhi.w	sl, #4294967295
 800af9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800afa0:	2300      	movs	r3, #0
 800afa2:	9308      	str	r3, [sp, #32]
 800afa4:	e076      	b.n	800b094 <_strtod_l+0x614>
 800afa6:	07e2      	lsls	r2, r4, #31
 800afa8:	d504      	bpl.n	800afb4 <_strtod_l+0x534>
 800afaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afae:	f7f5 fb2b 	bl	8000608 <__aeabi_dmul>
 800afb2:	2301      	movs	r3, #1
 800afb4:	3601      	adds	r6, #1
 800afb6:	1064      	asrs	r4, r4, #1
 800afb8:	3708      	adds	r7, #8
 800afba:	e7d0      	b.n	800af5e <_strtod_l+0x4de>
 800afbc:	d0f0      	beq.n	800afa0 <_strtod_l+0x520>
 800afbe:	4264      	negs	r4, r4
 800afc0:	f014 020f 	ands.w	r2, r4, #15
 800afc4:	d00a      	beq.n	800afdc <_strtod_l+0x55c>
 800afc6:	4b12      	ldr	r3, [pc, #72]	@ (800b010 <_strtod_l+0x590>)
 800afc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afcc:	4650      	mov	r0, sl
 800afce:	4659      	mov	r1, fp
 800afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd4:	f7f5 fc42 	bl	800085c <__aeabi_ddiv>
 800afd8:	4682      	mov	sl, r0
 800afda:	468b      	mov	fp, r1
 800afdc:	1124      	asrs	r4, r4, #4
 800afde:	d0df      	beq.n	800afa0 <_strtod_l+0x520>
 800afe0:	2c1f      	cmp	r4, #31
 800afe2:	dd1f      	ble.n	800b024 <_strtod_l+0x5a4>
 800afe4:	2400      	movs	r4, #0
 800afe6:	46a0      	mov	r8, r4
 800afe8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800afea:	46a1      	mov	r9, r4
 800afec:	9a05      	ldr	r2, [sp, #20]
 800afee:	2322      	movs	r3, #34	@ 0x22
 800aff0:	f04f 0a00 	mov.w	sl, #0
 800aff4:	f04f 0b00 	mov.w	fp, #0
 800aff8:	6013      	str	r3, [r2, #0]
 800affa:	e76b      	b.n	800aed4 <_strtod_l+0x454>
 800affc:	0800c9fd 	.word	0x0800c9fd
 800b000:	0800ccc8 	.word	0x0800ccc8
 800b004:	0800c9f5 	.word	0x0800c9f5
 800b008:	0800ca2c 	.word	0x0800ca2c
 800b00c:	0800cb65 	.word	0x0800cb65
 800b010:	0800cc00 	.word	0x0800cc00
 800b014:	0800cbd8 	.word	0x0800cbd8
 800b018:	7ff00000 	.word	0x7ff00000
 800b01c:	7ca00000 	.word	0x7ca00000
 800b020:	7fefffff 	.word	0x7fefffff
 800b024:	f014 0310 	ands.w	r3, r4, #16
 800b028:	bf18      	it	ne
 800b02a:	236a      	movne	r3, #106	@ 0x6a
 800b02c:	4ea9      	ldr	r6, [pc, #676]	@ (800b2d4 <_strtod_l+0x854>)
 800b02e:	9308      	str	r3, [sp, #32]
 800b030:	4650      	mov	r0, sl
 800b032:	4659      	mov	r1, fp
 800b034:	2300      	movs	r3, #0
 800b036:	07e7      	lsls	r7, r4, #31
 800b038:	d504      	bpl.n	800b044 <_strtod_l+0x5c4>
 800b03a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b03e:	f7f5 fae3 	bl	8000608 <__aeabi_dmul>
 800b042:	2301      	movs	r3, #1
 800b044:	1064      	asrs	r4, r4, #1
 800b046:	f106 0608 	add.w	r6, r6, #8
 800b04a:	d1f4      	bne.n	800b036 <_strtod_l+0x5b6>
 800b04c:	b10b      	cbz	r3, 800b052 <_strtod_l+0x5d2>
 800b04e:	4682      	mov	sl, r0
 800b050:	468b      	mov	fp, r1
 800b052:	9b08      	ldr	r3, [sp, #32]
 800b054:	b1b3      	cbz	r3, 800b084 <_strtod_l+0x604>
 800b056:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b05a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b05e:	2b00      	cmp	r3, #0
 800b060:	4659      	mov	r1, fp
 800b062:	dd0f      	ble.n	800b084 <_strtod_l+0x604>
 800b064:	2b1f      	cmp	r3, #31
 800b066:	dd56      	ble.n	800b116 <_strtod_l+0x696>
 800b068:	2b34      	cmp	r3, #52	@ 0x34
 800b06a:	bfde      	ittt	le
 800b06c:	f04f 33ff 	movle.w	r3, #4294967295
 800b070:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b074:	4093      	lslle	r3, r2
 800b076:	f04f 0a00 	mov.w	sl, #0
 800b07a:	bfcc      	ite	gt
 800b07c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b080:	ea03 0b01 	andle.w	fp, r3, r1
 800b084:	2200      	movs	r2, #0
 800b086:	2300      	movs	r3, #0
 800b088:	4650      	mov	r0, sl
 800b08a:	4659      	mov	r1, fp
 800b08c:	f7f5 fd24 	bl	8000ad8 <__aeabi_dcmpeq>
 800b090:	2800      	cmp	r0, #0
 800b092:	d1a7      	bne.n	800afe4 <_strtod_l+0x564>
 800b094:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b09a:	9805      	ldr	r0, [sp, #20]
 800b09c:	462b      	mov	r3, r5
 800b09e:	464a      	mov	r2, r9
 800b0a0:	f7ff f8ce 	bl	800a240 <__s2b>
 800b0a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	f43f af09 	beq.w	800aebe <_strtod_l+0x43e>
 800b0ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0b0:	2a00      	cmp	r2, #0
 800b0b2:	eba3 0308 	sub.w	r3, r3, r8
 800b0b6:	bfa8      	it	ge
 800b0b8:	2300      	movge	r3, #0
 800b0ba:	9312      	str	r3, [sp, #72]	@ 0x48
 800b0bc:	2400      	movs	r4, #0
 800b0be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b0c2:	9316      	str	r3, [sp, #88]	@ 0x58
 800b0c4:	46a0      	mov	r8, r4
 800b0c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0c8:	9805      	ldr	r0, [sp, #20]
 800b0ca:	6859      	ldr	r1, [r3, #4]
 800b0cc:	f7ff f810 	bl	800a0f0 <_Balloc>
 800b0d0:	4681      	mov	r9, r0
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	f43f aef7 	beq.w	800aec6 <_strtod_l+0x446>
 800b0d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0da:	691a      	ldr	r2, [r3, #16]
 800b0dc:	3202      	adds	r2, #2
 800b0de:	f103 010c 	add.w	r1, r3, #12
 800b0e2:	0092      	lsls	r2, r2, #2
 800b0e4:	300c      	adds	r0, #12
 800b0e6:	f7fe f896 	bl	8009216 <memcpy>
 800b0ea:	ec4b ab10 	vmov	d0, sl, fp
 800b0ee:	9805      	ldr	r0, [sp, #20]
 800b0f0:	aa1c      	add	r2, sp, #112	@ 0x70
 800b0f2:	a91b      	add	r1, sp, #108	@ 0x6c
 800b0f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b0f8:	f7ff fbd6 	bl	800a8a8 <__d2b>
 800b0fc:	901a      	str	r0, [sp, #104]	@ 0x68
 800b0fe:	2800      	cmp	r0, #0
 800b100:	f43f aee1 	beq.w	800aec6 <_strtod_l+0x446>
 800b104:	9805      	ldr	r0, [sp, #20]
 800b106:	2101      	movs	r1, #1
 800b108:	f7ff f930 	bl	800a36c <__i2b>
 800b10c:	4680      	mov	r8, r0
 800b10e:	b948      	cbnz	r0, 800b124 <_strtod_l+0x6a4>
 800b110:	f04f 0800 	mov.w	r8, #0
 800b114:	e6d7      	b.n	800aec6 <_strtod_l+0x446>
 800b116:	f04f 32ff 	mov.w	r2, #4294967295
 800b11a:	fa02 f303 	lsl.w	r3, r2, r3
 800b11e:	ea03 0a0a 	and.w	sl, r3, sl
 800b122:	e7af      	b.n	800b084 <_strtod_l+0x604>
 800b124:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b126:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b128:	2d00      	cmp	r5, #0
 800b12a:	bfab      	itete	ge
 800b12c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b12e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b130:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b132:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b134:	bfac      	ite	ge
 800b136:	18ef      	addge	r7, r5, r3
 800b138:	1b5e      	sublt	r6, r3, r5
 800b13a:	9b08      	ldr	r3, [sp, #32]
 800b13c:	1aed      	subs	r5, r5, r3
 800b13e:	4415      	add	r5, r2
 800b140:	4b65      	ldr	r3, [pc, #404]	@ (800b2d8 <_strtod_l+0x858>)
 800b142:	3d01      	subs	r5, #1
 800b144:	429d      	cmp	r5, r3
 800b146:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b14a:	da50      	bge.n	800b1ee <_strtod_l+0x76e>
 800b14c:	1b5b      	subs	r3, r3, r5
 800b14e:	2b1f      	cmp	r3, #31
 800b150:	eba2 0203 	sub.w	r2, r2, r3
 800b154:	f04f 0101 	mov.w	r1, #1
 800b158:	dc3d      	bgt.n	800b1d6 <_strtod_l+0x756>
 800b15a:	fa01 f303 	lsl.w	r3, r1, r3
 800b15e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b160:	2300      	movs	r3, #0
 800b162:	9310      	str	r3, [sp, #64]	@ 0x40
 800b164:	18bd      	adds	r5, r7, r2
 800b166:	9b08      	ldr	r3, [sp, #32]
 800b168:	42af      	cmp	r7, r5
 800b16a:	4416      	add	r6, r2
 800b16c:	441e      	add	r6, r3
 800b16e:	463b      	mov	r3, r7
 800b170:	bfa8      	it	ge
 800b172:	462b      	movge	r3, r5
 800b174:	42b3      	cmp	r3, r6
 800b176:	bfa8      	it	ge
 800b178:	4633      	movge	r3, r6
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	bfc2      	ittt	gt
 800b17e:	1aed      	subgt	r5, r5, r3
 800b180:	1af6      	subgt	r6, r6, r3
 800b182:	1aff      	subgt	r7, r7, r3
 800b184:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b186:	2b00      	cmp	r3, #0
 800b188:	dd16      	ble.n	800b1b8 <_strtod_l+0x738>
 800b18a:	4641      	mov	r1, r8
 800b18c:	9805      	ldr	r0, [sp, #20]
 800b18e:	461a      	mov	r2, r3
 800b190:	f7ff f9a4 	bl	800a4dc <__pow5mult>
 800b194:	4680      	mov	r8, r0
 800b196:	2800      	cmp	r0, #0
 800b198:	d0ba      	beq.n	800b110 <_strtod_l+0x690>
 800b19a:	4601      	mov	r1, r0
 800b19c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b19e:	9805      	ldr	r0, [sp, #20]
 800b1a0:	f7ff f8fa 	bl	800a398 <__multiply>
 800b1a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	f43f ae8d 	beq.w	800aec6 <_strtod_l+0x446>
 800b1ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1ae:	9805      	ldr	r0, [sp, #20]
 800b1b0:	f7fe ffde 	bl	800a170 <_Bfree>
 800b1b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1b8:	2d00      	cmp	r5, #0
 800b1ba:	dc1d      	bgt.n	800b1f8 <_strtod_l+0x778>
 800b1bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	dd23      	ble.n	800b20a <_strtod_l+0x78a>
 800b1c2:	4649      	mov	r1, r9
 800b1c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b1c6:	9805      	ldr	r0, [sp, #20]
 800b1c8:	f7ff f988 	bl	800a4dc <__pow5mult>
 800b1cc:	4681      	mov	r9, r0
 800b1ce:	b9e0      	cbnz	r0, 800b20a <_strtod_l+0x78a>
 800b1d0:	f04f 0900 	mov.w	r9, #0
 800b1d4:	e677      	b.n	800aec6 <_strtod_l+0x446>
 800b1d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b1da:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b1de:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b1e2:	35e2      	adds	r5, #226	@ 0xe2
 800b1e4:	fa01 f305 	lsl.w	r3, r1, r5
 800b1e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b1ec:	e7ba      	b.n	800b164 <_strtod_l+0x6e4>
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1f6:	e7b5      	b.n	800b164 <_strtod_l+0x6e4>
 800b1f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1fa:	9805      	ldr	r0, [sp, #20]
 800b1fc:	462a      	mov	r2, r5
 800b1fe:	f7ff f9c7 	bl	800a590 <__lshift>
 800b202:	901a      	str	r0, [sp, #104]	@ 0x68
 800b204:	2800      	cmp	r0, #0
 800b206:	d1d9      	bne.n	800b1bc <_strtod_l+0x73c>
 800b208:	e65d      	b.n	800aec6 <_strtod_l+0x446>
 800b20a:	2e00      	cmp	r6, #0
 800b20c:	dd07      	ble.n	800b21e <_strtod_l+0x79e>
 800b20e:	4649      	mov	r1, r9
 800b210:	9805      	ldr	r0, [sp, #20]
 800b212:	4632      	mov	r2, r6
 800b214:	f7ff f9bc 	bl	800a590 <__lshift>
 800b218:	4681      	mov	r9, r0
 800b21a:	2800      	cmp	r0, #0
 800b21c:	d0d8      	beq.n	800b1d0 <_strtod_l+0x750>
 800b21e:	2f00      	cmp	r7, #0
 800b220:	dd08      	ble.n	800b234 <_strtod_l+0x7b4>
 800b222:	4641      	mov	r1, r8
 800b224:	9805      	ldr	r0, [sp, #20]
 800b226:	463a      	mov	r2, r7
 800b228:	f7ff f9b2 	bl	800a590 <__lshift>
 800b22c:	4680      	mov	r8, r0
 800b22e:	2800      	cmp	r0, #0
 800b230:	f43f ae49 	beq.w	800aec6 <_strtod_l+0x446>
 800b234:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b236:	9805      	ldr	r0, [sp, #20]
 800b238:	464a      	mov	r2, r9
 800b23a:	f7ff fa31 	bl	800a6a0 <__mdiff>
 800b23e:	4604      	mov	r4, r0
 800b240:	2800      	cmp	r0, #0
 800b242:	f43f ae40 	beq.w	800aec6 <_strtod_l+0x446>
 800b246:	68c3      	ldr	r3, [r0, #12]
 800b248:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b24a:	2300      	movs	r3, #0
 800b24c:	60c3      	str	r3, [r0, #12]
 800b24e:	4641      	mov	r1, r8
 800b250:	f7ff fa0a 	bl	800a668 <__mcmp>
 800b254:	2800      	cmp	r0, #0
 800b256:	da45      	bge.n	800b2e4 <_strtod_l+0x864>
 800b258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b25a:	ea53 030a 	orrs.w	r3, r3, sl
 800b25e:	d16b      	bne.n	800b338 <_strtod_l+0x8b8>
 800b260:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b264:	2b00      	cmp	r3, #0
 800b266:	d167      	bne.n	800b338 <_strtod_l+0x8b8>
 800b268:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b26c:	0d1b      	lsrs	r3, r3, #20
 800b26e:	051b      	lsls	r3, r3, #20
 800b270:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b274:	d960      	bls.n	800b338 <_strtod_l+0x8b8>
 800b276:	6963      	ldr	r3, [r4, #20]
 800b278:	b913      	cbnz	r3, 800b280 <_strtod_l+0x800>
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	dd5b      	ble.n	800b338 <_strtod_l+0x8b8>
 800b280:	4621      	mov	r1, r4
 800b282:	2201      	movs	r2, #1
 800b284:	9805      	ldr	r0, [sp, #20]
 800b286:	f7ff f983 	bl	800a590 <__lshift>
 800b28a:	4641      	mov	r1, r8
 800b28c:	4604      	mov	r4, r0
 800b28e:	f7ff f9eb 	bl	800a668 <__mcmp>
 800b292:	2800      	cmp	r0, #0
 800b294:	dd50      	ble.n	800b338 <_strtod_l+0x8b8>
 800b296:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b29a:	9a08      	ldr	r2, [sp, #32]
 800b29c:	0d1b      	lsrs	r3, r3, #20
 800b29e:	051b      	lsls	r3, r3, #20
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	d06a      	beq.n	800b37a <_strtod_l+0x8fa>
 800b2a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b2a8:	d867      	bhi.n	800b37a <_strtod_l+0x8fa>
 800b2aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b2ae:	f67f ae9d 	bls.w	800afec <_strtod_l+0x56c>
 800b2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b2dc <_strtod_l+0x85c>)
 800b2b4:	4650      	mov	r0, sl
 800b2b6:	4659      	mov	r1, fp
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f7f5 f9a5 	bl	8000608 <__aeabi_dmul>
 800b2be:	4b08      	ldr	r3, [pc, #32]	@ (800b2e0 <_strtod_l+0x860>)
 800b2c0:	400b      	ands	r3, r1
 800b2c2:	4682      	mov	sl, r0
 800b2c4:	468b      	mov	fp, r1
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	f47f ae08 	bne.w	800aedc <_strtod_l+0x45c>
 800b2cc:	9a05      	ldr	r2, [sp, #20]
 800b2ce:	2322      	movs	r3, #34	@ 0x22
 800b2d0:	6013      	str	r3, [r2, #0]
 800b2d2:	e603      	b.n	800aedc <_strtod_l+0x45c>
 800b2d4:	0800ccf0 	.word	0x0800ccf0
 800b2d8:	fffffc02 	.word	0xfffffc02
 800b2dc:	39500000 	.word	0x39500000
 800b2e0:	7ff00000 	.word	0x7ff00000
 800b2e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b2e8:	d165      	bne.n	800b3b6 <_strtod_l+0x936>
 800b2ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b2ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2f0:	b35a      	cbz	r2, 800b34a <_strtod_l+0x8ca>
 800b2f2:	4a9f      	ldr	r2, [pc, #636]	@ (800b570 <_strtod_l+0xaf0>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d12b      	bne.n	800b350 <_strtod_l+0x8d0>
 800b2f8:	9b08      	ldr	r3, [sp, #32]
 800b2fa:	4651      	mov	r1, sl
 800b2fc:	b303      	cbz	r3, 800b340 <_strtod_l+0x8c0>
 800b2fe:	4b9d      	ldr	r3, [pc, #628]	@ (800b574 <_strtod_l+0xaf4>)
 800b300:	465a      	mov	r2, fp
 800b302:	4013      	ands	r3, r2
 800b304:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b308:	f04f 32ff 	mov.w	r2, #4294967295
 800b30c:	d81b      	bhi.n	800b346 <_strtod_l+0x8c6>
 800b30e:	0d1b      	lsrs	r3, r3, #20
 800b310:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b314:	fa02 f303 	lsl.w	r3, r2, r3
 800b318:	4299      	cmp	r1, r3
 800b31a:	d119      	bne.n	800b350 <_strtod_l+0x8d0>
 800b31c:	4b96      	ldr	r3, [pc, #600]	@ (800b578 <_strtod_l+0xaf8>)
 800b31e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b320:	429a      	cmp	r2, r3
 800b322:	d102      	bne.n	800b32a <_strtod_l+0x8aa>
 800b324:	3101      	adds	r1, #1
 800b326:	f43f adce 	beq.w	800aec6 <_strtod_l+0x446>
 800b32a:	4b92      	ldr	r3, [pc, #584]	@ (800b574 <_strtod_l+0xaf4>)
 800b32c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b32e:	401a      	ands	r2, r3
 800b330:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b334:	f04f 0a00 	mov.w	sl, #0
 800b338:	9b08      	ldr	r3, [sp, #32]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1b9      	bne.n	800b2b2 <_strtod_l+0x832>
 800b33e:	e5cd      	b.n	800aedc <_strtod_l+0x45c>
 800b340:	f04f 33ff 	mov.w	r3, #4294967295
 800b344:	e7e8      	b.n	800b318 <_strtod_l+0x898>
 800b346:	4613      	mov	r3, r2
 800b348:	e7e6      	b.n	800b318 <_strtod_l+0x898>
 800b34a:	ea53 030a 	orrs.w	r3, r3, sl
 800b34e:	d0a2      	beq.n	800b296 <_strtod_l+0x816>
 800b350:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b352:	b1db      	cbz	r3, 800b38c <_strtod_l+0x90c>
 800b354:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b356:	4213      	tst	r3, r2
 800b358:	d0ee      	beq.n	800b338 <_strtod_l+0x8b8>
 800b35a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b35c:	9a08      	ldr	r2, [sp, #32]
 800b35e:	4650      	mov	r0, sl
 800b360:	4659      	mov	r1, fp
 800b362:	b1bb      	cbz	r3, 800b394 <_strtod_l+0x914>
 800b364:	f7ff fb6e 	bl	800aa44 <sulp>
 800b368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b36c:	ec53 2b10 	vmov	r2, r3, d0
 800b370:	f7f4 ff94 	bl	800029c <__adddf3>
 800b374:	4682      	mov	sl, r0
 800b376:	468b      	mov	fp, r1
 800b378:	e7de      	b.n	800b338 <_strtod_l+0x8b8>
 800b37a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b37e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b382:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b386:	f04f 3aff 	mov.w	sl, #4294967295
 800b38a:	e7d5      	b.n	800b338 <_strtod_l+0x8b8>
 800b38c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b38e:	ea13 0f0a 	tst.w	r3, sl
 800b392:	e7e1      	b.n	800b358 <_strtod_l+0x8d8>
 800b394:	f7ff fb56 	bl	800aa44 <sulp>
 800b398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b39c:	ec53 2b10 	vmov	r2, r3, d0
 800b3a0:	f7f4 ff7a 	bl	8000298 <__aeabi_dsub>
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	4682      	mov	sl, r0
 800b3aa:	468b      	mov	fp, r1
 800b3ac:	f7f5 fb94 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d0c1      	beq.n	800b338 <_strtod_l+0x8b8>
 800b3b4:	e61a      	b.n	800afec <_strtod_l+0x56c>
 800b3b6:	4641      	mov	r1, r8
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f7ff facd 	bl	800a958 <__ratio>
 800b3be:	ec57 6b10 	vmov	r6, r7, d0
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	f7f5 fb98 	bl	8000b00 <__aeabi_dcmple>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d06f      	beq.n	800b4b4 <_strtod_l+0xa34>
 800b3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d17a      	bne.n	800b4d0 <_strtod_l+0xa50>
 800b3da:	f1ba 0f00 	cmp.w	sl, #0
 800b3de:	d158      	bne.n	800b492 <_strtod_l+0xa12>
 800b3e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d15a      	bne.n	800b4a0 <_strtod_l+0xa20>
 800b3ea:	4b64      	ldr	r3, [pc, #400]	@ (800b57c <_strtod_l+0xafc>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	4639      	mov	r1, r7
 800b3f2:	f7f5 fb7b 	bl	8000aec <__aeabi_dcmplt>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d159      	bne.n	800b4ae <_strtod_l+0xa2e>
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	4b60      	ldr	r3, [pc, #384]	@ (800b580 <_strtod_l+0xb00>)
 800b400:	2200      	movs	r2, #0
 800b402:	f7f5 f901 	bl	8000608 <__aeabi_dmul>
 800b406:	4606      	mov	r6, r0
 800b408:	460f      	mov	r7, r1
 800b40a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b40e:	9606      	str	r6, [sp, #24]
 800b410:	9307      	str	r3, [sp, #28]
 800b412:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b416:	4d57      	ldr	r5, [pc, #348]	@ (800b574 <_strtod_l+0xaf4>)
 800b418:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b41c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b41e:	401d      	ands	r5, r3
 800b420:	4b58      	ldr	r3, [pc, #352]	@ (800b584 <_strtod_l+0xb04>)
 800b422:	429d      	cmp	r5, r3
 800b424:	f040 80b2 	bne.w	800b58c <_strtod_l+0xb0c>
 800b428:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b42a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b42e:	ec4b ab10 	vmov	d0, sl, fp
 800b432:	f7ff f9c9 	bl	800a7c8 <__ulp>
 800b436:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b43a:	ec51 0b10 	vmov	r0, r1, d0
 800b43e:	f7f5 f8e3 	bl	8000608 <__aeabi_dmul>
 800b442:	4652      	mov	r2, sl
 800b444:	465b      	mov	r3, fp
 800b446:	f7f4 ff29 	bl	800029c <__adddf3>
 800b44a:	460b      	mov	r3, r1
 800b44c:	4949      	ldr	r1, [pc, #292]	@ (800b574 <_strtod_l+0xaf4>)
 800b44e:	4a4e      	ldr	r2, [pc, #312]	@ (800b588 <_strtod_l+0xb08>)
 800b450:	4019      	ands	r1, r3
 800b452:	4291      	cmp	r1, r2
 800b454:	4682      	mov	sl, r0
 800b456:	d942      	bls.n	800b4de <_strtod_l+0xa5e>
 800b458:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b45a:	4b47      	ldr	r3, [pc, #284]	@ (800b578 <_strtod_l+0xaf8>)
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d103      	bne.n	800b468 <_strtod_l+0x9e8>
 800b460:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b462:	3301      	adds	r3, #1
 800b464:	f43f ad2f 	beq.w	800aec6 <_strtod_l+0x446>
 800b468:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b578 <_strtod_l+0xaf8>
 800b46c:	f04f 3aff 	mov.w	sl, #4294967295
 800b470:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b472:	9805      	ldr	r0, [sp, #20]
 800b474:	f7fe fe7c 	bl	800a170 <_Bfree>
 800b478:	9805      	ldr	r0, [sp, #20]
 800b47a:	4649      	mov	r1, r9
 800b47c:	f7fe fe78 	bl	800a170 <_Bfree>
 800b480:	9805      	ldr	r0, [sp, #20]
 800b482:	4641      	mov	r1, r8
 800b484:	f7fe fe74 	bl	800a170 <_Bfree>
 800b488:	9805      	ldr	r0, [sp, #20]
 800b48a:	4621      	mov	r1, r4
 800b48c:	f7fe fe70 	bl	800a170 <_Bfree>
 800b490:	e619      	b.n	800b0c6 <_strtod_l+0x646>
 800b492:	f1ba 0f01 	cmp.w	sl, #1
 800b496:	d103      	bne.n	800b4a0 <_strtod_l+0xa20>
 800b498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f43f ada6 	beq.w	800afec <_strtod_l+0x56c>
 800b4a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b550 <_strtod_l+0xad0>
 800b4a4:	4f35      	ldr	r7, [pc, #212]	@ (800b57c <_strtod_l+0xafc>)
 800b4a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4aa:	2600      	movs	r6, #0
 800b4ac:	e7b1      	b.n	800b412 <_strtod_l+0x992>
 800b4ae:	4f34      	ldr	r7, [pc, #208]	@ (800b580 <_strtod_l+0xb00>)
 800b4b0:	2600      	movs	r6, #0
 800b4b2:	e7aa      	b.n	800b40a <_strtod_l+0x98a>
 800b4b4:	4b32      	ldr	r3, [pc, #200]	@ (800b580 <_strtod_l+0xb00>)
 800b4b6:	4630      	mov	r0, r6
 800b4b8:	4639      	mov	r1, r7
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f7f5 f8a4 	bl	8000608 <__aeabi_dmul>
 800b4c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	460f      	mov	r7, r1
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d09f      	beq.n	800b40a <_strtod_l+0x98a>
 800b4ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b4ce:	e7a0      	b.n	800b412 <_strtod_l+0x992>
 800b4d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b558 <_strtod_l+0xad8>
 800b4d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4d8:	ec57 6b17 	vmov	r6, r7, d7
 800b4dc:	e799      	b.n	800b412 <_strtod_l+0x992>
 800b4de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b4e2:	9b08      	ldr	r3, [sp, #32]
 800b4e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1c1      	bne.n	800b470 <_strtod_l+0x9f0>
 800b4ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4f0:	0d1b      	lsrs	r3, r3, #20
 800b4f2:	051b      	lsls	r3, r3, #20
 800b4f4:	429d      	cmp	r5, r3
 800b4f6:	d1bb      	bne.n	800b470 <_strtod_l+0x9f0>
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	4639      	mov	r1, r7
 800b4fc:	f7f5 fbe4 	bl	8000cc8 <__aeabi_d2lz>
 800b500:	f7f5 f854 	bl	80005ac <__aeabi_l2d>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f4 fec4 	bl	8000298 <__aeabi_dsub>
 800b510:	460b      	mov	r3, r1
 800b512:	4602      	mov	r2, r0
 800b514:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b518:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b51c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b51e:	ea46 060a 	orr.w	r6, r6, sl
 800b522:	431e      	orrs	r6, r3
 800b524:	d06f      	beq.n	800b606 <_strtod_l+0xb86>
 800b526:	a30e      	add	r3, pc, #56	@ (adr r3, 800b560 <_strtod_l+0xae0>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f7f5 fade 	bl	8000aec <__aeabi_dcmplt>
 800b530:	2800      	cmp	r0, #0
 800b532:	f47f acd3 	bne.w	800aedc <_strtod_l+0x45c>
 800b536:	a30c      	add	r3, pc, #48	@ (adr r3, 800b568 <_strtod_l+0xae8>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b540:	f7f5 faf2 	bl	8000b28 <__aeabi_dcmpgt>
 800b544:	2800      	cmp	r0, #0
 800b546:	d093      	beq.n	800b470 <_strtod_l+0x9f0>
 800b548:	e4c8      	b.n	800aedc <_strtod_l+0x45c>
 800b54a:	bf00      	nop
 800b54c:	f3af 8000 	nop.w
 800b550:	00000000 	.word	0x00000000
 800b554:	bff00000 	.word	0xbff00000
 800b558:	00000000 	.word	0x00000000
 800b55c:	3ff00000 	.word	0x3ff00000
 800b560:	94a03595 	.word	0x94a03595
 800b564:	3fdfffff 	.word	0x3fdfffff
 800b568:	35afe535 	.word	0x35afe535
 800b56c:	3fe00000 	.word	0x3fe00000
 800b570:	000fffff 	.word	0x000fffff
 800b574:	7ff00000 	.word	0x7ff00000
 800b578:	7fefffff 	.word	0x7fefffff
 800b57c:	3ff00000 	.word	0x3ff00000
 800b580:	3fe00000 	.word	0x3fe00000
 800b584:	7fe00000 	.word	0x7fe00000
 800b588:	7c9fffff 	.word	0x7c9fffff
 800b58c:	9b08      	ldr	r3, [sp, #32]
 800b58e:	b323      	cbz	r3, 800b5da <_strtod_l+0xb5a>
 800b590:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b594:	d821      	bhi.n	800b5da <_strtod_l+0xb5a>
 800b596:	a328      	add	r3, pc, #160	@ (adr r3, 800b638 <_strtod_l+0xbb8>)
 800b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59c:	4630      	mov	r0, r6
 800b59e:	4639      	mov	r1, r7
 800b5a0:	f7f5 faae 	bl	8000b00 <__aeabi_dcmple>
 800b5a4:	b1a0      	cbz	r0, 800b5d0 <_strtod_l+0xb50>
 800b5a6:	4639      	mov	r1, r7
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7f5 fb05 	bl	8000bb8 <__aeabi_d2uiz>
 800b5ae:	2801      	cmp	r0, #1
 800b5b0:	bf38      	it	cc
 800b5b2:	2001      	movcc	r0, #1
 800b5b4:	f7f4 ffae 	bl	8000514 <__aeabi_ui2d>
 800b5b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	460f      	mov	r7, r1
 800b5be:	b9fb      	cbnz	r3, 800b600 <_strtod_l+0xb80>
 800b5c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b5c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b5c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b5cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b5d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b5d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b5d6:	1b5b      	subs	r3, r3, r5
 800b5d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b5da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b5de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b5e2:	f7ff f8f1 	bl	800a7c8 <__ulp>
 800b5e6:	4650      	mov	r0, sl
 800b5e8:	ec53 2b10 	vmov	r2, r3, d0
 800b5ec:	4659      	mov	r1, fp
 800b5ee:	f7f5 f80b 	bl	8000608 <__aeabi_dmul>
 800b5f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b5f6:	f7f4 fe51 	bl	800029c <__adddf3>
 800b5fa:	4682      	mov	sl, r0
 800b5fc:	468b      	mov	fp, r1
 800b5fe:	e770      	b.n	800b4e2 <_strtod_l+0xa62>
 800b600:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b604:	e7e0      	b.n	800b5c8 <_strtod_l+0xb48>
 800b606:	a30e      	add	r3, pc, #56	@ (adr r3, 800b640 <_strtod_l+0xbc0>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	f7f5 fa6e 	bl	8000aec <__aeabi_dcmplt>
 800b610:	e798      	b.n	800b544 <_strtod_l+0xac4>
 800b612:	2300      	movs	r3, #0
 800b614:	930e      	str	r3, [sp, #56]	@ 0x38
 800b616:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b61a:	6013      	str	r3, [r2, #0]
 800b61c:	f7ff ba6d 	b.w	800aafa <_strtod_l+0x7a>
 800b620:	2a65      	cmp	r2, #101	@ 0x65
 800b622:	f43f ab68 	beq.w	800acf6 <_strtod_l+0x276>
 800b626:	2a45      	cmp	r2, #69	@ 0x45
 800b628:	f43f ab65 	beq.w	800acf6 <_strtod_l+0x276>
 800b62c:	2301      	movs	r3, #1
 800b62e:	f7ff bba0 	b.w	800ad72 <_strtod_l+0x2f2>
 800b632:	bf00      	nop
 800b634:	f3af 8000 	nop.w
 800b638:	ffc00000 	.word	0xffc00000
 800b63c:	41dfffff 	.word	0x41dfffff
 800b640:	94a03595 	.word	0x94a03595
 800b644:	3fcfffff 	.word	0x3fcfffff

0800b648 <_strtod_r>:
 800b648:	4b01      	ldr	r3, [pc, #4]	@ (800b650 <_strtod_r+0x8>)
 800b64a:	f7ff ba19 	b.w	800aa80 <_strtod_l>
 800b64e:	bf00      	nop
 800b650:	20000074 	.word	0x20000074

0800b654 <_strtol_l.isra.0>:
 800b654:	2b24      	cmp	r3, #36	@ 0x24
 800b656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b65a:	4686      	mov	lr, r0
 800b65c:	4690      	mov	r8, r2
 800b65e:	d801      	bhi.n	800b664 <_strtol_l.isra.0+0x10>
 800b660:	2b01      	cmp	r3, #1
 800b662:	d106      	bne.n	800b672 <_strtol_l.isra.0+0x1e>
 800b664:	f7fd fdaa 	bl	80091bc <__errno>
 800b668:	2316      	movs	r3, #22
 800b66a:	6003      	str	r3, [r0, #0]
 800b66c:	2000      	movs	r0, #0
 800b66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b672:	4834      	ldr	r0, [pc, #208]	@ (800b744 <_strtol_l.isra.0+0xf0>)
 800b674:	460d      	mov	r5, r1
 800b676:	462a      	mov	r2, r5
 800b678:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b67c:	5d06      	ldrb	r6, [r0, r4]
 800b67e:	f016 0608 	ands.w	r6, r6, #8
 800b682:	d1f8      	bne.n	800b676 <_strtol_l.isra.0+0x22>
 800b684:	2c2d      	cmp	r4, #45	@ 0x2d
 800b686:	d110      	bne.n	800b6aa <_strtol_l.isra.0+0x56>
 800b688:	782c      	ldrb	r4, [r5, #0]
 800b68a:	2601      	movs	r6, #1
 800b68c:	1c95      	adds	r5, r2, #2
 800b68e:	f033 0210 	bics.w	r2, r3, #16
 800b692:	d115      	bne.n	800b6c0 <_strtol_l.isra.0+0x6c>
 800b694:	2c30      	cmp	r4, #48	@ 0x30
 800b696:	d10d      	bne.n	800b6b4 <_strtol_l.isra.0+0x60>
 800b698:	782a      	ldrb	r2, [r5, #0]
 800b69a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b69e:	2a58      	cmp	r2, #88	@ 0x58
 800b6a0:	d108      	bne.n	800b6b4 <_strtol_l.isra.0+0x60>
 800b6a2:	786c      	ldrb	r4, [r5, #1]
 800b6a4:	3502      	adds	r5, #2
 800b6a6:	2310      	movs	r3, #16
 800b6a8:	e00a      	b.n	800b6c0 <_strtol_l.isra.0+0x6c>
 800b6aa:	2c2b      	cmp	r4, #43	@ 0x2b
 800b6ac:	bf04      	itt	eq
 800b6ae:	782c      	ldrbeq	r4, [r5, #0]
 800b6b0:	1c95      	addeq	r5, r2, #2
 800b6b2:	e7ec      	b.n	800b68e <_strtol_l.isra.0+0x3a>
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d1f6      	bne.n	800b6a6 <_strtol_l.isra.0+0x52>
 800b6b8:	2c30      	cmp	r4, #48	@ 0x30
 800b6ba:	bf14      	ite	ne
 800b6bc:	230a      	movne	r3, #10
 800b6be:	2308      	moveq	r3, #8
 800b6c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b6c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	fbbc f9f3 	udiv	r9, ip, r3
 800b6ce:	4610      	mov	r0, r2
 800b6d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b6d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b6d8:	2f09      	cmp	r7, #9
 800b6da:	d80f      	bhi.n	800b6fc <_strtol_l.isra.0+0xa8>
 800b6dc:	463c      	mov	r4, r7
 800b6de:	42a3      	cmp	r3, r4
 800b6e0:	dd1b      	ble.n	800b71a <_strtol_l.isra.0+0xc6>
 800b6e2:	1c57      	adds	r7, r2, #1
 800b6e4:	d007      	beq.n	800b6f6 <_strtol_l.isra.0+0xa2>
 800b6e6:	4581      	cmp	r9, r0
 800b6e8:	d314      	bcc.n	800b714 <_strtol_l.isra.0+0xc0>
 800b6ea:	d101      	bne.n	800b6f0 <_strtol_l.isra.0+0x9c>
 800b6ec:	45a2      	cmp	sl, r4
 800b6ee:	db11      	blt.n	800b714 <_strtol_l.isra.0+0xc0>
 800b6f0:	fb00 4003 	mla	r0, r0, r3, r4
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6fa:	e7eb      	b.n	800b6d4 <_strtol_l.isra.0+0x80>
 800b6fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b700:	2f19      	cmp	r7, #25
 800b702:	d801      	bhi.n	800b708 <_strtol_l.isra.0+0xb4>
 800b704:	3c37      	subs	r4, #55	@ 0x37
 800b706:	e7ea      	b.n	800b6de <_strtol_l.isra.0+0x8a>
 800b708:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b70c:	2f19      	cmp	r7, #25
 800b70e:	d804      	bhi.n	800b71a <_strtol_l.isra.0+0xc6>
 800b710:	3c57      	subs	r4, #87	@ 0x57
 800b712:	e7e4      	b.n	800b6de <_strtol_l.isra.0+0x8a>
 800b714:	f04f 32ff 	mov.w	r2, #4294967295
 800b718:	e7ed      	b.n	800b6f6 <_strtol_l.isra.0+0xa2>
 800b71a:	1c53      	adds	r3, r2, #1
 800b71c:	d108      	bne.n	800b730 <_strtol_l.isra.0+0xdc>
 800b71e:	2322      	movs	r3, #34	@ 0x22
 800b720:	f8ce 3000 	str.w	r3, [lr]
 800b724:	4660      	mov	r0, ip
 800b726:	f1b8 0f00 	cmp.w	r8, #0
 800b72a:	d0a0      	beq.n	800b66e <_strtol_l.isra.0+0x1a>
 800b72c:	1e69      	subs	r1, r5, #1
 800b72e:	e006      	b.n	800b73e <_strtol_l.isra.0+0xea>
 800b730:	b106      	cbz	r6, 800b734 <_strtol_l.isra.0+0xe0>
 800b732:	4240      	negs	r0, r0
 800b734:	f1b8 0f00 	cmp.w	r8, #0
 800b738:	d099      	beq.n	800b66e <_strtol_l.isra.0+0x1a>
 800b73a:	2a00      	cmp	r2, #0
 800b73c:	d1f6      	bne.n	800b72c <_strtol_l.isra.0+0xd8>
 800b73e:	f8c8 1000 	str.w	r1, [r8]
 800b742:	e794      	b.n	800b66e <_strtol_l.isra.0+0x1a>
 800b744:	0800cd19 	.word	0x0800cd19

0800b748 <_strtol_r>:
 800b748:	f7ff bf84 	b.w	800b654 <_strtol_l.isra.0>

0800b74c <__ssputs_r>:
 800b74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b750:	688e      	ldr	r6, [r1, #8]
 800b752:	461f      	mov	r7, r3
 800b754:	42be      	cmp	r6, r7
 800b756:	680b      	ldr	r3, [r1, #0]
 800b758:	4682      	mov	sl, r0
 800b75a:	460c      	mov	r4, r1
 800b75c:	4690      	mov	r8, r2
 800b75e:	d82d      	bhi.n	800b7bc <__ssputs_r+0x70>
 800b760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b764:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b768:	d026      	beq.n	800b7b8 <__ssputs_r+0x6c>
 800b76a:	6965      	ldr	r5, [r4, #20]
 800b76c:	6909      	ldr	r1, [r1, #16]
 800b76e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b772:	eba3 0901 	sub.w	r9, r3, r1
 800b776:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b77a:	1c7b      	adds	r3, r7, #1
 800b77c:	444b      	add	r3, r9
 800b77e:	106d      	asrs	r5, r5, #1
 800b780:	429d      	cmp	r5, r3
 800b782:	bf38      	it	cc
 800b784:	461d      	movcc	r5, r3
 800b786:	0553      	lsls	r3, r2, #21
 800b788:	d527      	bpl.n	800b7da <__ssputs_r+0x8e>
 800b78a:	4629      	mov	r1, r5
 800b78c:	f7fe fc24 	bl	8009fd8 <_malloc_r>
 800b790:	4606      	mov	r6, r0
 800b792:	b360      	cbz	r0, 800b7ee <__ssputs_r+0xa2>
 800b794:	6921      	ldr	r1, [r4, #16]
 800b796:	464a      	mov	r2, r9
 800b798:	f7fd fd3d 	bl	8009216 <memcpy>
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7a6:	81a3      	strh	r3, [r4, #12]
 800b7a8:	6126      	str	r6, [r4, #16]
 800b7aa:	6165      	str	r5, [r4, #20]
 800b7ac:	444e      	add	r6, r9
 800b7ae:	eba5 0509 	sub.w	r5, r5, r9
 800b7b2:	6026      	str	r6, [r4, #0]
 800b7b4:	60a5      	str	r5, [r4, #8]
 800b7b6:	463e      	mov	r6, r7
 800b7b8:	42be      	cmp	r6, r7
 800b7ba:	d900      	bls.n	800b7be <__ssputs_r+0x72>
 800b7bc:	463e      	mov	r6, r7
 800b7be:	6820      	ldr	r0, [r4, #0]
 800b7c0:	4632      	mov	r2, r6
 800b7c2:	4641      	mov	r1, r8
 800b7c4:	f000 f9c6 	bl	800bb54 <memmove>
 800b7c8:	68a3      	ldr	r3, [r4, #8]
 800b7ca:	1b9b      	subs	r3, r3, r6
 800b7cc:	60a3      	str	r3, [r4, #8]
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	4433      	add	r3, r6
 800b7d2:	6023      	str	r3, [r4, #0]
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7da:	462a      	mov	r2, r5
 800b7dc:	f000 fd7d 	bl	800c2da <_realloc_r>
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d1e0      	bne.n	800b7a8 <__ssputs_r+0x5c>
 800b7e6:	6921      	ldr	r1, [r4, #16]
 800b7e8:	4650      	mov	r0, sl
 800b7ea:	f7fe fb81 	bl	8009ef0 <_free_r>
 800b7ee:	230c      	movs	r3, #12
 800b7f0:	f8ca 3000 	str.w	r3, [sl]
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7fa:	81a3      	strh	r3, [r4, #12]
 800b7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b800:	e7e9      	b.n	800b7d6 <__ssputs_r+0x8a>
	...

0800b804 <_svfiprintf_r>:
 800b804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b808:	4698      	mov	r8, r3
 800b80a:	898b      	ldrh	r3, [r1, #12]
 800b80c:	061b      	lsls	r3, r3, #24
 800b80e:	b09d      	sub	sp, #116	@ 0x74
 800b810:	4607      	mov	r7, r0
 800b812:	460d      	mov	r5, r1
 800b814:	4614      	mov	r4, r2
 800b816:	d510      	bpl.n	800b83a <_svfiprintf_r+0x36>
 800b818:	690b      	ldr	r3, [r1, #16]
 800b81a:	b973      	cbnz	r3, 800b83a <_svfiprintf_r+0x36>
 800b81c:	2140      	movs	r1, #64	@ 0x40
 800b81e:	f7fe fbdb 	bl	8009fd8 <_malloc_r>
 800b822:	6028      	str	r0, [r5, #0]
 800b824:	6128      	str	r0, [r5, #16]
 800b826:	b930      	cbnz	r0, 800b836 <_svfiprintf_r+0x32>
 800b828:	230c      	movs	r3, #12
 800b82a:	603b      	str	r3, [r7, #0]
 800b82c:	f04f 30ff 	mov.w	r0, #4294967295
 800b830:	b01d      	add	sp, #116	@ 0x74
 800b832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b836:	2340      	movs	r3, #64	@ 0x40
 800b838:	616b      	str	r3, [r5, #20]
 800b83a:	2300      	movs	r3, #0
 800b83c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b83e:	2320      	movs	r3, #32
 800b840:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b844:	f8cd 800c 	str.w	r8, [sp, #12]
 800b848:	2330      	movs	r3, #48	@ 0x30
 800b84a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9e8 <_svfiprintf_r+0x1e4>
 800b84e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b852:	f04f 0901 	mov.w	r9, #1
 800b856:	4623      	mov	r3, r4
 800b858:	469a      	mov	sl, r3
 800b85a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b85e:	b10a      	cbz	r2, 800b864 <_svfiprintf_r+0x60>
 800b860:	2a25      	cmp	r2, #37	@ 0x25
 800b862:	d1f9      	bne.n	800b858 <_svfiprintf_r+0x54>
 800b864:	ebba 0b04 	subs.w	fp, sl, r4
 800b868:	d00b      	beq.n	800b882 <_svfiprintf_r+0x7e>
 800b86a:	465b      	mov	r3, fp
 800b86c:	4622      	mov	r2, r4
 800b86e:	4629      	mov	r1, r5
 800b870:	4638      	mov	r0, r7
 800b872:	f7ff ff6b 	bl	800b74c <__ssputs_r>
 800b876:	3001      	adds	r0, #1
 800b878:	f000 80a7 	beq.w	800b9ca <_svfiprintf_r+0x1c6>
 800b87c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b87e:	445a      	add	r2, fp
 800b880:	9209      	str	r2, [sp, #36]	@ 0x24
 800b882:	f89a 3000 	ldrb.w	r3, [sl]
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 809f 	beq.w	800b9ca <_svfiprintf_r+0x1c6>
 800b88c:	2300      	movs	r3, #0
 800b88e:	f04f 32ff 	mov.w	r2, #4294967295
 800b892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b896:	f10a 0a01 	add.w	sl, sl, #1
 800b89a:	9304      	str	r3, [sp, #16]
 800b89c:	9307      	str	r3, [sp, #28]
 800b89e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8a4:	4654      	mov	r4, sl
 800b8a6:	2205      	movs	r2, #5
 800b8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ac:	484e      	ldr	r0, [pc, #312]	@ (800b9e8 <_svfiprintf_r+0x1e4>)
 800b8ae:	f7f4 fc97 	bl	80001e0 <memchr>
 800b8b2:	9a04      	ldr	r2, [sp, #16]
 800b8b4:	b9d8      	cbnz	r0, 800b8ee <_svfiprintf_r+0xea>
 800b8b6:	06d0      	lsls	r0, r2, #27
 800b8b8:	bf44      	itt	mi
 800b8ba:	2320      	movmi	r3, #32
 800b8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8c0:	0711      	lsls	r1, r2, #28
 800b8c2:	bf44      	itt	mi
 800b8c4:	232b      	movmi	r3, #43	@ 0x2b
 800b8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8d0:	d015      	beq.n	800b8fe <_svfiprintf_r+0xfa>
 800b8d2:	9a07      	ldr	r2, [sp, #28]
 800b8d4:	4654      	mov	r4, sl
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	f04f 0c0a 	mov.w	ip, #10
 800b8dc:	4621      	mov	r1, r4
 800b8de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8e2:	3b30      	subs	r3, #48	@ 0x30
 800b8e4:	2b09      	cmp	r3, #9
 800b8e6:	d94b      	bls.n	800b980 <_svfiprintf_r+0x17c>
 800b8e8:	b1b0      	cbz	r0, 800b918 <_svfiprintf_r+0x114>
 800b8ea:	9207      	str	r2, [sp, #28]
 800b8ec:	e014      	b.n	800b918 <_svfiprintf_r+0x114>
 800b8ee:	eba0 0308 	sub.w	r3, r0, r8
 800b8f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	9304      	str	r3, [sp, #16]
 800b8fa:	46a2      	mov	sl, r4
 800b8fc:	e7d2      	b.n	800b8a4 <_svfiprintf_r+0xa0>
 800b8fe:	9b03      	ldr	r3, [sp, #12]
 800b900:	1d19      	adds	r1, r3, #4
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	9103      	str	r1, [sp, #12]
 800b906:	2b00      	cmp	r3, #0
 800b908:	bfbb      	ittet	lt
 800b90a:	425b      	neglt	r3, r3
 800b90c:	f042 0202 	orrlt.w	r2, r2, #2
 800b910:	9307      	strge	r3, [sp, #28]
 800b912:	9307      	strlt	r3, [sp, #28]
 800b914:	bfb8      	it	lt
 800b916:	9204      	strlt	r2, [sp, #16]
 800b918:	7823      	ldrb	r3, [r4, #0]
 800b91a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b91c:	d10a      	bne.n	800b934 <_svfiprintf_r+0x130>
 800b91e:	7863      	ldrb	r3, [r4, #1]
 800b920:	2b2a      	cmp	r3, #42	@ 0x2a
 800b922:	d132      	bne.n	800b98a <_svfiprintf_r+0x186>
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	1d1a      	adds	r2, r3, #4
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	9203      	str	r2, [sp, #12]
 800b92c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b930:	3402      	adds	r4, #2
 800b932:	9305      	str	r3, [sp, #20]
 800b934:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b9f8 <_svfiprintf_r+0x1f4>
 800b938:	7821      	ldrb	r1, [r4, #0]
 800b93a:	2203      	movs	r2, #3
 800b93c:	4650      	mov	r0, sl
 800b93e:	f7f4 fc4f 	bl	80001e0 <memchr>
 800b942:	b138      	cbz	r0, 800b954 <_svfiprintf_r+0x150>
 800b944:	9b04      	ldr	r3, [sp, #16]
 800b946:	eba0 000a 	sub.w	r0, r0, sl
 800b94a:	2240      	movs	r2, #64	@ 0x40
 800b94c:	4082      	lsls	r2, r0
 800b94e:	4313      	orrs	r3, r2
 800b950:	3401      	adds	r4, #1
 800b952:	9304      	str	r3, [sp, #16]
 800b954:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b958:	4824      	ldr	r0, [pc, #144]	@ (800b9ec <_svfiprintf_r+0x1e8>)
 800b95a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b95e:	2206      	movs	r2, #6
 800b960:	f7f4 fc3e 	bl	80001e0 <memchr>
 800b964:	2800      	cmp	r0, #0
 800b966:	d036      	beq.n	800b9d6 <_svfiprintf_r+0x1d2>
 800b968:	4b21      	ldr	r3, [pc, #132]	@ (800b9f0 <_svfiprintf_r+0x1ec>)
 800b96a:	bb1b      	cbnz	r3, 800b9b4 <_svfiprintf_r+0x1b0>
 800b96c:	9b03      	ldr	r3, [sp, #12]
 800b96e:	3307      	adds	r3, #7
 800b970:	f023 0307 	bic.w	r3, r3, #7
 800b974:	3308      	adds	r3, #8
 800b976:	9303      	str	r3, [sp, #12]
 800b978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b97a:	4433      	add	r3, r6
 800b97c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b97e:	e76a      	b.n	800b856 <_svfiprintf_r+0x52>
 800b980:	fb0c 3202 	mla	r2, ip, r2, r3
 800b984:	460c      	mov	r4, r1
 800b986:	2001      	movs	r0, #1
 800b988:	e7a8      	b.n	800b8dc <_svfiprintf_r+0xd8>
 800b98a:	2300      	movs	r3, #0
 800b98c:	3401      	adds	r4, #1
 800b98e:	9305      	str	r3, [sp, #20]
 800b990:	4619      	mov	r1, r3
 800b992:	f04f 0c0a 	mov.w	ip, #10
 800b996:	4620      	mov	r0, r4
 800b998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b99c:	3a30      	subs	r2, #48	@ 0x30
 800b99e:	2a09      	cmp	r2, #9
 800b9a0:	d903      	bls.n	800b9aa <_svfiprintf_r+0x1a6>
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d0c6      	beq.n	800b934 <_svfiprintf_r+0x130>
 800b9a6:	9105      	str	r1, [sp, #20]
 800b9a8:	e7c4      	b.n	800b934 <_svfiprintf_r+0x130>
 800b9aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e7f0      	b.n	800b996 <_svfiprintf_r+0x192>
 800b9b4:	ab03      	add	r3, sp, #12
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	462a      	mov	r2, r5
 800b9ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b9f4 <_svfiprintf_r+0x1f0>)
 800b9bc:	a904      	add	r1, sp, #16
 800b9be:	4638      	mov	r0, r7
 800b9c0:	f7fc fc88 	bl	80082d4 <_printf_float>
 800b9c4:	1c42      	adds	r2, r0, #1
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	d1d6      	bne.n	800b978 <_svfiprintf_r+0x174>
 800b9ca:	89ab      	ldrh	r3, [r5, #12]
 800b9cc:	065b      	lsls	r3, r3, #25
 800b9ce:	f53f af2d 	bmi.w	800b82c <_svfiprintf_r+0x28>
 800b9d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9d4:	e72c      	b.n	800b830 <_svfiprintf_r+0x2c>
 800b9d6:	ab03      	add	r3, sp, #12
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	462a      	mov	r2, r5
 800b9dc:	4b05      	ldr	r3, [pc, #20]	@ (800b9f4 <_svfiprintf_r+0x1f0>)
 800b9de:	a904      	add	r1, sp, #16
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	f7fc ff0f 	bl	8008804 <_printf_i>
 800b9e6:	e7ed      	b.n	800b9c4 <_svfiprintf_r+0x1c0>
 800b9e8:	0800cb11 	.word	0x0800cb11
 800b9ec:	0800cb1b 	.word	0x0800cb1b
 800b9f0:	080082d5 	.word	0x080082d5
 800b9f4:	0800b74d 	.word	0x0800b74d
 800b9f8:	0800cb17 	.word	0x0800cb17

0800b9fc <__sflush_r>:
 800b9fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba04:	0716      	lsls	r6, r2, #28
 800ba06:	4605      	mov	r5, r0
 800ba08:	460c      	mov	r4, r1
 800ba0a:	d454      	bmi.n	800bab6 <__sflush_r+0xba>
 800ba0c:	684b      	ldr	r3, [r1, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	dc02      	bgt.n	800ba18 <__sflush_r+0x1c>
 800ba12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	dd48      	ble.n	800baaa <__sflush_r+0xae>
 800ba18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba1a:	2e00      	cmp	r6, #0
 800ba1c:	d045      	beq.n	800baaa <__sflush_r+0xae>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ba24:	682f      	ldr	r7, [r5, #0]
 800ba26:	6a21      	ldr	r1, [r4, #32]
 800ba28:	602b      	str	r3, [r5, #0]
 800ba2a:	d030      	beq.n	800ba8e <__sflush_r+0x92>
 800ba2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ba2e:	89a3      	ldrh	r3, [r4, #12]
 800ba30:	0759      	lsls	r1, r3, #29
 800ba32:	d505      	bpl.n	800ba40 <__sflush_r+0x44>
 800ba34:	6863      	ldr	r3, [r4, #4]
 800ba36:	1ad2      	subs	r2, r2, r3
 800ba38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ba3a:	b10b      	cbz	r3, 800ba40 <__sflush_r+0x44>
 800ba3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ba3e:	1ad2      	subs	r2, r2, r3
 800ba40:	2300      	movs	r3, #0
 800ba42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba44:	6a21      	ldr	r1, [r4, #32]
 800ba46:	4628      	mov	r0, r5
 800ba48:	47b0      	blx	r6
 800ba4a:	1c43      	adds	r3, r0, #1
 800ba4c:	89a3      	ldrh	r3, [r4, #12]
 800ba4e:	d106      	bne.n	800ba5e <__sflush_r+0x62>
 800ba50:	6829      	ldr	r1, [r5, #0]
 800ba52:	291d      	cmp	r1, #29
 800ba54:	d82b      	bhi.n	800baae <__sflush_r+0xb2>
 800ba56:	4a2a      	ldr	r2, [pc, #168]	@ (800bb00 <__sflush_r+0x104>)
 800ba58:	40ca      	lsrs	r2, r1
 800ba5a:	07d6      	lsls	r6, r2, #31
 800ba5c:	d527      	bpl.n	800baae <__sflush_r+0xb2>
 800ba5e:	2200      	movs	r2, #0
 800ba60:	6062      	str	r2, [r4, #4]
 800ba62:	04d9      	lsls	r1, r3, #19
 800ba64:	6922      	ldr	r2, [r4, #16]
 800ba66:	6022      	str	r2, [r4, #0]
 800ba68:	d504      	bpl.n	800ba74 <__sflush_r+0x78>
 800ba6a:	1c42      	adds	r2, r0, #1
 800ba6c:	d101      	bne.n	800ba72 <__sflush_r+0x76>
 800ba6e:	682b      	ldr	r3, [r5, #0]
 800ba70:	b903      	cbnz	r3, 800ba74 <__sflush_r+0x78>
 800ba72:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba76:	602f      	str	r7, [r5, #0]
 800ba78:	b1b9      	cbz	r1, 800baaa <__sflush_r+0xae>
 800ba7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba7e:	4299      	cmp	r1, r3
 800ba80:	d002      	beq.n	800ba88 <__sflush_r+0x8c>
 800ba82:	4628      	mov	r0, r5
 800ba84:	f7fe fa34 	bl	8009ef0 <_free_r>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba8c:	e00d      	b.n	800baaa <__sflush_r+0xae>
 800ba8e:	2301      	movs	r3, #1
 800ba90:	4628      	mov	r0, r5
 800ba92:	47b0      	blx	r6
 800ba94:	4602      	mov	r2, r0
 800ba96:	1c50      	adds	r0, r2, #1
 800ba98:	d1c9      	bne.n	800ba2e <__sflush_r+0x32>
 800ba9a:	682b      	ldr	r3, [r5, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d0c6      	beq.n	800ba2e <__sflush_r+0x32>
 800baa0:	2b1d      	cmp	r3, #29
 800baa2:	d001      	beq.n	800baa8 <__sflush_r+0xac>
 800baa4:	2b16      	cmp	r3, #22
 800baa6:	d11e      	bne.n	800bae6 <__sflush_r+0xea>
 800baa8:	602f      	str	r7, [r5, #0]
 800baaa:	2000      	movs	r0, #0
 800baac:	e022      	b.n	800baf4 <__sflush_r+0xf8>
 800baae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bab2:	b21b      	sxth	r3, r3
 800bab4:	e01b      	b.n	800baee <__sflush_r+0xf2>
 800bab6:	690f      	ldr	r7, [r1, #16]
 800bab8:	2f00      	cmp	r7, #0
 800baba:	d0f6      	beq.n	800baaa <__sflush_r+0xae>
 800babc:	0793      	lsls	r3, r2, #30
 800babe:	680e      	ldr	r6, [r1, #0]
 800bac0:	bf08      	it	eq
 800bac2:	694b      	ldreq	r3, [r1, #20]
 800bac4:	600f      	str	r7, [r1, #0]
 800bac6:	bf18      	it	ne
 800bac8:	2300      	movne	r3, #0
 800baca:	eba6 0807 	sub.w	r8, r6, r7
 800bace:	608b      	str	r3, [r1, #8]
 800bad0:	f1b8 0f00 	cmp.w	r8, #0
 800bad4:	dde9      	ble.n	800baaa <__sflush_r+0xae>
 800bad6:	6a21      	ldr	r1, [r4, #32]
 800bad8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bada:	4643      	mov	r3, r8
 800badc:	463a      	mov	r2, r7
 800bade:	4628      	mov	r0, r5
 800bae0:	47b0      	blx	r6
 800bae2:	2800      	cmp	r0, #0
 800bae4:	dc08      	bgt.n	800baf8 <__sflush_r+0xfc>
 800bae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baee:	81a3      	strh	r3, [r4, #12]
 800baf0:	f04f 30ff 	mov.w	r0, #4294967295
 800baf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf8:	4407      	add	r7, r0
 800bafa:	eba8 0800 	sub.w	r8, r8, r0
 800bafe:	e7e7      	b.n	800bad0 <__sflush_r+0xd4>
 800bb00:	20400001 	.word	0x20400001

0800bb04 <_fflush_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	690b      	ldr	r3, [r1, #16]
 800bb08:	4605      	mov	r5, r0
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	b913      	cbnz	r3, 800bb14 <_fflush_r+0x10>
 800bb0e:	2500      	movs	r5, #0
 800bb10:	4628      	mov	r0, r5
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
 800bb14:	b118      	cbz	r0, 800bb1e <_fflush_r+0x1a>
 800bb16:	6a03      	ldr	r3, [r0, #32]
 800bb18:	b90b      	cbnz	r3, 800bb1e <_fflush_r+0x1a>
 800bb1a:	f7fd fa2b 	bl	8008f74 <__sinit>
 800bb1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d0f3      	beq.n	800bb0e <_fflush_r+0xa>
 800bb26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bb28:	07d0      	lsls	r0, r2, #31
 800bb2a:	d404      	bmi.n	800bb36 <_fflush_r+0x32>
 800bb2c:	0599      	lsls	r1, r3, #22
 800bb2e:	d402      	bmi.n	800bb36 <_fflush_r+0x32>
 800bb30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb32:	f7fd fb6e 	bl	8009212 <__retarget_lock_acquire_recursive>
 800bb36:	4628      	mov	r0, r5
 800bb38:	4621      	mov	r1, r4
 800bb3a:	f7ff ff5f 	bl	800b9fc <__sflush_r>
 800bb3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb40:	07da      	lsls	r2, r3, #31
 800bb42:	4605      	mov	r5, r0
 800bb44:	d4e4      	bmi.n	800bb10 <_fflush_r+0xc>
 800bb46:	89a3      	ldrh	r3, [r4, #12]
 800bb48:	059b      	lsls	r3, r3, #22
 800bb4a:	d4e1      	bmi.n	800bb10 <_fflush_r+0xc>
 800bb4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb4e:	f7fd fb61 	bl	8009214 <__retarget_lock_release_recursive>
 800bb52:	e7dd      	b.n	800bb10 <_fflush_r+0xc>

0800bb54 <memmove>:
 800bb54:	4288      	cmp	r0, r1
 800bb56:	b510      	push	{r4, lr}
 800bb58:	eb01 0402 	add.w	r4, r1, r2
 800bb5c:	d902      	bls.n	800bb64 <memmove+0x10>
 800bb5e:	4284      	cmp	r4, r0
 800bb60:	4623      	mov	r3, r4
 800bb62:	d807      	bhi.n	800bb74 <memmove+0x20>
 800bb64:	1e43      	subs	r3, r0, #1
 800bb66:	42a1      	cmp	r1, r4
 800bb68:	d008      	beq.n	800bb7c <memmove+0x28>
 800bb6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb72:	e7f8      	b.n	800bb66 <memmove+0x12>
 800bb74:	4402      	add	r2, r0
 800bb76:	4601      	mov	r1, r0
 800bb78:	428a      	cmp	r2, r1
 800bb7a:	d100      	bne.n	800bb7e <memmove+0x2a>
 800bb7c:	bd10      	pop	{r4, pc}
 800bb7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb86:	e7f7      	b.n	800bb78 <memmove+0x24>

0800bb88 <strncmp>:
 800bb88:	b510      	push	{r4, lr}
 800bb8a:	b16a      	cbz	r2, 800bba8 <strncmp+0x20>
 800bb8c:	3901      	subs	r1, #1
 800bb8e:	1884      	adds	r4, r0, r2
 800bb90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d103      	bne.n	800bba4 <strncmp+0x1c>
 800bb9c:	42a0      	cmp	r0, r4
 800bb9e:	d001      	beq.n	800bba4 <strncmp+0x1c>
 800bba0:	2a00      	cmp	r2, #0
 800bba2:	d1f5      	bne.n	800bb90 <strncmp+0x8>
 800bba4:	1ad0      	subs	r0, r2, r3
 800bba6:	bd10      	pop	{r4, pc}
 800bba8:	4610      	mov	r0, r2
 800bbaa:	e7fc      	b.n	800bba6 <strncmp+0x1e>

0800bbac <_sbrk_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4d06      	ldr	r5, [pc, #24]	@ (800bbc8 <_sbrk_r+0x1c>)
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	4608      	mov	r0, r1
 800bbb6:	602b      	str	r3, [r5, #0]
 800bbb8:	f7f7 f8f0 	bl	8002d9c <_sbrk>
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	d102      	bne.n	800bbc6 <_sbrk_r+0x1a>
 800bbc0:	682b      	ldr	r3, [r5, #0]
 800bbc2:	b103      	cbz	r3, 800bbc6 <_sbrk_r+0x1a>
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	bd38      	pop	{r3, r4, r5, pc}
 800bbc8:	2000459c 	.word	0x2000459c
 800bbcc:	00000000 	.word	0x00000000

0800bbd0 <nan>:
 800bbd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bbd8 <nan+0x8>
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop
 800bbd8:	00000000 	.word	0x00000000
 800bbdc:	7ff80000 	.word	0x7ff80000

0800bbe0 <__assert_func>:
 800bbe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbe2:	4614      	mov	r4, r2
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	4b09      	ldr	r3, [pc, #36]	@ (800bc0c <__assert_func+0x2c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4605      	mov	r5, r0
 800bbec:	68d8      	ldr	r0, [r3, #12]
 800bbee:	b14c      	cbz	r4, 800bc04 <__assert_func+0x24>
 800bbf0:	4b07      	ldr	r3, [pc, #28]	@ (800bc10 <__assert_func+0x30>)
 800bbf2:	9100      	str	r1, [sp, #0]
 800bbf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbf8:	4906      	ldr	r1, [pc, #24]	@ (800bc14 <__assert_func+0x34>)
 800bbfa:	462b      	mov	r3, r5
 800bbfc:	f000 fba8 	bl	800c350 <fiprintf>
 800bc00:	f000 fbb8 	bl	800c374 <abort>
 800bc04:	4b04      	ldr	r3, [pc, #16]	@ (800bc18 <__assert_func+0x38>)
 800bc06:	461c      	mov	r4, r3
 800bc08:	e7f3      	b.n	800bbf2 <__assert_func+0x12>
 800bc0a:	bf00      	nop
 800bc0c:	20000024 	.word	0x20000024
 800bc10:	0800cb2a 	.word	0x0800cb2a
 800bc14:	0800cb37 	.word	0x0800cb37
 800bc18:	0800cb65 	.word	0x0800cb65

0800bc1c <_calloc_r>:
 800bc1c:	b570      	push	{r4, r5, r6, lr}
 800bc1e:	fba1 5402 	umull	r5, r4, r1, r2
 800bc22:	b934      	cbnz	r4, 800bc32 <_calloc_r+0x16>
 800bc24:	4629      	mov	r1, r5
 800bc26:	f7fe f9d7 	bl	8009fd8 <_malloc_r>
 800bc2a:	4606      	mov	r6, r0
 800bc2c:	b928      	cbnz	r0, 800bc3a <_calloc_r+0x1e>
 800bc2e:	4630      	mov	r0, r6
 800bc30:	bd70      	pop	{r4, r5, r6, pc}
 800bc32:	220c      	movs	r2, #12
 800bc34:	6002      	str	r2, [r0, #0]
 800bc36:	2600      	movs	r6, #0
 800bc38:	e7f9      	b.n	800bc2e <_calloc_r+0x12>
 800bc3a:	462a      	mov	r2, r5
 800bc3c:	4621      	mov	r1, r4
 800bc3e:	f7fd fa6a 	bl	8009116 <memset>
 800bc42:	e7f4      	b.n	800bc2e <_calloc_r+0x12>

0800bc44 <rshift>:
 800bc44:	6903      	ldr	r3, [r0, #16]
 800bc46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bc4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bc52:	f100 0414 	add.w	r4, r0, #20
 800bc56:	dd45      	ble.n	800bce4 <rshift+0xa0>
 800bc58:	f011 011f 	ands.w	r1, r1, #31
 800bc5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bc60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bc64:	d10c      	bne.n	800bc80 <rshift+0x3c>
 800bc66:	f100 0710 	add.w	r7, r0, #16
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	42b1      	cmp	r1, r6
 800bc6e:	d334      	bcc.n	800bcda <rshift+0x96>
 800bc70:	1a9b      	subs	r3, r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	1eea      	subs	r2, r5, #3
 800bc76:	4296      	cmp	r6, r2
 800bc78:	bf38      	it	cc
 800bc7a:	2300      	movcc	r3, #0
 800bc7c:	4423      	add	r3, r4
 800bc7e:	e015      	b.n	800bcac <rshift+0x68>
 800bc80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc84:	f1c1 0820 	rsb	r8, r1, #32
 800bc88:	40cf      	lsrs	r7, r1
 800bc8a:	f105 0e04 	add.w	lr, r5, #4
 800bc8e:	46a1      	mov	r9, r4
 800bc90:	4576      	cmp	r6, lr
 800bc92:	46f4      	mov	ip, lr
 800bc94:	d815      	bhi.n	800bcc2 <rshift+0x7e>
 800bc96:	1a9a      	subs	r2, r3, r2
 800bc98:	0092      	lsls	r2, r2, #2
 800bc9a:	3a04      	subs	r2, #4
 800bc9c:	3501      	adds	r5, #1
 800bc9e:	42ae      	cmp	r6, r5
 800bca0:	bf38      	it	cc
 800bca2:	2200      	movcc	r2, #0
 800bca4:	18a3      	adds	r3, r4, r2
 800bca6:	50a7      	str	r7, [r4, r2]
 800bca8:	b107      	cbz	r7, 800bcac <rshift+0x68>
 800bcaa:	3304      	adds	r3, #4
 800bcac:	1b1a      	subs	r2, r3, r4
 800bcae:	42a3      	cmp	r3, r4
 800bcb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bcb4:	bf08      	it	eq
 800bcb6:	2300      	moveq	r3, #0
 800bcb8:	6102      	str	r2, [r0, #16]
 800bcba:	bf08      	it	eq
 800bcbc:	6143      	streq	r3, [r0, #20]
 800bcbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcc2:	f8dc c000 	ldr.w	ip, [ip]
 800bcc6:	fa0c fc08 	lsl.w	ip, ip, r8
 800bcca:	ea4c 0707 	orr.w	r7, ip, r7
 800bcce:	f849 7b04 	str.w	r7, [r9], #4
 800bcd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bcd6:	40cf      	lsrs	r7, r1
 800bcd8:	e7da      	b.n	800bc90 <rshift+0x4c>
 800bcda:	f851 cb04 	ldr.w	ip, [r1], #4
 800bcde:	f847 cf04 	str.w	ip, [r7, #4]!
 800bce2:	e7c3      	b.n	800bc6c <rshift+0x28>
 800bce4:	4623      	mov	r3, r4
 800bce6:	e7e1      	b.n	800bcac <rshift+0x68>

0800bce8 <__hexdig_fun>:
 800bce8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bcec:	2b09      	cmp	r3, #9
 800bcee:	d802      	bhi.n	800bcf6 <__hexdig_fun+0xe>
 800bcf0:	3820      	subs	r0, #32
 800bcf2:	b2c0      	uxtb	r0, r0
 800bcf4:	4770      	bx	lr
 800bcf6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bcfa:	2b05      	cmp	r3, #5
 800bcfc:	d801      	bhi.n	800bd02 <__hexdig_fun+0x1a>
 800bcfe:	3847      	subs	r0, #71	@ 0x47
 800bd00:	e7f7      	b.n	800bcf2 <__hexdig_fun+0xa>
 800bd02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bd06:	2b05      	cmp	r3, #5
 800bd08:	d801      	bhi.n	800bd0e <__hexdig_fun+0x26>
 800bd0a:	3827      	subs	r0, #39	@ 0x27
 800bd0c:	e7f1      	b.n	800bcf2 <__hexdig_fun+0xa>
 800bd0e:	2000      	movs	r0, #0
 800bd10:	4770      	bx	lr
	...

0800bd14 <__gethex>:
 800bd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd18:	b085      	sub	sp, #20
 800bd1a:	468a      	mov	sl, r1
 800bd1c:	9302      	str	r3, [sp, #8]
 800bd1e:	680b      	ldr	r3, [r1, #0]
 800bd20:	9001      	str	r0, [sp, #4]
 800bd22:	4690      	mov	r8, r2
 800bd24:	1c9c      	adds	r4, r3, #2
 800bd26:	46a1      	mov	r9, r4
 800bd28:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bd2c:	2830      	cmp	r0, #48	@ 0x30
 800bd2e:	d0fa      	beq.n	800bd26 <__gethex+0x12>
 800bd30:	eba9 0303 	sub.w	r3, r9, r3
 800bd34:	f1a3 0b02 	sub.w	fp, r3, #2
 800bd38:	f7ff ffd6 	bl	800bce8 <__hexdig_fun>
 800bd3c:	4605      	mov	r5, r0
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d168      	bne.n	800be14 <__gethex+0x100>
 800bd42:	49a0      	ldr	r1, [pc, #640]	@ (800bfc4 <__gethex+0x2b0>)
 800bd44:	2201      	movs	r2, #1
 800bd46:	4648      	mov	r0, r9
 800bd48:	f7ff ff1e 	bl	800bb88 <strncmp>
 800bd4c:	4607      	mov	r7, r0
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d167      	bne.n	800be22 <__gethex+0x10e>
 800bd52:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bd56:	4626      	mov	r6, r4
 800bd58:	f7ff ffc6 	bl	800bce8 <__hexdig_fun>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d062      	beq.n	800be26 <__gethex+0x112>
 800bd60:	4623      	mov	r3, r4
 800bd62:	7818      	ldrb	r0, [r3, #0]
 800bd64:	2830      	cmp	r0, #48	@ 0x30
 800bd66:	4699      	mov	r9, r3
 800bd68:	f103 0301 	add.w	r3, r3, #1
 800bd6c:	d0f9      	beq.n	800bd62 <__gethex+0x4e>
 800bd6e:	f7ff ffbb 	bl	800bce8 <__hexdig_fun>
 800bd72:	fab0 f580 	clz	r5, r0
 800bd76:	096d      	lsrs	r5, r5, #5
 800bd78:	f04f 0b01 	mov.w	fp, #1
 800bd7c:	464a      	mov	r2, r9
 800bd7e:	4616      	mov	r6, r2
 800bd80:	3201      	adds	r2, #1
 800bd82:	7830      	ldrb	r0, [r6, #0]
 800bd84:	f7ff ffb0 	bl	800bce8 <__hexdig_fun>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d1f8      	bne.n	800bd7e <__gethex+0x6a>
 800bd8c:	498d      	ldr	r1, [pc, #564]	@ (800bfc4 <__gethex+0x2b0>)
 800bd8e:	2201      	movs	r2, #1
 800bd90:	4630      	mov	r0, r6
 800bd92:	f7ff fef9 	bl	800bb88 <strncmp>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d13f      	bne.n	800be1a <__gethex+0x106>
 800bd9a:	b944      	cbnz	r4, 800bdae <__gethex+0x9a>
 800bd9c:	1c74      	adds	r4, r6, #1
 800bd9e:	4622      	mov	r2, r4
 800bda0:	4616      	mov	r6, r2
 800bda2:	3201      	adds	r2, #1
 800bda4:	7830      	ldrb	r0, [r6, #0]
 800bda6:	f7ff ff9f 	bl	800bce8 <__hexdig_fun>
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d1f8      	bne.n	800bda0 <__gethex+0x8c>
 800bdae:	1ba4      	subs	r4, r4, r6
 800bdb0:	00a7      	lsls	r7, r4, #2
 800bdb2:	7833      	ldrb	r3, [r6, #0]
 800bdb4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bdb8:	2b50      	cmp	r3, #80	@ 0x50
 800bdba:	d13e      	bne.n	800be3a <__gethex+0x126>
 800bdbc:	7873      	ldrb	r3, [r6, #1]
 800bdbe:	2b2b      	cmp	r3, #43	@ 0x2b
 800bdc0:	d033      	beq.n	800be2a <__gethex+0x116>
 800bdc2:	2b2d      	cmp	r3, #45	@ 0x2d
 800bdc4:	d034      	beq.n	800be30 <__gethex+0x11c>
 800bdc6:	1c71      	adds	r1, r6, #1
 800bdc8:	2400      	movs	r4, #0
 800bdca:	7808      	ldrb	r0, [r1, #0]
 800bdcc:	f7ff ff8c 	bl	800bce8 <__hexdig_fun>
 800bdd0:	1e43      	subs	r3, r0, #1
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	2b18      	cmp	r3, #24
 800bdd6:	d830      	bhi.n	800be3a <__gethex+0x126>
 800bdd8:	f1a0 0210 	sub.w	r2, r0, #16
 800bddc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bde0:	f7ff ff82 	bl	800bce8 <__hexdig_fun>
 800bde4:	f100 3cff 	add.w	ip, r0, #4294967295
 800bde8:	fa5f fc8c 	uxtb.w	ip, ip
 800bdec:	f1bc 0f18 	cmp.w	ip, #24
 800bdf0:	f04f 030a 	mov.w	r3, #10
 800bdf4:	d91e      	bls.n	800be34 <__gethex+0x120>
 800bdf6:	b104      	cbz	r4, 800bdfa <__gethex+0xe6>
 800bdf8:	4252      	negs	r2, r2
 800bdfa:	4417      	add	r7, r2
 800bdfc:	f8ca 1000 	str.w	r1, [sl]
 800be00:	b1ed      	cbz	r5, 800be3e <__gethex+0x12a>
 800be02:	f1bb 0f00 	cmp.w	fp, #0
 800be06:	bf0c      	ite	eq
 800be08:	2506      	moveq	r5, #6
 800be0a:	2500      	movne	r5, #0
 800be0c:	4628      	mov	r0, r5
 800be0e:	b005      	add	sp, #20
 800be10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be14:	2500      	movs	r5, #0
 800be16:	462c      	mov	r4, r5
 800be18:	e7b0      	b.n	800bd7c <__gethex+0x68>
 800be1a:	2c00      	cmp	r4, #0
 800be1c:	d1c7      	bne.n	800bdae <__gethex+0x9a>
 800be1e:	4627      	mov	r7, r4
 800be20:	e7c7      	b.n	800bdb2 <__gethex+0x9e>
 800be22:	464e      	mov	r6, r9
 800be24:	462f      	mov	r7, r5
 800be26:	2501      	movs	r5, #1
 800be28:	e7c3      	b.n	800bdb2 <__gethex+0x9e>
 800be2a:	2400      	movs	r4, #0
 800be2c:	1cb1      	adds	r1, r6, #2
 800be2e:	e7cc      	b.n	800bdca <__gethex+0xb6>
 800be30:	2401      	movs	r4, #1
 800be32:	e7fb      	b.n	800be2c <__gethex+0x118>
 800be34:	fb03 0002 	mla	r0, r3, r2, r0
 800be38:	e7ce      	b.n	800bdd8 <__gethex+0xc4>
 800be3a:	4631      	mov	r1, r6
 800be3c:	e7de      	b.n	800bdfc <__gethex+0xe8>
 800be3e:	eba6 0309 	sub.w	r3, r6, r9
 800be42:	3b01      	subs	r3, #1
 800be44:	4629      	mov	r1, r5
 800be46:	2b07      	cmp	r3, #7
 800be48:	dc0a      	bgt.n	800be60 <__gethex+0x14c>
 800be4a:	9801      	ldr	r0, [sp, #4]
 800be4c:	f7fe f950 	bl	800a0f0 <_Balloc>
 800be50:	4604      	mov	r4, r0
 800be52:	b940      	cbnz	r0, 800be66 <__gethex+0x152>
 800be54:	4b5c      	ldr	r3, [pc, #368]	@ (800bfc8 <__gethex+0x2b4>)
 800be56:	4602      	mov	r2, r0
 800be58:	21e4      	movs	r1, #228	@ 0xe4
 800be5a:	485c      	ldr	r0, [pc, #368]	@ (800bfcc <__gethex+0x2b8>)
 800be5c:	f7ff fec0 	bl	800bbe0 <__assert_func>
 800be60:	3101      	adds	r1, #1
 800be62:	105b      	asrs	r3, r3, #1
 800be64:	e7ef      	b.n	800be46 <__gethex+0x132>
 800be66:	f100 0a14 	add.w	sl, r0, #20
 800be6a:	2300      	movs	r3, #0
 800be6c:	4655      	mov	r5, sl
 800be6e:	469b      	mov	fp, r3
 800be70:	45b1      	cmp	r9, r6
 800be72:	d337      	bcc.n	800bee4 <__gethex+0x1d0>
 800be74:	f845 bb04 	str.w	fp, [r5], #4
 800be78:	eba5 050a 	sub.w	r5, r5, sl
 800be7c:	10ad      	asrs	r5, r5, #2
 800be7e:	6125      	str	r5, [r4, #16]
 800be80:	4658      	mov	r0, fp
 800be82:	f7fe fa27 	bl	800a2d4 <__hi0bits>
 800be86:	016d      	lsls	r5, r5, #5
 800be88:	f8d8 6000 	ldr.w	r6, [r8]
 800be8c:	1a2d      	subs	r5, r5, r0
 800be8e:	42b5      	cmp	r5, r6
 800be90:	dd54      	ble.n	800bf3c <__gethex+0x228>
 800be92:	1bad      	subs	r5, r5, r6
 800be94:	4629      	mov	r1, r5
 800be96:	4620      	mov	r0, r4
 800be98:	f7fe fdb3 	bl	800aa02 <__any_on>
 800be9c:	4681      	mov	r9, r0
 800be9e:	b178      	cbz	r0, 800bec0 <__gethex+0x1ac>
 800bea0:	1e6b      	subs	r3, r5, #1
 800bea2:	1159      	asrs	r1, r3, #5
 800bea4:	f003 021f 	and.w	r2, r3, #31
 800bea8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800beac:	f04f 0901 	mov.w	r9, #1
 800beb0:	fa09 f202 	lsl.w	r2, r9, r2
 800beb4:	420a      	tst	r2, r1
 800beb6:	d003      	beq.n	800bec0 <__gethex+0x1ac>
 800beb8:	454b      	cmp	r3, r9
 800beba:	dc36      	bgt.n	800bf2a <__gethex+0x216>
 800bebc:	f04f 0902 	mov.w	r9, #2
 800bec0:	4629      	mov	r1, r5
 800bec2:	4620      	mov	r0, r4
 800bec4:	f7ff febe 	bl	800bc44 <rshift>
 800bec8:	442f      	add	r7, r5
 800beca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bece:	42bb      	cmp	r3, r7
 800bed0:	da42      	bge.n	800bf58 <__gethex+0x244>
 800bed2:	9801      	ldr	r0, [sp, #4]
 800bed4:	4621      	mov	r1, r4
 800bed6:	f7fe f94b 	bl	800a170 <_Bfree>
 800beda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bedc:	2300      	movs	r3, #0
 800bede:	6013      	str	r3, [r2, #0]
 800bee0:	25a3      	movs	r5, #163	@ 0xa3
 800bee2:	e793      	b.n	800be0c <__gethex+0xf8>
 800bee4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bee8:	2a2e      	cmp	r2, #46	@ 0x2e
 800beea:	d012      	beq.n	800bf12 <__gethex+0x1fe>
 800beec:	2b20      	cmp	r3, #32
 800beee:	d104      	bne.n	800befa <__gethex+0x1e6>
 800bef0:	f845 bb04 	str.w	fp, [r5], #4
 800bef4:	f04f 0b00 	mov.w	fp, #0
 800bef8:	465b      	mov	r3, fp
 800befa:	7830      	ldrb	r0, [r6, #0]
 800befc:	9303      	str	r3, [sp, #12]
 800befe:	f7ff fef3 	bl	800bce8 <__hexdig_fun>
 800bf02:	9b03      	ldr	r3, [sp, #12]
 800bf04:	f000 000f 	and.w	r0, r0, #15
 800bf08:	4098      	lsls	r0, r3
 800bf0a:	ea4b 0b00 	orr.w	fp, fp, r0
 800bf0e:	3304      	adds	r3, #4
 800bf10:	e7ae      	b.n	800be70 <__gethex+0x15c>
 800bf12:	45b1      	cmp	r9, r6
 800bf14:	d8ea      	bhi.n	800beec <__gethex+0x1d8>
 800bf16:	492b      	ldr	r1, [pc, #172]	@ (800bfc4 <__gethex+0x2b0>)
 800bf18:	9303      	str	r3, [sp, #12]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	f7ff fe33 	bl	800bb88 <strncmp>
 800bf22:	9b03      	ldr	r3, [sp, #12]
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d1e1      	bne.n	800beec <__gethex+0x1d8>
 800bf28:	e7a2      	b.n	800be70 <__gethex+0x15c>
 800bf2a:	1ea9      	subs	r1, r5, #2
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f7fe fd68 	bl	800aa02 <__any_on>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	d0c2      	beq.n	800bebc <__gethex+0x1a8>
 800bf36:	f04f 0903 	mov.w	r9, #3
 800bf3a:	e7c1      	b.n	800bec0 <__gethex+0x1ac>
 800bf3c:	da09      	bge.n	800bf52 <__gethex+0x23e>
 800bf3e:	1b75      	subs	r5, r6, r5
 800bf40:	4621      	mov	r1, r4
 800bf42:	9801      	ldr	r0, [sp, #4]
 800bf44:	462a      	mov	r2, r5
 800bf46:	f7fe fb23 	bl	800a590 <__lshift>
 800bf4a:	1b7f      	subs	r7, r7, r5
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	f100 0a14 	add.w	sl, r0, #20
 800bf52:	f04f 0900 	mov.w	r9, #0
 800bf56:	e7b8      	b.n	800beca <__gethex+0x1b6>
 800bf58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bf5c:	42bd      	cmp	r5, r7
 800bf5e:	dd6f      	ble.n	800c040 <__gethex+0x32c>
 800bf60:	1bed      	subs	r5, r5, r7
 800bf62:	42ae      	cmp	r6, r5
 800bf64:	dc34      	bgt.n	800bfd0 <__gethex+0x2bc>
 800bf66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d022      	beq.n	800bfb4 <__gethex+0x2a0>
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d024      	beq.n	800bfbc <__gethex+0x2a8>
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d115      	bne.n	800bfa2 <__gethex+0x28e>
 800bf76:	42ae      	cmp	r6, r5
 800bf78:	d113      	bne.n	800bfa2 <__gethex+0x28e>
 800bf7a:	2e01      	cmp	r6, #1
 800bf7c:	d10b      	bne.n	800bf96 <__gethex+0x282>
 800bf7e:	9a02      	ldr	r2, [sp, #8]
 800bf80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	2301      	movs	r3, #1
 800bf88:	6123      	str	r3, [r4, #16]
 800bf8a:	f8ca 3000 	str.w	r3, [sl]
 800bf8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf90:	2562      	movs	r5, #98	@ 0x62
 800bf92:	601c      	str	r4, [r3, #0]
 800bf94:	e73a      	b.n	800be0c <__gethex+0xf8>
 800bf96:	1e71      	subs	r1, r6, #1
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f7fe fd32 	bl	800aa02 <__any_on>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d1ed      	bne.n	800bf7e <__gethex+0x26a>
 800bfa2:	9801      	ldr	r0, [sp, #4]
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	f7fe f8e3 	bl	800a170 <_Bfree>
 800bfaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfac:	2300      	movs	r3, #0
 800bfae:	6013      	str	r3, [r2, #0]
 800bfb0:	2550      	movs	r5, #80	@ 0x50
 800bfb2:	e72b      	b.n	800be0c <__gethex+0xf8>
 800bfb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1f3      	bne.n	800bfa2 <__gethex+0x28e>
 800bfba:	e7e0      	b.n	800bf7e <__gethex+0x26a>
 800bfbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1dd      	bne.n	800bf7e <__gethex+0x26a>
 800bfc2:	e7ee      	b.n	800bfa2 <__gethex+0x28e>
 800bfc4:	0800cb0f 	.word	0x0800cb0f
 800bfc8:	0800caa5 	.word	0x0800caa5
 800bfcc:	0800cb66 	.word	0x0800cb66
 800bfd0:	1e6f      	subs	r7, r5, #1
 800bfd2:	f1b9 0f00 	cmp.w	r9, #0
 800bfd6:	d130      	bne.n	800c03a <__gethex+0x326>
 800bfd8:	b127      	cbz	r7, 800bfe4 <__gethex+0x2d0>
 800bfda:	4639      	mov	r1, r7
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f7fe fd10 	bl	800aa02 <__any_on>
 800bfe2:	4681      	mov	r9, r0
 800bfe4:	117a      	asrs	r2, r7, #5
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bfec:	f007 071f 	and.w	r7, r7, #31
 800bff0:	40bb      	lsls	r3, r7
 800bff2:	4213      	tst	r3, r2
 800bff4:	4629      	mov	r1, r5
 800bff6:	4620      	mov	r0, r4
 800bff8:	bf18      	it	ne
 800bffa:	f049 0902 	orrne.w	r9, r9, #2
 800bffe:	f7ff fe21 	bl	800bc44 <rshift>
 800c002:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c006:	1b76      	subs	r6, r6, r5
 800c008:	2502      	movs	r5, #2
 800c00a:	f1b9 0f00 	cmp.w	r9, #0
 800c00e:	d047      	beq.n	800c0a0 <__gethex+0x38c>
 800c010:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c014:	2b02      	cmp	r3, #2
 800c016:	d015      	beq.n	800c044 <__gethex+0x330>
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d017      	beq.n	800c04c <__gethex+0x338>
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d109      	bne.n	800c034 <__gethex+0x320>
 800c020:	f019 0f02 	tst.w	r9, #2
 800c024:	d006      	beq.n	800c034 <__gethex+0x320>
 800c026:	f8da 3000 	ldr.w	r3, [sl]
 800c02a:	ea49 0903 	orr.w	r9, r9, r3
 800c02e:	f019 0f01 	tst.w	r9, #1
 800c032:	d10e      	bne.n	800c052 <__gethex+0x33e>
 800c034:	f045 0510 	orr.w	r5, r5, #16
 800c038:	e032      	b.n	800c0a0 <__gethex+0x38c>
 800c03a:	f04f 0901 	mov.w	r9, #1
 800c03e:	e7d1      	b.n	800bfe4 <__gethex+0x2d0>
 800c040:	2501      	movs	r5, #1
 800c042:	e7e2      	b.n	800c00a <__gethex+0x2f6>
 800c044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c046:	f1c3 0301 	rsb	r3, r3, #1
 800c04a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c04c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d0f0      	beq.n	800c034 <__gethex+0x320>
 800c052:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c056:	f104 0314 	add.w	r3, r4, #20
 800c05a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c05e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c062:	f04f 0c00 	mov.w	ip, #0
 800c066:	4618      	mov	r0, r3
 800c068:	f853 2b04 	ldr.w	r2, [r3], #4
 800c06c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c070:	d01b      	beq.n	800c0aa <__gethex+0x396>
 800c072:	3201      	adds	r2, #1
 800c074:	6002      	str	r2, [r0, #0]
 800c076:	2d02      	cmp	r5, #2
 800c078:	f104 0314 	add.w	r3, r4, #20
 800c07c:	d13c      	bne.n	800c0f8 <__gethex+0x3e4>
 800c07e:	f8d8 2000 	ldr.w	r2, [r8]
 800c082:	3a01      	subs	r2, #1
 800c084:	42b2      	cmp	r2, r6
 800c086:	d109      	bne.n	800c09c <__gethex+0x388>
 800c088:	1171      	asrs	r1, r6, #5
 800c08a:	2201      	movs	r2, #1
 800c08c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c090:	f006 061f 	and.w	r6, r6, #31
 800c094:	fa02 f606 	lsl.w	r6, r2, r6
 800c098:	421e      	tst	r6, r3
 800c09a:	d13a      	bne.n	800c112 <__gethex+0x3fe>
 800c09c:	f045 0520 	orr.w	r5, r5, #32
 800c0a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0a2:	601c      	str	r4, [r3, #0]
 800c0a4:	9b02      	ldr	r3, [sp, #8]
 800c0a6:	601f      	str	r7, [r3, #0]
 800c0a8:	e6b0      	b.n	800be0c <__gethex+0xf8>
 800c0aa:	4299      	cmp	r1, r3
 800c0ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800c0b0:	d8d9      	bhi.n	800c066 <__gethex+0x352>
 800c0b2:	68a3      	ldr	r3, [r4, #8]
 800c0b4:	459b      	cmp	fp, r3
 800c0b6:	db17      	blt.n	800c0e8 <__gethex+0x3d4>
 800c0b8:	6861      	ldr	r1, [r4, #4]
 800c0ba:	9801      	ldr	r0, [sp, #4]
 800c0bc:	3101      	adds	r1, #1
 800c0be:	f7fe f817 	bl	800a0f0 <_Balloc>
 800c0c2:	4681      	mov	r9, r0
 800c0c4:	b918      	cbnz	r0, 800c0ce <__gethex+0x3ba>
 800c0c6:	4b1a      	ldr	r3, [pc, #104]	@ (800c130 <__gethex+0x41c>)
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	2184      	movs	r1, #132	@ 0x84
 800c0cc:	e6c5      	b.n	800be5a <__gethex+0x146>
 800c0ce:	6922      	ldr	r2, [r4, #16]
 800c0d0:	3202      	adds	r2, #2
 800c0d2:	f104 010c 	add.w	r1, r4, #12
 800c0d6:	0092      	lsls	r2, r2, #2
 800c0d8:	300c      	adds	r0, #12
 800c0da:	f7fd f89c 	bl	8009216 <memcpy>
 800c0de:	4621      	mov	r1, r4
 800c0e0:	9801      	ldr	r0, [sp, #4]
 800c0e2:	f7fe f845 	bl	800a170 <_Bfree>
 800c0e6:	464c      	mov	r4, r9
 800c0e8:	6923      	ldr	r3, [r4, #16]
 800c0ea:	1c5a      	adds	r2, r3, #1
 800c0ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0f0:	6122      	str	r2, [r4, #16]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	615a      	str	r2, [r3, #20]
 800c0f6:	e7be      	b.n	800c076 <__gethex+0x362>
 800c0f8:	6922      	ldr	r2, [r4, #16]
 800c0fa:	455a      	cmp	r2, fp
 800c0fc:	dd0b      	ble.n	800c116 <__gethex+0x402>
 800c0fe:	2101      	movs	r1, #1
 800c100:	4620      	mov	r0, r4
 800c102:	f7ff fd9f 	bl	800bc44 <rshift>
 800c106:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c10a:	3701      	adds	r7, #1
 800c10c:	42bb      	cmp	r3, r7
 800c10e:	f6ff aee0 	blt.w	800bed2 <__gethex+0x1be>
 800c112:	2501      	movs	r5, #1
 800c114:	e7c2      	b.n	800c09c <__gethex+0x388>
 800c116:	f016 061f 	ands.w	r6, r6, #31
 800c11a:	d0fa      	beq.n	800c112 <__gethex+0x3fe>
 800c11c:	4453      	add	r3, sl
 800c11e:	f1c6 0620 	rsb	r6, r6, #32
 800c122:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c126:	f7fe f8d5 	bl	800a2d4 <__hi0bits>
 800c12a:	42b0      	cmp	r0, r6
 800c12c:	dbe7      	blt.n	800c0fe <__gethex+0x3ea>
 800c12e:	e7f0      	b.n	800c112 <__gethex+0x3fe>
 800c130:	0800caa5 	.word	0x0800caa5

0800c134 <L_shift>:
 800c134:	f1c2 0208 	rsb	r2, r2, #8
 800c138:	0092      	lsls	r2, r2, #2
 800c13a:	b570      	push	{r4, r5, r6, lr}
 800c13c:	f1c2 0620 	rsb	r6, r2, #32
 800c140:	6843      	ldr	r3, [r0, #4]
 800c142:	6804      	ldr	r4, [r0, #0]
 800c144:	fa03 f506 	lsl.w	r5, r3, r6
 800c148:	432c      	orrs	r4, r5
 800c14a:	40d3      	lsrs	r3, r2
 800c14c:	6004      	str	r4, [r0, #0]
 800c14e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c152:	4288      	cmp	r0, r1
 800c154:	d3f4      	bcc.n	800c140 <L_shift+0xc>
 800c156:	bd70      	pop	{r4, r5, r6, pc}

0800c158 <__match>:
 800c158:	b530      	push	{r4, r5, lr}
 800c15a:	6803      	ldr	r3, [r0, #0]
 800c15c:	3301      	adds	r3, #1
 800c15e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c162:	b914      	cbnz	r4, 800c16a <__match+0x12>
 800c164:	6003      	str	r3, [r0, #0]
 800c166:	2001      	movs	r0, #1
 800c168:	bd30      	pop	{r4, r5, pc}
 800c16a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c16e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c172:	2d19      	cmp	r5, #25
 800c174:	bf98      	it	ls
 800c176:	3220      	addls	r2, #32
 800c178:	42a2      	cmp	r2, r4
 800c17a:	d0f0      	beq.n	800c15e <__match+0x6>
 800c17c:	2000      	movs	r0, #0
 800c17e:	e7f3      	b.n	800c168 <__match+0x10>

0800c180 <__hexnan>:
 800c180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c184:	680b      	ldr	r3, [r1, #0]
 800c186:	6801      	ldr	r1, [r0, #0]
 800c188:	115e      	asrs	r6, r3, #5
 800c18a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c18e:	f013 031f 	ands.w	r3, r3, #31
 800c192:	b087      	sub	sp, #28
 800c194:	bf18      	it	ne
 800c196:	3604      	addne	r6, #4
 800c198:	2500      	movs	r5, #0
 800c19a:	1f37      	subs	r7, r6, #4
 800c19c:	4682      	mov	sl, r0
 800c19e:	4690      	mov	r8, r2
 800c1a0:	9301      	str	r3, [sp, #4]
 800c1a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c1a6:	46b9      	mov	r9, r7
 800c1a8:	463c      	mov	r4, r7
 800c1aa:	9502      	str	r5, [sp, #8]
 800c1ac:	46ab      	mov	fp, r5
 800c1ae:	784a      	ldrb	r2, [r1, #1]
 800c1b0:	1c4b      	adds	r3, r1, #1
 800c1b2:	9303      	str	r3, [sp, #12]
 800c1b4:	b342      	cbz	r2, 800c208 <__hexnan+0x88>
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	9105      	str	r1, [sp, #20]
 800c1ba:	9204      	str	r2, [sp, #16]
 800c1bc:	f7ff fd94 	bl	800bce8 <__hexdig_fun>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d151      	bne.n	800c268 <__hexnan+0xe8>
 800c1c4:	9a04      	ldr	r2, [sp, #16]
 800c1c6:	9905      	ldr	r1, [sp, #20]
 800c1c8:	2a20      	cmp	r2, #32
 800c1ca:	d818      	bhi.n	800c1fe <__hexnan+0x7e>
 800c1cc:	9b02      	ldr	r3, [sp, #8]
 800c1ce:	459b      	cmp	fp, r3
 800c1d0:	dd13      	ble.n	800c1fa <__hexnan+0x7a>
 800c1d2:	454c      	cmp	r4, r9
 800c1d4:	d206      	bcs.n	800c1e4 <__hexnan+0x64>
 800c1d6:	2d07      	cmp	r5, #7
 800c1d8:	dc04      	bgt.n	800c1e4 <__hexnan+0x64>
 800c1da:	462a      	mov	r2, r5
 800c1dc:	4649      	mov	r1, r9
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f7ff ffa8 	bl	800c134 <L_shift>
 800c1e4:	4544      	cmp	r4, r8
 800c1e6:	d952      	bls.n	800c28e <__hexnan+0x10e>
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	f1a4 0904 	sub.w	r9, r4, #4
 800c1ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1f2:	f8cd b008 	str.w	fp, [sp, #8]
 800c1f6:	464c      	mov	r4, r9
 800c1f8:	461d      	mov	r5, r3
 800c1fa:	9903      	ldr	r1, [sp, #12]
 800c1fc:	e7d7      	b.n	800c1ae <__hexnan+0x2e>
 800c1fe:	2a29      	cmp	r2, #41	@ 0x29
 800c200:	d157      	bne.n	800c2b2 <__hexnan+0x132>
 800c202:	3102      	adds	r1, #2
 800c204:	f8ca 1000 	str.w	r1, [sl]
 800c208:	f1bb 0f00 	cmp.w	fp, #0
 800c20c:	d051      	beq.n	800c2b2 <__hexnan+0x132>
 800c20e:	454c      	cmp	r4, r9
 800c210:	d206      	bcs.n	800c220 <__hexnan+0xa0>
 800c212:	2d07      	cmp	r5, #7
 800c214:	dc04      	bgt.n	800c220 <__hexnan+0xa0>
 800c216:	462a      	mov	r2, r5
 800c218:	4649      	mov	r1, r9
 800c21a:	4620      	mov	r0, r4
 800c21c:	f7ff ff8a 	bl	800c134 <L_shift>
 800c220:	4544      	cmp	r4, r8
 800c222:	d936      	bls.n	800c292 <__hexnan+0x112>
 800c224:	f1a8 0204 	sub.w	r2, r8, #4
 800c228:	4623      	mov	r3, r4
 800c22a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c22e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c232:	429f      	cmp	r7, r3
 800c234:	d2f9      	bcs.n	800c22a <__hexnan+0xaa>
 800c236:	1b3b      	subs	r3, r7, r4
 800c238:	f023 0303 	bic.w	r3, r3, #3
 800c23c:	3304      	adds	r3, #4
 800c23e:	3401      	adds	r4, #1
 800c240:	3e03      	subs	r6, #3
 800c242:	42b4      	cmp	r4, r6
 800c244:	bf88      	it	hi
 800c246:	2304      	movhi	r3, #4
 800c248:	4443      	add	r3, r8
 800c24a:	2200      	movs	r2, #0
 800c24c:	f843 2b04 	str.w	r2, [r3], #4
 800c250:	429f      	cmp	r7, r3
 800c252:	d2fb      	bcs.n	800c24c <__hexnan+0xcc>
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	b91b      	cbnz	r3, 800c260 <__hexnan+0xe0>
 800c258:	4547      	cmp	r7, r8
 800c25a:	d128      	bne.n	800c2ae <__hexnan+0x12e>
 800c25c:	2301      	movs	r3, #1
 800c25e:	603b      	str	r3, [r7, #0]
 800c260:	2005      	movs	r0, #5
 800c262:	b007      	add	sp, #28
 800c264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c268:	3501      	adds	r5, #1
 800c26a:	2d08      	cmp	r5, #8
 800c26c:	f10b 0b01 	add.w	fp, fp, #1
 800c270:	dd06      	ble.n	800c280 <__hexnan+0x100>
 800c272:	4544      	cmp	r4, r8
 800c274:	d9c1      	bls.n	800c1fa <__hexnan+0x7a>
 800c276:	2300      	movs	r3, #0
 800c278:	f844 3c04 	str.w	r3, [r4, #-4]
 800c27c:	2501      	movs	r5, #1
 800c27e:	3c04      	subs	r4, #4
 800c280:	6822      	ldr	r2, [r4, #0]
 800c282:	f000 000f 	and.w	r0, r0, #15
 800c286:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c28a:	6020      	str	r0, [r4, #0]
 800c28c:	e7b5      	b.n	800c1fa <__hexnan+0x7a>
 800c28e:	2508      	movs	r5, #8
 800c290:	e7b3      	b.n	800c1fa <__hexnan+0x7a>
 800c292:	9b01      	ldr	r3, [sp, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d0dd      	beq.n	800c254 <__hexnan+0xd4>
 800c298:	f1c3 0320 	rsb	r3, r3, #32
 800c29c:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a0:	40da      	lsrs	r2, r3
 800c2a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c2ac:	e7d2      	b.n	800c254 <__hexnan+0xd4>
 800c2ae:	3f04      	subs	r7, #4
 800c2b0:	e7d0      	b.n	800c254 <__hexnan+0xd4>
 800c2b2:	2004      	movs	r0, #4
 800c2b4:	e7d5      	b.n	800c262 <__hexnan+0xe2>

0800c2b6 <__ascii_mbtowc>:
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	b901      	cbnz	r1, 800c2bc <__ascii_mbtowc+0x6>
 800c2ba:	a901      	add	r1, sp, #4
 800c2bc:	b142      	cbz	r2, 800c2d0 <__ascii_mbtowc+0x1a>
 800c2be:	b14b      	cbz	r3, 800c2d4 <__ascii_mbtowc+0x1e>
 800c2c0:	7813      	ldrb	r3, [r2, #0]
 800c2c2:	600b      	str	r3, [r1, #0]
 800c2c4:	7812      	ldrb	r2, [r2, #0]
 800c2c6:	1e10      	subs	r0, r2, #0
 800c2c8:	bf18      	it	ne
 800c2ca:	2001      	movne	r0, #1
 800c2cc:	b002      	add	sp, #8
 800c2ce:	4770      	bx	lr
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	e7fb      	b.n	800c2cc <__ascii_mbtowc+0x16>
 800c2d4:	f06f 0001 	mvn.w	r0, #1
 800c2d8:	e7f8      	b.n	800c2cc <__ascii_mbtowc+0x16>

0800c2da <_realloc_r>:
 800c2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2de:	4607      	mov	r7, r0
 800c2e0:	4614      	mov	r4, r2
 800c2e2:	460d      	mov	r5, r1
 800c2e4:	b921      	cbnz	r1, 800c2f0 <_realloc_r+0x16>
 800c2e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	f7fd be74 	b.w	8009fd8 <_malloc_r>
 800c2f0:	b92a      	cbnz	r2, 800c2fe <_realloc_r+0x24>
 800c2f2:	f7fd fdfd 	bl	8009ef0 <_free_r>
 800c2f6:	4625      	mov	r5, r4
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2fe:	f000 f840 	bl	800c382 <_malloc_usable_size_r>
 800c302:	4284      	cmp	r4, r0
 800c304:	4606      	mov	r6, r0
 800c306:	d802      	bhi.n	800c30e <_realloc_r+0x34>
 800c308:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c30c:	d8f4      	bhi.n	800c2f8 <_realloc_r+0x1e>
 800c30e:	4621      	mov	r1, r4
 800c310:	4638      	mov	r0, r7
 800c312:	f7fd fe61 	bl	8009fd8 <_malloc_r>
 800c316:	4680      	mov	r8, r0
 800c318:	b908      	cbnz	r0, 800c31e <_realloc_r+0x44>
 800c31a:	4645      	mov	r5, r8
 800c31c:	e7ec      	b.n	800c2f8 <_realloc_r+0x1e>
 800c31e:	42b4      	cmp	r4, r6
 800c320:	4622      	mov	r2, r4
 800c322:	4629      	mov	r1, r5
 800c324:	bf28      	it	cs
 800c326:	4632      	movcs	r2, r6
 800c328:	f7fc ff75 	bl	8009216 <memcpy>
 800c32c:	4629      	mov	r1, r5
 800c32e:	4638      	mov	r0, r7
 800c330:	f7fd fdde 	bl	8009ef0 <_free_r>
 800c334:	e7f1      	b.n	800c31a <_realloc_r+0x40>

0800c336 <__ascii_wctomb>:
 800c336:	4603      	mov	r3, r0
 800c338:	4608      	mov	r0, r1
 800c33a:	b141      	cbz	r1, 800c34e <__ascii_wctomb+0x18>
 800c33c:	2aff      	cmp	r2, #255	@ 0xff
 800c33e:	d904      	bls.n	800c34a <__ascii_wctomb+0x14>
 800c340:	228a      	movs	r2, #138	@ 0x8a
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	f04f 30ff 	mov.w	r0, #4294967295
 800c348:	4770      	bx	lr
 800c34a:	700a      	strb	r2, [r1, #0]
 800c34c:	2001      	movs	r0, #1
 800c34e:	4770      	bx	lr

0800c350 <fiprintf>:
 800c350:	b40e      	push	{r1, r2, r3}
 800c352:	b503      	push	{r0, r1, lr}
 800c354:	4601      	mov	r1, r0
 800c356:	ab03      	add	r3, sp, #12
 800c358:	4805      	ldr	r0, [pc, #20]	@ (800c370 <fiprintf+0x20>)
 800c35a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c35e:	6800      	ldr	r0, [r0, #0]
 800c360:	9301      	str	r3, [sp, #4]
 800c362:	f000 f83f 	bl	800c3e4 <_vfiprintf_r>
 800c366:	b002      	add	sp, #8
 800c368:	f85d eb04 	ldr.w	lr, [sp], #4
 800c36c:	b003      	add	sp, #12
 800c36e:	4770      	bx	lr
 800c370:	20000024 	.word	0x20000024

0800c374 <abort>:
 800c374:	b508      	push	{r3, lr}
 800c376:	2006      	movs	r0, #6
 800c378:	f000 fa08 	bl	800c78c <raise>
 800c37c:	2001      	movs	r0, #1
 800c37e:	f7f6 fc95 	bl	8002cac <_exit>

0800c382 <_malloc_usable_size_r>:
 800c382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c386:	1f18      	subs	r0, r3, #4
 800c388:	2b00      	cmp	r3, #0
 800c38a:	bfbc      	itt	lt
 800c38c:	580b      	ldrlt	r3, [r1, r0]
 800c38e:	18c0      	addlt	r0, r0, r3
 800c390:	4770      	bx	lr

0800c392 <__sfputc_r>:
 800c392:	6893      	ldr	r3, [r2, #8]
 800c394:	3b01      	subs	r3, #1
 800c396:	2b00      	cmp	r3, #0
 800c398:	b410      	push	{r4}
 800c39a:	6093      	str	r3, [r2, #8]
 800c39c:	da08      	bge.n	800c3b0 <__sfputc_r+0x1e>
 800c39e:	6994      	ldr	r4, [r2, #24]
 800c3a0:	42a3      	cmp	r3, r4
 800c3a2:	db01      	blt.n	800c3a8 <__sfputc_r+0x16>
 800c3a4:	290a      	cmp	r1, #10
 800c3a6:	d103      	bne.n	800c3b0 <__sfputc_r+0x1e>
 800c3a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3ac:	f000 b932 	b.w	800c614 <__swbuf_r>
 800c3b0:	6813      	ldr	r3, [r2, #0]
 800c3b2:	1c58      	adds	r0, r3, #1
 800c3b4:	6010      	str	r0, [r2, #0]
 800c3b6:	7019      	strb	r1, [r3, #0]
 800c3b8:	4608      	mov	r0, r1
 800c3ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <__sfputs_r>:
 800c3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	460f      	mov	r7, r1
 800c3c6:	4614      	mov	r4, r2
 800c3c8:	18d5      	adds	r5, r2, r3
 800c3ca:	42ac      	cmp	r4, r5
 800c3cc:	d101      	bne.n	800c3d2 <__sfputs_r+0x12>
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	e007      	b.n	800c3e2 <__sfputs_r+0x22>
 800c3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3d6:	463a      	mov	r2, r7
 800c3d8:	4630      	mov	r0, r6
 800c3da:	f7ff ffda 	bl	800c392 <__sfputc_r>
 800c3de:	1c43      	adds	r3, r0, #1
 800c3e0:	d1f3      	bne.n	800c3ca <__sfputs_r+0xa>
 800c3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c3e4 <_vfiprintf_r>:
 800c3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e8:	460d      	mov	r5, r1
 800c3ea:	b09d      	sub	sp, #116	@ 0x74
 800c3ec:	4614      	mov	r4, r2
 800c3ee:	4698      	mov	r8, r3
 800c3f0:	4606      	mov	r6, r0
 800c3f2:	b118      	cbz	r0, 800c3fc <_vfiprintf_r+0x18>
 800c3f4:	6a03      	ldr	r3, [r0, #32]
 800c3f6:	b90b      	cbnz	r3, 800c3fc <_vfiprintf_r+0x18>
 800c3f8:	f7fc fdbc 	bl	8008f74 <__sinit>
 800c3fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3fe:	07d9      	lsls	r1, r3, #31
 800c400:	d405      	bmi.n	800c40e <_vfiprintf_r+0x2a>
 800c402:	89ab      	ldrh	r3, [r5, #12]
 800c404:	059a      	lsls	r2, r3, #22
 800c406:	d402      	bmi.n	800c40e <_vfiprintf_r+0x2a>
 800c408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c40a:	f7fc ff02 	bl	8009212 <__retarget_lock_acquire_recursive>
 800c40e:	89ab      	ldrh	r3, [r5, #12]
 800c410:	071b      	lsls	r3, r3, #28
 800c412:	d501      	bpl.n	800c418 <_vfiprintf_r+0x34>
 800c414:	692b      	ldr	r3, [r5, #16]
 800c416:	b99b      	cbnz	r3, 800c440 <_vfiprintf_r+0x5c>
 800c418:	4629      	mov	r1, r5
 800c41a:	4630      	mov	r0, r6
 800c41c:	f000 f938 	bl	800c690 <__swsetup_r>
 800c420:	b170      	cbz	r0, 800c440 <_vfiprintf_r+0x5c>
 800c422:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c424:	07dc      	lsls	r4, r3, #31
 800c426:	d504      	bpl.n	800c432 <_vfiprintf_r+0x4e>
 800c428:	f04f 30ff 	mov.w	r0, #4294967295
 800c42c:	b01d      	add	sp, #116	@ 0x74
 800c42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c432:	89ab      	ldrh	r3, [r5, #12]
 800c434:	0598      	lsls	r0, r3, #22
 800c436:	d4f7      	bmi.n	800c428 <_vfiprintf_r+0x44>
 800c438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c43a:	f7fc feeb 	bl	8009214 <__retarget_lock_release_recursive>
 800c43e:	e7f3      	b.n	800c428 <_vfiprintf_r+0x44>
 800c440:	2300      	movs	r3, #0
 800c442:	9309      	str	r3, [sp, #36]	@ 0x24
 800c444:	2320      	movs	r3, #32
 800c446:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c44a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c44e:	2330      	movs	r3, #48	@ 0x30
 800c450:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c600 <_vfiprintf_r+0x21c>
 800c454:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c458:	f04f 0901 	mov.w	r9, #1
 800c45c:	4623      	mov	r3, r4
 800c45e:	469a      	mov	sl, r3
 800c460:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c464:	b10a      	cbz	r2, 800c46a <_vfiprintf_r+0x86>
 800c466:	2a25      	cmp	r2, #37	@ 0x25
 800c468:	d1f9      	bne.n	800c45e <_vfiprintf_r+0x7a>
 800c46a:	ebba 0b04 	subs.w	fp, sl, r4
 800c46e:	d00b      	beq.n	800c488 <_vfiprintf_r+0xa4>
 800c470:	465b      	mov	r3, fp
 800c472:	4622      	mov	r2, r4
 800c474:	4629      	mov	r1, r5
 800c476:	4630      	mov	r0, r6
 800c478:	f7ff ffa2 	bl	800c3c0 <__sfputs_r>
 800c47c:	3001      	adds	r0, #1
 800c47e:	f000 80a7 	beq.w	800c5d0 <_vfiprintf_r+0x1ec>
 800c482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c484:	445a      	add	r2, fp
 800c486:	9209      	str	r2, [sp, #36]	@ 0x24
 800c488:	f89a 3000 	ldrb.w	r3, [sl]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f000 809f 	beq.w	800c5d0 <_vfiprintf_r+0x1ec>
 800c492:	2300      	movs	r3, #0
 800c494:	f04f 32ff 	mov.w	r2, #4294967295
 800c498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c49c:	f10a 0a01 	add.w	sl, sl, #1
 800c4a0:	9304      	str	r3, [sp, #16]
 800c4a2:	9307      	str	r3, [sp, #28]
 800c4a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c4a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4aa:	4654      	mov	r4, sl
 800c4ac:	2205      	movs	r2, #5
 800c4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b2:	4853      	ldr	r0, [pc, #332]	@ (800c600 <_vfiprintf_r+0x21c>)
 800c4b4:	f7f3 fe94 	bl	80001e0 <memchr>
 800c4b8:	9a04      	ldr	r2, [sp, #16]
 800c4ba:	b9d8      	cbnz	r0, 800c4f4 <_vfiprintf_r+0x110>
 800c4bc:	06d1      	lsls	r1, r2, #27
 800c4be:	bf44      	itt	mi
 800c4c0:	2320      	movmi	r3, #32
 800c4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4c6:	0713      	lsls	r3, r2, #28
 800c4c8:	bf44      	itt	mi
 800c4ca:	232b      	movmi	r3, #43	@ 0x2b
 800c4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4d6:	d015      	beq.n	800c504 <_vfiprintf_r+0x120>
 800c4d8:	9a07      	ldr	r2, [sp, #28]
 800c4da:	4654      	mov	r4, sl
 800c4dc:	2000      	movs	r0, #0
 800c4de:	f04f 0c0a 	mov.w	ip, #10
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4e8:	3b30      	subs	r3, #48	@ 0x30
 800c4ea:	2b09      	cmp	r3, #9
 800c4ec:	d94b      	bls.n	800c586 <_vfiprintf_r+0x1a2>
 800c4ee:	b1b0      	cbz	r0, 800c51e <_vfiprintf_r+0x13a>
 800c4f0:	9207      	str	r2, [sp, #28]
 800c4f2:	e014      	b.n	800c51e <_vfiprintf_r+0x13a>
 800c4f4:	eba0 0308 	sub.w	r3, r0, r8
 800c4f8:	fa09 f303 	lsl.w	r3, r9, r3
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	9304      	str	r3, [sp, #16]
 800c500:	46a2      	mov	sl, r4
 800c502:	e7d2      	b.n	800c4aa <_vfiprintf_r+0xc6>
 800c504:	9b03      	ldr	r3, [sp, #12]
 800c506:	1d19      	adds	r1, r3, #4
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	9103      	str	r1, [sp, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	bfbb      	ittet	lt
 800c510:	425b      	neglt	r3, r3
 800c512:	f042 0202 	orrlt.w	r2, r2, #2
 800c516:	9307      	strge	r3, [sp, #28]
 800c518:	9307      	strlt	r3, [sp, #28]
 800c51a:	bfb8      	it	lt
 800c51c:	9204      	strlt	r2, [sp, #16]
 800c51e:	7823      	ldrb	r3, [r4, #0]
 800c520:	2b2e      	cmp	r3, #46	@ 0x2e
 800c522:	d10a      	bne.n	800c53a <_vfiprintf_r+0x156>
 800c524:	7863      	ldrb	r3, [r4, #1]
 800c526:	2b2a      	cmp	r3, #42	@ 0x2a
 800c528:	d132      	bne.n	800c590 <_vfiprintf_r+0x1ac>
 800c52a:	9b03      	ldr	r3, [sp, #12]
 800c52c:	1d1a      	adds	r2, r3, #4
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	9203      	str	r2, [sp, #12]
 800c532:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c536:	3402      	adds	r4, #2
 800c538:	9305      	str	r3, [sp, #20]
 800c53a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c610 <_vfiprintf_r+0x22c>
 800c53e:	7821      	ldrb	r1, [r4, #0]
 800c540:	2203      	movs	r2, #3
 800c542:	4650      	mov	r0, sl
 800c544:	f7f3 fe4c 	bl	80001e0 <memchr>
 800c548:	b138      	cbz	r0, 800c55a <_vfiprintf_r+0x176>
 800c54a:	9b04      	ldr	r3, [sp, #16]
 800c54c:	eba0 000a 	sub.w	r0, r0, sl
 800c550:	2240      	movs	r2, #64	@ 0x40
 800c552:	4082      	lsls	r2, r0
 800c554:	4313      	orrs	r3, r2
 800c556:	3401      	adds	r4, #1
 800c558:	9304      	str	r3, [sp, #16]
 800c55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c55e:	4829      	ldr	r0, [pc, #164]	@ (800c604 <_vfiprintf_r+0x220>)
 800c560:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c564:	2206      	movs	r2, #6
 800c566:	f7f3 fe3b 	bl	80001e0 <memchr>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d03f      	beq.n	800c5ee <_vfiprintf_r+0x20a>
 800c56e:	4b26      	ldr	r3, [pc, #152]	@ (800c608 <_vfiprintf_r+0x224>)
 800c570:	bb1b      	cbnz	r3, 800c5ba <_vfiprintf_r+0x1d6>
 800c572:	9b03      	ldr	r3, [sp, #12]
 800c574:	3307      	adds	r3, #7
 800c576:	f023 0307 	bic.w	r3, r3, #7
 800c57a:	3308      	adds	r3, #8
 800c57c:	9303      	str	r3, [sp, #12]
 800c57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c580:	443b      	add	r3, r7
 800c582:	9309      	str	r3, [sp, #36]	@ 0x24
 800c584:	e76a      	b.n	800c45c <_vfiprintf_r+0x78>
 800c586:	fb0c 3202 	mla	r2, ip, r2, r3
 800c58a:	460c      	mov	r4, r1
 800c58c:	2001      	movs	r0, #1
 800c58e:	e7a8      	b.n	800c4e2 <_vfiprintf_r+0xfe>
 800c590:	2300      	movs	r3, #0
 800c592:	3401      	adds	r4, #1
 800c594:	9305      	str	r3, [sp, #20]
 800c596:	4619      	mov	r1, r3
 800c598:	f04f 0c0a 	mov.w	ip, #10
 800c59c:	4620      	mov	r0, r4
 800c59e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5a2:	3a30      	subs	r2, #48	@ 0x30
 800c5a4:	2a09      	cmp	r2, #9
 800c5a6:	d903      	bls.n	800c5b0 <_vfiprintf_r+0x1cc>
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d0c6      	beq.n	800c53a <_vfiprintf_r+0x156>
 800c5ac:	9105      	str	r1, [sp, #20]
 800c5ae:	e7c4      	b.n	800c53a <_vfiprintf_r+0x156>
 800c5b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e7f0      	b.n	800c59c <_vfiprintf_r+0x1b8>
 800c5ba:	ab03      	add	r3, sp, #12
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	462a      	mov	r2, r5
 800c5c0:	4b12      	ldr	r3, [pc, #72]	@ (800c60c <_vfiprintf_r+0x228>)
 800c5c2:	a904      	add	r1, sp, #16
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f7fb fe85 	bl	80082d4 <_printf_float>
 800c5ca:	4607      	mov	r7, r0
 800c5cc:	1c78      	adds	r0, r7, #1
 800c5ce:	d1d6      	bne.n	800c57e <_vfiprintf_r+0x19a>
 800c5d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5d2:	07d9      	lsls	r1, r3, #31
 800c5d4:	d405      	bmi.n	800c5e2 <_vfiprintf_r+0x1fe>
 800c5d6:	89ab      	ldrh	r3, [r5, #12]
 800c5d8:	059a      	lsls	r2, r3, #22
 800c5da:	d402      	bmi.n	800c5e2 <_vfiprintf_r+0x1fe>
 800c5dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5de:	f7fc fe19 	bl	8009214 <__retarget_lock_release_recursive>
 800c5e2:	89ab      	ldrh	r3, [r5, #12]
 800c5e4:	065b      	lsls	r3, r3, #25
 800c5e6:	f53f af1f 	bmi.w	800c428 <_vfiprintf_r+0x44>
 800c5ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5ec:	e71e      	b.n	800c42c <_vfiprintf_r+0x48>
 800c5ee:	ab03      	add	r3, sp, #12
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	462a      	mov	r2, r5
 800c5f4:	4b05      	ldr	r3, [pc, #20]	@ (800c60c <_vfiprintf_r+0x228>)
 800c5f6:	a904      	add	r1, sp, #16
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f7fc f903 	bl	8008804 <_printf_i>
 800c5fe:	e7e4      	b.n	800c5ca <_vfiprintf_r+0x1e6>
 800c600:	0800cb11 	.word	0x0800cb11
 800c604:	0800cb1b 	.word	0x0800cb1b
 800c608:	080082d5 	.word	0x080082d5
 800c60c:	0800c3c1 	.word	0x0800c3c1
 800c610:	0800cb17 	.word	0x0800cb17

0800c614 <__swbuf_r>:
 800c614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c616:	460e      	mov	r6, r1
 800c618:	4614      	mov	r4, r2
 800c61a:	4605      	mov	r5, r0
 800c61c:	b118      	cbz	r0, 800c626 <__swbuf_r+0x12>
 800c61e:	6a03      	ldr	r3, [r0, #32]
 800c620:	b90b      	cbnz	r3, 800c626 <__swbuf_r+0x12>
 800c622:	f7fc fca7 	bl	8008f74 <__sinit>
 800c626:	69a3      	ldr	r3, [r4, #24]
 800c628:	60a3      	str	r3, [r4, #8]
 800c62a:	89a3      	ldrh	r3, [r4, #12]
 800c62c:	071a      	lsls	r2, r3, #28
 800c62e:	d501      	bpl.n	800c634 <__swbuf_r+0x20>
 800c630:	6923      	ldr	r3, [r4, #16]
 800c632:	b943      	cbnz	r3, 800c646 <__swbuf_r+0x32>
 800c634:	4621      	mov	r1, r4
 800c636:	4628      	mov	r0, r5
 800c638:	f000 f82a 	bl	800c690 <__swsetup_r>
 800c63c:	b118      	cbz	r0, 800c646 <__swbuf_r+0x32>
 800c63e:	f04f 37ff 	mov.w	r7, #4294967295
 800c642:	4638      	mov	r0, r7
 800c644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c646:	6823      	ldr	r3, [r4, #0]
 800c648:	6922      	ldr	r2, [r4, #16]
 800c64a:	1a98      	subs	r0, r3, r2
 800c64c:	6963      	ldr	r3, [r4, #20]
 800c64e:	b2f6      	uxtb	r6, r6
 800c650:	4283      	cmp	r3, r0
 800c652:	4637      	mov	r7, r6
 800c654:	dc05      	bgt.n	800c662 <__swbuf_r+0x4e>
 800c656:	4621      	mov	r1, r4
 800c658:	4628      	mov	r0, r5
 800c65a:	f7ff fa53 	bl	800bb04 <_fflush_r>
 800c65e:	2800      	cmp	r0, #0
 800c660:	d1ed      	bne.n	800c63e <__swbuf_r+0x2a>
 800c662:	68a3      	ldr	r3, [r4, #8]
 800c664:	3b01      	subs	r3, #1
 800c666:	60a3      	str	r3, [r4, #8]
 800c668:	6823      	ldr	r3, [r4, #0]
 800c66a:	1c5a      	adds	r2, r3, #1
 800c66c:	6022      	str	r2, [r4, #0]
 800c66e:	701e      	strb	r6, [r3, #0]
 800c670:	6962      	ldr	r2, [r4, #20]
 800c672:	1c43      	adds	r3, r0, #1
 800c674:	429a      	cmp	r2, r3
 800c676:	d004      	beq.n	800c682 <__swbuf_r+0x6e>
 800c678:	89a3      	ldrh	r3, [r4, #12]
 800c67a:	07db      	lsls	r3, r3, #31
 800c67c:	d5e1      	bpl.n	800c642 <__swbuf_r+0x2e>
 800c67e:	2e0a      	cmp	r6, #10
 800c680:	d1df      	bne.n	800c642 <__swbuf_r+0x2e>
 800c682:	4621      	mov	r1, r4
 800c684:	4628      	mov	r0, r5
 800c686:	f7ff fa3d 	bl	800bb04 <_fflush_r>
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d0d9      	beq.n	800c642 <__swbuf_r+0x2e>
 800c68e:	e7d6      	b.n	800c63e <__swbuf_r+0x2a>

0800c690 <__swsetup_r>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	4b29      	ldr	r3, [pc, #164]	@ (800c738 <__swsetup_r+0xa8>)
 800c694:	4605      	mov	r5, r0
 800c696:	6818      	ldr	r0, [r3, #0]
 800c698:	460c      	mov	r4, r1
 800c69a:	b118      	cbz	r0, 800c6a4 <__swsetup_r+0x14>
 800c69c:	6a03      	ldr	r3, [r0, #32]
 800c69e:	b90b      	cbnz	r3, 800c6a4 <__swsetup_r+0x14>
 800c6a0:	f7fc fc68 	bl	8008f74 <__sinit>
 800c6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6a8:	0719      	lsls	r1, r3, #28
 800c6aa:	d422      	bmi.n	800c6f2 <__swsetup_r+0x62>
 800c6ac:	06da      	lsls	r2, r3, #27
 800c6ae:	d407      	bmi.n	800c6c0 <__swsetup_r+0x30>
 800c6b0:	2209      	movs	r2, #9
 800c6b2:	602a      	str	r2, [r5, #0]
 800c6b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6b8:	81a3      	strh	r3, [r4, #12]
 800c6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c6be:	e033      	b.n	800c728 <__swsetup_r+0x98>
 800c6c0:	0758      	lsls	r0, r3, #29
 800c6c2:	d512      	bpl.n	800c6ea <__swsetup_r+0x5a>
 800c6c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6c6:	b141      	cbz	r1, 800c6da <__swsetup_r+0x4a>
 800c6c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6cc:	4299      	cmp	r1, r3
 800c6ce:	d002      	beq.n	800c6d6 <__swsetup_r+0x46>
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f7fd fc0d 	bl	8009ef0 <_free_r>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c6da:	89a3      	ldrh	r3, [r4, #12]
 800c6dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c6e0:	81a3      	strh	r3, [r4, #12]
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	6063      	str	r3, [r4, #4]
 800c6e6:	6923      	ldr	r3, [r4, #16]
 800c6e8:	6023      	str	r3, [r4, #0]
 800c6ea:	89a3      	ldrh	r3, [r4, #12]
 800c6ec:	f043 0308 	orr.w	r3, r3, #8
 800c6f0:	81a3      	strh	r3, [r4, #12]
 800c6f2:	6923      	ldr	r3, [r4, #16]
 800c6f4:	b94b      	cbnz	r3, 800c70a <__swsetup_r+0x7a>
 800c6f6:	89a3      	ldrh	r3, [r4, #12]
 800c6f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c6fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c700:	d003      	beq.n	800c70a <__swsetup_r+0x7a>
 800c702:	4621      	mov	r1, r4
 800c704:	4628      	mov	r0, r5
 800c706:	f000 f883 	bl	800c810 <__smakebuf_r>
 800c70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c70e:	f013 0201 	ands.w	r2, r3, #1
 800c712:	d00a      	beq.n	800c72a <__swsetup_r+0x9a>
 800c714:	2200      	movs	r2, #0
 800c716:	60a2      	str	r2, [r4, #8]
 800c718:	6962      	ldr	r2, [r4, #20]
 800c71a:	4252      	negs	r2, r2
 800c71c:	61a2      	str	r2, [r4, #24]
 800c71e:	6922      	ldr	r2, [r4, #16]
 800c720:	b942      	cbnz	r2, 800c734 <__swsetup_r+0xa4>
 800c722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c726:	d1c5      	bne.n	800c6b4 <__swsetup_r+0x24>
 800c728:	bd38      	pop	{r3, r4, r5, pc}
 800c72a:	0799      	lsls	r1, r3, #30
 800c72c:	bf58      	it	pl
 800c72e:	6962      	ldrpl	r2, [r4, #20]
 800c730:	60a2      	str	r2, [r4, #8]
 800c732:	e7f4      	b.n	800c71e <__swsetup_r+0x8e>
 800c734:	2000      	movs	r0, #0
 800c736:	e7f7      	b.n	800c728 <__swsetup_r+0x98>
 800c738:	20000024 	.word	0x20000024

0800c73c <_raise_r>:
 800c73c:	291f      	cmp	r1, #31
 800c73e:	b538      	push	{r3, r4, r5, lr}
 800c740:	4605      	mov	r5, r0
 800c742:	460c      	mov	r4, r1
 800c744:	d904      	bls.n	800c750 <_raise_r+0x14>
 800c746:	2316      	movs	r3, #22
 800c748:	6003      	str	r3, [r0, #0]
 800c74a:	f04f 30ff 	mov.w	r0, #4294967295
 800c74e:	bd38      	pop	{r3, r4, r5, pc}
 800c750:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c752:	b112      	cbz	r2, 800c75a <_raise_r+0x1e>
 800c754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c758:	b94b      	cbnz	r3, 800c76e <_raise_r+0x32>
 800c75a:	4628      	mov	r0, r5
 800c75c:	f000 f830 	bl	800c7c0 <_getpid_r>
 800c760:	4622      	mov	r2, r4
 800c762:	4601      	mov	r1, r0
 800c764:	4628      	mov	r0, r5
 800c766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c76a:	f000 b817 	b.w	800c79c <_kill_r>
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d00a      	beq.n	800c788 <_raise_r+0x4c>
 800c772:	1c59      	adds	r1, r3, #1
 800c774:	d103      	bne.n	800c77e <_raise_r+0x42>
 800c776:	2316      	movs	r3, #22
 800c778:	6003      	str	r3, [r0, #0]
 800c77a:	2001      	movs	r0, #1
 800c77c:	e7e7      	b.n	800c74e <_raise_r+0x12>
 800c77e:	2100      	movs	r1, #0
 800c780:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c784:	4620      	mov	r0, r4
 800c786:	4798      	blx	r3
 800c788:	2000      	movs	r0, #0
 800c78a:	e7e0      	b.n	800c74e <_raise_r+0x12>

0800c78c <raise>:
 800c78c:	4b02      	ldr	r3, [pc, #8]	@ (800c798 <raise+0xc>)
 800c78e:	4601      	mov	r1, r0
 800c790:	6818      	ldr	r0, [r3, #0]
 800c792:	f7ff bfd3 	b.w	800c73c <_raise_r>
 800c796:	bf00      	nop
 800c798:	20000024 	.word	0x20000024

0800c79c <_kill_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	4d07      	ldr	r5, [pc, #28]	@ (800c7bc <_kill_r+0x20>)
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	4608      	mov	r0, r1
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	602b      	str	r3, [r5, #0]
 800c7aa:	f7f6 fa6f 	bl	8002c8c <_kill>
 800c7ae:	1c43      	adds	r3, r0, #1
 800c7b0:	d102      	bne.n	800c7b8 <_kill_r+0x1c>
 800c7b2:	682b      	ldr	r3, [r5, #0]
 800c7b4:	b103      	cbz	r3, 800c7b8 <_kill_r+0x1c>
 800c7b6:	6023      	str	r3, [r4, #0]
 800c7b8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ba:	bf00      	nop
 800c7bc:	2000459c 	.word	0x2000459c

0800c7c0 <_getpid_r>:
 800c7c0:	f7f6 ba5c 	b.w	8002c7c <_getpid>

0800c7c4 <__swhatbuf_r>:
 800c7c4:	b570      	push	{r4, r5, r6, lr}
 800c7c6:	460c      	mov	r4, r1
 800c7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7cc:	2900      	cmp	r1, #0
 800c7ce:	b096      	sub	sp, #88	@ 0x58
 800c7d0:	4615      	mov	r5, r2
 800c7d2:	461e      	mov	r6, r3
 800c7d4:	da0d      	bge.n	800c7f2 <__swhatbuf_r+0x2e>
 800c7d6:	89a3      	ldrh	r3, [r4, #12]
 800c7d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c7dc:	f04f 0100 	mov.w	r1, #0
 800c7e0:	bf14      	ite	ne
 800c7e2:	2340      	movne	r3, #64	@ 0x40
 800c7e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	6031      	str	r1, [r6, #0]
 800c7ec:	602b      	str	r3, [r5, #0]
 800c7ee:	b016      	add	sp, #88	@ 0x58
 800c7f0:	bd70      	pop	{r4, r5, r6, pc}
 800c7f2:	466a      	mov	r2, sp
 800c7f4:	f000 f848 	bl	800c888 <_fstat_r>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	dbec      	blt.n	800c7d6 <__swhatbuf_r+0x12>
 800c7fc:	9901      	ldr	r1, [sp, #4]
 800c7fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c802:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c806:	4259      	negs	r1, r3
 800c808:	4159      	adcs	r1, r3
 800c80a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c80e:	e7eb      	b.n	800c7e8 <__swhatbuf_r+0x24>

0800c810 <__smakebuf_r>:
 800c810:	898b      	ldrh	r3, [r1, #12]
 800c812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c814:	079d      	lsls	r5, r3, #30
 800c816:	4606      	mov	r6, r0
 800c818:	460c      	mov	r4, r1
 800c81a:	d507      	bpl.n	800c82c <__smakebuf_r+0x1c>
 800c81c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	6123      	str	r3, [r4, #16]
 800c824:	2301      	movs	r3, #1
 800c826:	6163      	str	r3, [r4, #20]
 800c828:	b003      	add	sp, #12
 800c82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c82c:	ab01      	add	r3, sp, #4
 800c82e:	466a      	mov	r2, sp
 800c830:	f7ff ffc8 	bl	800c7c4 <__swhatbuf_r>
 800c834:	9f00      	ldr	r7, [sp, #0]
 800c836:	4605      	mov	r5, r0
 800c838:	4639      	mov	r1, r7
 800c83a:	4630      	mov	r0, r6
 800c83c:	f7fd fbcc 	bl	8009fd8 <_malloc_r>
 800c840:	b948      	cbnz	r0, 800c856 <__smakebuf_r+0x46>
 800c842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c846:	059a      	lsls	r2, r3, #22
 800c848:	d4ee      	bmi.n	800c828 <__smakebuf_r+0x18>
 800c84a:	f023 0303 	bic.w	r3, r3, #3
 800c84e:	f043 0302 	orr.w	r3, r3, #2
 800c852:	81a3      	strh	r3, [r4, #12]
 800c854:	e7e2      	b.n	800c81c <__smakebuf_r+0xc>
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	6020      	str	r0, [r4, #0]
 800c85a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c85e:	81a3      	strh	r3, [r4, #12]
 800c860:	9b01      	ldr	r3, [sp, #4]
 800c862:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c866:	b15b      	cbz	r3, 800c880 <__smakebuf_r+0x70>
 800c868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c86c:	4630      	mov	r0, r6
 800c86e:	f000 f81d 	bl	800c8ac <_isatty_r>
 800c872:	b128      	cbz	r0, 800c880 <__smakebuf_r+0x70>
 800c874:	89a3      	ldrh	r3, [r4, #12]
 800c876:	f023 0303 	bic.w	r3, r3, #3
 800c87a:	f043 0301 	orr.w	r3, r3, #1
 800c87e:	81a3      	strh	r3, [r4, #12]
 800c880:	89a3      	ldrh	r3, [r4, #12]
 800c882:	431d      	orrs	r5, r3
 800c884:	81a5      	strh	r5, [r4, #12]
 800c886:	e7cf      	b.n	800c828 <__smakebuf_r+0x18>

0800c888 <_fstat_r>:
 800c888:	b538      	push	{r3, r4, r5, lr}
 800c88a:	4d07      	ldr	r5, [pc, #28]	@ (800c8a8 <_fstat_r+0x20>)
 800c88c:	2300      	movs	r3, #0
 800c88e:	4604      	mov	r4, r0
 800c890:	4608      	mov	r0, r1
 800c892:	4611      	mov	r1, r2
 800c894:	602b      	str	r3, [r5, #0]
 800c896:	f7f6 fa59 	bl	8002d4c <_fstat>
 800c89a:	1c43      	adds	r3, r0, #1
 800c89c:	d102      	bne.n	800c8a4 <_fstat_r+0x1c>
 800c89e:	682b      	ldr	r3, [r5, #0]
 800c8a0:	b103      	cbz	r3, 800c8a4 <_fstat_r+0x1c>
 800c8a2:	6023      	str	r3, [r4, #0]
 800c8a4:	bd38      	pop	{r3, r4, r5, pc}
 800c8a6:	bf00      	nop
 800c8a8:	2000459c 	.word	0x2000459c

0800c8ac <_isatty_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	4d06      	ldr	r5, [pc, #24]	@ (800c8c8 <_isatty_r+0x1c>)
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	602b      	str	r3, [r5, #0]
 800c8b8:	f7f6 fa58 	bl	8002d6c <_isatty>
 800c8bc:	1c43      	adds	r3, r0, #1
 800c8be:	d102      	bne.n	800c8c6 <_isatty_r+0x1a>
 800c8c0:	682b      	ldr	r3, [r5, #0]
 800c8c2:	b103      	cbz	r3, 800c8c6 <_isatty_r+0x1a>
 800c8c4:	6023      	str	r3, [r4, #0]
 800c8c6:	bd38      	pop	{r3, r4, r5, pc}
 800c8c8:	2000459c 	.word	0x2000459c

0800c8cc <_init>:
 800c8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ce:	bf00      	nop
 800c8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8d2:	bc08      	pop	{r3}
 800c8d4:	469e      	mov	lr, r3
 800c8d6:	4770      	bx	lr

0800c8d8 <_fini>:
 800c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8da:	bf00      	nop
 800c8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8de:	bc08      	pop	{r3}
 800c8e0:	469e      	mov	lr, r3
 800c8e2:	4770      	bx	lr
